
Lab03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080029dc  080029dc  000129dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a00  08002a00  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  08002a00  08002a00  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a00  08002a00  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a00  08002a00  00012a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a04  08002a04  00012a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08002a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  200001a0  08002ba8  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08002ba8  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009656  00000000  00000000  000201c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b57  00000000  00000000  0002981f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002b378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002bde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d26  00000000  00000000  0002c750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba96  00000000  00000000  00043476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822a7  00000000  00000000  0004ef0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d11b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002950  00000000  00000000  000d1208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a0 	.word	0x200001a0
 8000128:	00000000 	.word	0x00000000
 800012c:	080029c4 	.word	0x080029c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001a4 	.word	0x200001a4
 8000148:	080029c4 	.word	0x080029c4

0800014c <isPress>:
int current[NO_BT] = {RELEASE, RELEASE, RELEASE};
int previous[NO_BT] = {RELEASE, RELEASE, RELEASE};
int older[NO_BT] = {RELEASE, RELEASE, RELEASE};
int stable[NO_BT] = {RELEASE, RELEASE, RELEASE};

int isPress(int idx){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(btFlag[idx]){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isPress+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b00      	cmp	r3, #0
 800015e:	d006      	beq.n	800016e <isPress+0x22>
		btFlag[idx] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isPress+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isPress+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200001bc 	.word	0x200001bc

08000180 <btRead>:

void btRead(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_BT; i++){
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e078      	b.n	800027e <btRead+0xfe>
		older[i] = previous[i];
 800018c:	4a40      	ldr	r2, [pc, #256]	; (8000290 <btRead+0x110>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	493f      	ldr	r1, [pc, #252]	; (8000294 <btRead+0x114>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		previous[i] = current[i];
 800019c:	4a3e      	ldr	r2, [pc, #248]	; (8000298 <btRead+0x118>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	493a      	ldr	r1, [pc, #232]	; (8000290 <btRead+0x110>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		current[i] = HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin << i);
 80001ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	fa02 f303 	lsl.w	r3, r2, r3
 80001b6:	b29b      	uxth	r3, r3
 80001b8:	4619      	mov	r1, r3
 80001ba:	4838      	ldr	r0, [pc, #224]	; (800029c <btRead+0x11c>)
 80001bc:	f001 fbd6 	bl	800196c <HAL_GPIO_ReadPin>
 80001c0:	4603      	mov	r3, r0
 80001c2:	4619      	mov	r1, r3
 80001c4:	4a34      	ldr	r2, [pc, #208]	; (8000298 <btRead+0x118>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((previous[i] == current[i]) && (previous[i] == older[i])){
 80001cc:	4a30      	ldr	r2, [pc, #192]	; (8000290 <btRead+0x110>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	4930      	ldr	r1, [pc, #192]	; (8000298 <btRead+0x118>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001dc:	429a      	cmp	r2, r3
 80001de:	d14b      	bne.n	8000278 <btRead+0xf8>
 80001e0:	4a2b      	ldr	r2, [pc, #172]	; (8000290 <btRead+0x110>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	492a      	ldr	r1, [pc, #168]	; (8000294 <btRead+0x114>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	d141      	bne.n	8000278 <btRead+0xf8>
			if(older[i] != stable[i]){
 80001f4:	4a27      	ldr	r2, [pc, #156]	; (8000294 <btRead+0x114>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fc:	4928      	ldr	r1, [pc, #160]	; (80002a0 <btRead+0x120>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000204:	429a      	cmp	r2, r3
 8000206:	d018      	beq.n	800023a <btRead+0xba>
				stable[i] = older[i];
 8000208:	4a22      	ldr	r2, [pc, #136]	; (8000294 <btRead+0x114>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	4923      	ldr	r1, [pc, #140]	; (80002a0 <btRead+0x120>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if(current[i] == PRESS){
 8000218:	4a1f      	ldr	r2, [pc, #124]	; (8000298 <btRead+0x118>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d129      	bne.n	8000278 <btRead+0xf8>
					cnt[i] = NORMAL_CNT;
 8000224:	4a1f      	ldr	r2, [pc, #124]	; (80002a4 <btRead+0x124>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2164      	movs	r1, #100	; 0x64
 800022a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					btFlag[i] = 1;
 800022e:	4a1e      	ldr	r2, [pc, #120]	; (80002a8 <btRead+0x128>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2101      	movs	r1, #1
 8000234:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000238:	e01e      	b.n	8000278 <btRead+0xf8>
				}
			}else{
				cnt[i]--;
 800023a:	4a1a      	ldr	r2, [pc, #104]	; (80002a4 <btRead+0x124>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000242:	1e5a      	subs	r2, r3, #1
 8000244:	4917      	ldr	r1, [pc, #92]	; (80002a4 <btRead+0x124>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(cnt[i] == 0){
 800024c:	4a15      	ldr	r2, [pc, #84]	; (80002a4 <btRead+0x124>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d10f      	bne.n	8000278 <btRead+0xf8>
					cnt[i] = AUTO_CNT;
 8000258:	4a12      	ldr	r2, [pc, #72]	; (80002a4 <btRead+0x124>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2132      	movs	r1, #50	; 0x32
 800025e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if(stable[i] == PRESS) btFlag[i] = 1;
 8000262:	4a0f      	ldr	r2, [pc, #60]	; (80002a0 <btRead+0x120>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d104      	bne.n	8000278 <btRead+0xf8>
 800026e:	4a0e      	ldr	r2, [pc, #56]	; (80002a8 <btRead+0x128>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2101      	movs	r1, #1
 8000274:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NO_BT; i++){
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3301      	adds	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b02      	cmp	r3, #2
 8000282:	dd83      	ble.n	800018c <btRead+0xc>
				}
			}
		}
	}
}
 8000284:	bf00      	nop
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000018 	.word	0x20000018
 8000294:	20000024 	.word	0x20000024
 8000298:	2000000c 	.word	0x2000000c
 800029c:	40010800 	.word	0x40010800
 80002a0:	20000030 	.word	0x20000030
 80002a4:	20000000 	.word	0x20000000
 80002a8:	200001bc 	.word	0x200001bc

080002ac <isBt1>:
int redCnt = 5, yellowCnt = 2, greenCnt = 3;
int redTemp = 1, yellowTemp = 1, greenTemp = 1;
int horCnt = 0, verCnt = 0;
int scan = 0;

void isBt1(){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	if(isPress(0)){
 80002b0:	2000      	movs	r0, #0
 80002b2:	f7ff ff4b 	bl	800014c <isPress>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d02c      	beq.n	8000316 <isBt1+0x6a>
		resetTimer();
 80002bc:	f001 f80e 	bl	80012dc <resetTimer>
		horCnt = 0;
 80002c0:	4b15      	ldr	r3, [pc, #84]	; (8000318 <isBt1+0x6c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
		verCnt = 0;
 80002c6:	4b15      	ldr	r3, [pc, #84]	; (800031c <isBt1+0x70>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
		scan = 0;
 80002cc:	4b14      	ldr	r3, [pc, #80]	; (8000320 <isBt1+0x74>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
		updateBuffer(0, 0);
 80002d2:	2100      	movs	r1, #0
 80002d4:	2000      	movs	r0, #0
 80002d6:	f000 fe29 	bl	8000f2c <updateBuffer>
		setHor(IDLE);
 80002da:	f04f 30ff 	mov.w	r0, #4294967295
 80002de:	f000 fb53 	bl	8000988 <setHor>
		setVer(IDLE);
 80002e2:	f04f 30ff 	mov.w	r0, #4294967295
 80002e6:	f000 fbb5 	bl	8000a54 <setVer>
		horState = IDLE;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <isBt1+0x78>)
 80002ec:	f04f 32ff 	mov.w	r2, #4294967295
 80002f0:	601a      	str	r2, [r3, #0]
		verState = IDLE;
 80002f2:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <isBt1+0x7c>)
 80002f4:	f04f 32ff 	mov.w	r2, #4294967295
 80002f8:	601a      	str	r2, [r3, #0]
		editState = EDIT_RED;
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <isBt1+0x80>)
 80002fc:	2206      	movs	r2, #6
 80002fe:	601a      	str	r2, [r3, #0]
		redTemp = redCnt;
 8000300:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <isBt1+0x84>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a0b      	ldr	r2, [pc, #44]	; (8000334 <isBt1+0x88>)
 8000306:	6013      	str	r3, [r2, #0]
		setTimer1(100);
 8000308:	2064      	movs	r0, #100	; 0x64
 800030a:	f000 fed9 	bl	80010c0 <setTimer1>
		setTimer3(100);
 800030e:	2064      	movs	r0, #100	; 0x64
 8000310:	f000 ff0e 	bl	8001130 <setTimer3>
		return;
 8000314:	bf00      	nop
	}
}
 8000316:	bd80      	pop	{r7, pc}
 8000318:	200001c8 	.word	0x200001c8
 800031c:	200001cc 	.word	0x200001cc
 8000320:	200001d0 	.word	0x200001d0
 8000324:	2000003c 	.word	0x2000003c
 8000328:	20000040 	.word	0x20000040
 800032c:	20000044 	.word	0x20000044
 8000330:	20000048 	.word	0x20000048
 8000334:	20000054 	.word	0x20000054

08000338 <horRun>:

void horRun(){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	switch(horState){
 800033c:	4b7d      	ldr	r3, [pc, #500]	; (8000534 <horRun+0x1fc>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	3b01      	subs	r3, #1
 8000342:	2b03      	cmp	r3, #3
 8000344:	f200 80f3 	bhi.w	800052e <horRun+0x1f6>
 8000348:	a201      	add	r2, pc, #4	; (adr r2, 8000350 <horRun+0x18>)
 800034a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800034e:	bf00      	nop
 8000350:	08000361 	.word	0x08000361
 8000354:	08000391 	.word	0x08000391
 8000358:	080004a5 	.word	0x080004a5
 800035c:	0800041b 	.word	0x0800041b
	case INIT:
		setTimer1(redCnt*1000);
 8000360:	4b75      	ldr	r3, [pc, #468]	; (8000538 <horRun+0x200>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000368:	fb02 f303 	mul.w	r3, r2, r3
 800036c:	4618      	mov	r0, r3
 800036e:	f000 fea7 	bl	80010c0 <setTimer1>
		setTimer2(1000);
 8000372:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000376:	f000 febf 	bl	80010f8 <setTimer2>
		setTimer3(100);
 800037a:	2064      	movs	r0, #100	; 0x64
 800037c:	f000 fed8 	bl	8001130 <setTimer3>
		horCnt = redCnt;
 8000380:	4b6d      	ldr	r3, [pc, #436]	; (8000538 <horRun+0x200>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a6d      	ldr	r2, [pc, #436]	; (800053c <horRun+0x204>)
 8000386:	6013      	str	r3, [r2, #0]
		horState = RED;
 8000388:	4b6a      	ldr	r3, [pc, #424]	; (8000534 <horRun+0x1fc>)
 800038a:	2202      	movs	r2, #2
 800038c:	601a      	str	r2, [r3, #0]
		break;
 800038e:	e0cf      	b.n	8000530 <horRun+0x1f8>

	case RED:{
		setHor(RED);
 8000390:	2002      	movs	r0, #2
 8000392:	f000 faf9 	bl	8000988 <setHor>

		if(flagTimer2){
 8000396:	4b6a      	ldr	r3, [pc, #424]	; (8000540 <horRun+0x208>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d008      	beq.n	80003b0 <horRun+0x78>
			horCnt--;
 800039e:	4b67      	ldr	r3, [pc, #412]	; (800053c <horRun+0x204>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	4a65      	ldr	r2, [pc, #404]	; (800053c <horRun+0x204>)
 80003a6:	6013      	str	r3, [r2, #0]
			setTimer2(1000);
 80003a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ac:	f000 fea4 	bl	80010f8 <setTimer2>
		}

		if(flagTimer1){
 80003b0:	4b64      	ldr	r3, [pc, #400]	; (8000544 <horRun+0x20c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d00f      	beq.n	80003d8 <horRun+0xa0>
			setTimer1(greenCnt*1000);
 80003b8:	4b63      	ldr	r3, [pc, #396]	; (8000548 <horRun+0x210>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003c0:	fb02 f303 	mul.w	r3, r2, r3
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 fe7b 	bl	80010c0 <setTimer1>
			horCnt = greenCnt;
 80003ca:	4b5f      	ldr	r3, [pc, #380]	; (8000548 <horRun+0x210>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a5b      	ldr	r2, [pc, #364]	; (800053c <horRun+0x204>)
 80003d0:	6013      	str	r3, [r2, #0]
			horState = GREEN;
 80003d2:	4b58      	ldr	r3, [pc, #352]	; (8000534 <horRun+0x1fc>)
 80003d4:	2204      	movs	r2, #4
 80003d6:	601a      	str	r2, [r3, #0]
		}

		if(flagTimer3){
 80003d8:	4b5c      	ldr	r3, [pc, #368]	; (800054c <horRun+0x214>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d019      	beq.n	8000414 <horRun+0xdc>
			updateBuffer(horCnt, verCnt);
 80003e0:	4b56      	ldr	r3, [pc, #344]	; (800053c <horRun+0x204>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a5a      	ldr	r2, [pc, #360]	; (8000550 <horRun+0x218>)
 80003e6:	6812      	ldr	r2, [r2, #0]
 80003e8:	4611      	mov	r1, r2
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 fd9e 	bl	8000f2c <updateBuffer>
			update7SEG(scan);
 80003f0:	4b58      	ldr	r3, [pc, #352]	; (8000554 <horRun+0x21c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 fd3b 	bl	8000e70 <update7SEG>
			scan = !scan;
 80003fa:	4b56      	ldr	r3, [pc, #344]	; (8000554 <horRun+0x21c>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	bf0c      	ite	eq
 8000402:	2301      	moveq	r3, #1
 8000404:	2300      	movne	r3, #0
 8000406:	b2db      	uxtb	r3, r3
 8000408:	461a      	mov	r2, r3
 800040a:	4b52      	ldr	r3, [pc, #328]	; (8000554 <horRun+0x21c>)
 800040c:	601a      	str	r2, [r3, #0]
			setTimer3(250);
 800040e:	20fa      	movs	r0, #250	; 0xfa
 8000410:	f000 fe8e 	bl	8001130 <setTimer3>
		}

		isBt1();
 8000414:	f7ff ff4a 	bl	80002ac <isBt1>
		break;
 8000418:	e08a      	b.n	8000530 <horRun+0x1f8>
	}

	case GREEN:{
		setHor(GREEN);
 800041a:	2004      	movs	r0, #4
 800041c:	f000 fab4 	bl	8000988 <setHor>
		if(flagTimer2){
 8000420:	4b47      	ldr	r3, [pc, #284]	; (8000540 <horRun+0x208>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d008      	beq.n	800043a <horRun+0x102>
			horCnt--;
 8000428:	4b44      	ldr	r3, [pc, #272]	; (800053c <horRun+0x204>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	3b01      	subs	r3, #1
 800042e:	4a43      	ldr	r2, [pc, #268]	; (800053c <horRun+0x204>)
 8000430:	6013      	str	r3, [r2, #0]
			setTimer2(1000);
 8000432:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000436:	f000 fe5f 	bl	80010f8 <setTimer2>
		}

		if(flagTimer1){
 800043a:	4b42      	ldr	r3, [pc, #264]	; (8000544 <horRun+0x20c>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d00f      	beq.n	8000462 <horRun+0x12a>
			setTimer1(yellowCnt*1000);
 8000442:	4b45      	ldr	r3, [pc, #276]	; (8000558 <horRun+0x220>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800044a:	fb02 f303 	mul.w	r3, r2, r3
 800044e:	4618      	mov	r0, r3
 8000450:	f000 fe36 	bl	80010c0 <setTimer1>
			horCnt = yellowCnt;
 8000454:	4b40      	ldr	r3, [pc, #256]	; (8000558 <horRun+0x220>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a38      	ldr	r2, [pc, #224]	; (800053c <horRun+0x204>)
 800045a:	6013      	str	r3, [r2, #0]
			horState = YELLOW;
 800045c:	4b35      	ldr	r3, [pc, #212]	; (8000534 <horRun+0x1fc>)
 800045e:	2203      	movs	r2, #3
 8000460:	601a      	str	r2, [r3, #0]
		}

		if(flagTimer3){
 8000462:	4b3a      	ldr	r3, [pc, #232]	; (800054c <horRun+0x214>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d019      	beq.n	800049e <horRun+0x166>
			updateBuffer(horCnt, verCnt);
 800046a:	4b34      	ldr	r3, [pc, #208]	; (800053c <horRun+0x204>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a38      	ldr	r2, [pc, #224]	; (8000550 <horRun+0x218>)
 8000470:	6812      	ldr	r2, [r2, #0]
 8000472:	4611      	mov	r1, r2
 8000474:	4618      	mov	r0, r3
 8000476:	f000 fd59 	bl	8000f2c <updateBuffer>
			update7SEG(scan);
 800047a:	4b36      	ldr	r3, [pc, #216]	; (8000554 <horRun+0x21c>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4618      	mov	r0, r3
 8000480:	f000 fcf6 	bl	8000e70 <update7SEG>
			scan = !scan;
 8000484:	4b33      	ldr	r3, [pc, #204]	; (8000554 <horRun+0x21c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	bf0c      	ite	eq
 800048c:	2301      	moveq	r3, #1
 800048e:	2300      	movne	r3, #0
 8000490:	b2db      	uxtb	r3, r3
 8000492:	461a      	mov	r2, r3
 8000494:	4b2f      	ldr	r3, [pc, #188]	; (8000554 <horRun+0x21c>)
 8000496:	601a      	str	r2, [r3, #0]
			setTimer3(250);
 8000498:	20fa      	movs	r0, #250	; 0xfa
 800049a:	f000 fe49 	bl	8001130 <setTimer3>
		}

		isBt1();
 800049e:	f7ff ff05 	bl	80002ac <isBt1>
		break;
 80004a2:	e045      	b.n	8000530 <horRun+0x1f8>
	}

	case YELLOW:{
		setHor(YELLOW);
 80004a4:	2003      	movs	r0, #3
 80004a6:	f000 fa6f 	bl	8000988 <setHor>
		if(flagTimer2){
 80004aa:	4b25      	ldr	r3, [pc, #148]	; (8000540 <horRun+0x208>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d008      	beq.n	80004c4 <horRun+0x18c>
			horCnt--;
 80004b2:	4b22      	ldr	r3, [pc, #136]	; (800053c <horRun+0x204>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	3b01      	subs	r3, #1
 80004b8:	4a20      	ldr	r2, [pc, #128]	; (800053c <horRun+0x204>)
 80004ba:	6013      	str	r3, [r2, #0]
			setTimer2(1000);
 80004bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c0:	f000 fe1a 	bl	80010f8 <setTimer2>
		}

		if(flagTimer1){
 80004c4:	4b1f      	ldr	r3, [pc, #124]	; (8000544 <horRun+0x20c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d00f      	beq.n	80004ec <horRun+0x1b4>
			setTimer1(redCnt*1000);
 80004cc:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <horRun+0x200>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004d4:	fb02 f303 	mul.w	r3, r2, r3
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 fdf1 	bl	80010c0 <setTimer1>
			horCnt = redCnt;
 80004de:	4b16      	ldr	r3, [pc, #88]	; (8000538 <horRun+0x200>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a16      	ldr	r2, [pc, #88]	; (800053c <horRun+0x204>)
 80004e4:	6013      	str	r3, [r2, #0]
			horState = RED;
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <horRun+0x1fc>)
 80004e8:	2202      	movs	r2, #2
 80004ea:	601a      	str	r2, [r3, #0]
		}

		if(flagTimer3){
 80004ec:	4b17      	ldr	r3, [pc, #92]	; (800054c <horRun+0x214>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d019      	beq.n	8000528 <horRun+0x1f0>
			updateBuffer(horCnt, verCnt);
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <horRun+0x204>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a15      	ldr	r2, [pc, #84]	; (8000550 <horRun+0x218>)
 80004fa:	6812      	ldr	r2, [r2, #0]
 80004fc:	4611      	mov	r1, r2
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fd14 	bl	8000f2c <updateBuffer>
			update7SEG(scan);
 8000504:	4b13      	ldr	r3, [pc, #76]	; (8000554 <horRun+0x21c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4618      	mov	r0, r3
 800050a:	f000 fcb1 	bl	8000e70 <update7SEG>
			scan = !scan;
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <horRun+0x21c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	bf0c      	ite	eq
 8000516:	2301      	moveq	r3, #1
 8000518:	2300      	movne	r3, #0
 800051a:	b2db      	uxtb	r3, r3
 800051c:	461a      	mov	r2, r3
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <horRun+0x21c>)
 8000520:	601a      	str	r2, [r3, #0]
			setTimer3(250);
 8000522:	20fa      	movs	r0, #250	; 0xfa
 8000524:	f000 fe04 	bl	8001130 <setTimer3>
		}

		isBt1();
 8000528:	f7ff fec0 	bl	80002ac <isBt1>
		break;
 800052c:	e000      	b.n	8000530 <horRun+0x1f8>
	}

	default: //nothing
		break;
 800052e:	bf00      	nop
	}
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	2000003c 	.word	0x2000003c
 8000538:	20000048 	.word	0x20000048
 800053c:	200001c8 	.word	0x200001c8
 8000540:	20000204 	.word	0x20000204
 8000544:	20000200 	.word	0x20000200
 8000548:	20000050 	.word	0x20000050
 800054c:	20000208 	.word	0x20000208
 8000550:	200001cc 	.word	0x200001cc
 8000554:	200001d0 	.word	0x200001d0
 8000558:	2000004c 	.word	0x2000004c

0800055c <verRun>:

void verRun(){
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	switch(verState){
 8000560:	4b4f      	ldr	r3, [pc, #316]	; (80006a0 <verRun+0x144>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3b01      	subs	r3, #1
 8000566:	2b03      	cmp	r3, #3
 8000568:	f200 8090 	bhi.w	800068c <verRun+0x130>
 800056c:	a201      	add	r2, pc, #4	; (adr r2, 8000574 <verRun+0x18>)
 800056e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000572:	bf00      	nop
 8000574:	08000585 	.word	0x08000585
 8000578:	08000643 	.word	0x08000643
 800057c:	080005f9 	.word	0x080005f9
 8000580:	080005af 	.word	0x080005af
	case INIT:
		setTimer4(greenCnt*1000);
 8000584:	4b47      	ldr	r3, [pc, #284]	; (80006a4 <verRun+0x148>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800058c:	fb02 f303 	mul.w	r3, r2, r3
 8000590:	4618      	mov	r0, r3
 8000592:	f000 fde9 	bl	8001168 <setTimer4>
		setTimer5(1000);
 8000596:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059a:	f000 fe01 	bl	80011a0 <setTimer5>
		verCnt = greenCnt;
 800059e:	4b41      	ldr	r3, [pc, #260]	; (80006a4 <verRun+0x148>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a41      	ldr	r2, [pc, #260]	; (80006a8 <verRun+0x14c>)
 80005a4:	6013      	str	r3, [r2, #0]
		verState = GREEN;
 80005a6:	4b3e      	ldr	r3, [pc, #248]	; (80006a0 <verRun+0x144>)
 80005a8:	2204      	movs	r2, #4
 80005aa:	601a      	str	r2, [r3, #0]
		break;
 80005ac:	e075      	b.n	800069a <verRun+0x13e>

	case GREEN:{
		setVer(GREEN);
 80005ae:	2004      	movs	r0, #4
 80005b0:	f000 fa50 	bl	8000a54 <setVer>
		if(flagTimer5){
 80005b4:	4b3d      	ldr	r3, [pc, #244]	; (80006ac <verRun+0x150>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d008      	beq.n	80005ce <verRun+0x72>
			verCnt--;
 80005bc:	4b3a      	ldr	r3, [pc, #232]	; (80006a8 <verRun+0x14c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	3b01      	subs	r3, #1
 80005c2:	4a39      	ldr	r2, [pc, #228]	; (80006a8 <verRun+0x14c>)
 80005c4:	6013      	str	r3, [r2, #0]
			setTimer5(1000);
 80005c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ca:	f000 fde9 	bl	80011a0 <setTimer5>
		}

		if(flagTimer4){
 80005ce:	4b38      	ldr	r3, [pc, #224]	; (80006b0 <verRun+0x154>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d05c      	beq.n	8000690 <verRun+0x134>
			setTimer4(yellowCnt*1000);
 80005d6:	4b37      	ldr	r3, [pc, #220]	; (80006b4 <verRun+0x158>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005de:	fb02 f303 	mul.w	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fdc0 	bl	8001168 <setTimer4>
			verCnt = yellowCnt;
 80005e8:	4b32      	ldr	r3, [pc, #200]	; (80006b4 <verRun+0x158>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a2e      	ldr	r2, [pc, #184]	; (80006a8 <verRun+0x14c>)
 80005ee:	6013      	str	r3, [r2, #0]
			verState = YELLOW;
 80005f0:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <verRun+0x144>)
 80005f2:	2203      	movs	r2, #3
 80005f4:	601a      	str	r2, [r3, #0]
		}
		break;
 80005f6:	e04b      	b.n	8000690 <verRun+0x134>
	}

	case YELLOW:{
		setVer(YELLOW);
 80005f8:	2003      	movs	r0, #3
 80005fa:	f000 fa2b 	bl	8000a54 <setVer>
		if(flagTimer5){
 80005fe:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <verRun+0x150>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d008      	beq.n	8000618 <verRun+0xbc>
			verCnt--;
 8000606:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <verRun+0x14c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	3b01      	subs	r3, #1
 800060c:	4a26      	ldr	r2, [pc, #152]	; (80006a8 <verRun+0x14c>)
 800060e:	6013      	str	r3, [r2, #0]
			setTimer5(1000);
 8000610:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000614:	f000 fdc4 	bl	80011a0 <setTimer5>
		}

		if(flagTimer4){
 8000618:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <verRun+0x154>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d039      	beq.n	8000694 <verRun+0x138>
			setTimer4(redCnt*1000);
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <verRun+0x15c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000628:	fb02 f303 	mul.w	r3, r2, r3
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fd9b 	bl	8001168 <setTimer4>
			verCnt = redCnt;
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <verRun+0x15c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <verRun+0x14c>)
 8000638:	6013      	str	r3, [r2, #0]
			verState = RED;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <verRun+0x144>)
 800063c:	2202      	movs	r2, #2
 800063e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000640:	e028      	b.n	8000694 <verRun+0x138>
	}

	case RED:{
		setVer(RED);
 8000642:	2002      	movs	r0, #2
 8000644:	f000 fa06 	bl	8000a54 <setVer>
		if(flagTimer5){
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <verRun+0x150>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d008      	beq.n	8000662 <verRun+0x106>
			verCnt--;
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <verRun+0x14c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	3b01      	subs	r3, #1
 8000656:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <verRun+0x14c>)
 8000658:	6013      	str	r3, [r2, #0]
			setTimer5(1000);
 800065a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065e:	f000 fd9f 	bl	80011a0 <setTimer5>
		}

		if(flagTimer4){
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <verRun+0x154>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d016      	beq.n	8000698 <verRun+0x13c>
			setTimer4(greenCnt*1000);
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <verRun+0x148>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000672:	fb02 f303 	mul.w	r3, r2, r3
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fd76 	bl	8001168 <setTimer4>
			verCnt = greenCnt;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <verRun+0x148>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a09      	ldr	r2, [pc, #36]	; (80006a8 <verRun+0x14c>)
 8000682:	6013      	str	r3, [r2, #0]
			verState = GREEN;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <verRun+0x144>)
 8000686:	2204      	movs	r2, #4
 8000688:	601a      	str	r2, [r3, #0]
		}
		break;
 800068a:	e005      	b.n	8000698 <verRun+0x13c>
	}

	default: //nothing
		break;
 800068c:	bf00      	nop
 800068e:	e004      	b.n	800069a <verRun+0x13e>
		break;
 8000690:	bf00      	nop
 8000692:	e002      	b.n	800069a <verRun+0x13e>
		break;
 8000694:	bf00      	nop
 8000696:	e000      	b.n	800069a <verRun+0x13e>
		break;
 8000698:	bf00      	nop
	}
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000040 	.word	0x20000040
 80006a4:	20000050 	.word	0x20000050
 80006a8:	200001cc 	.word	0x200001cc
 80006ac:	20000210 	.word	0x20000210
 80006b0:	2000020c 	.word	0x2000020c
 80006b4:	2000004c 	.word	0x2000004c
 80006b8:	20000048 	.word	0x20000048

080006bc <editRun>:

void editRun(){
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	switch(editState){
 80006c0:	4b9f      	ldr	r3, [pc, #636]	; (8000940 <editRun+0x284>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b08      	cmp	r3, #8
 80006c6:	f000 80cf 	beq.w	8000868 <editRun+0x1ac>
 80006ca:	2b08      	cmp	r3, #8
 80006cc:	f300 812f 	bgt.w	800092e <editRun+0x272>
 80006d0:	2b06      	cmp	r3, #6
 80006d2:	d002      	beq.n	80006da <editRun+0x1e>
 80006d4:	2b07      	cmp	r3, #7
 80006d6:	d064      	beq.n	80007a2 <editRun+0xe6>
		}
		break;
	}

	default: //nothing
		break;
 80006d8:	e129      	b.n	800092e <editRun+0x272>
		updateBuffer(redTemp, 2);
 80006da:	4b9a      	ldr	r3, [pc, #616]	; (8000944 <editRun+0x288>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2102      	movs	r1, #2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fc23 	bl	8000f2c <updateBuffer>
		if(isPress(0)){
 80006e6:	2000      	movs	r0, #0
 80006e8:	f7ff fd30 	bl	800014c <isPress>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d014      	beq.n	800071c <editRun+0x60>
			yellowTemp = yellowCnt;
 80006f2:	4b95      	ldr	r3, [pc, #596]	; (8000948 <editRun+0x28c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a95      	ldr	r2, [pc, #596]	; (800094c <editRun+0x290>)
 80006f8:	6013      	str	r3, [r2, #0]
			editState = EDIT_YELLOW;
 80006fa:	4b91      	ldr	r3, [pc, #580]	; (8000940 <editRun+0x284>)
 80006fc:	2207      	movs	r2, #7
 80006fe:	601a      	str	r2, [r3, #0]
			setHor(IDLE);
 8000700:	f04f 30ff 	mov.w	r0, #4294967295
 8000704:	f000 f940 	bl	8000988 <setHor>
			setVer(IDLE);
 8000708:	f04f 30ff 	mov.w	r0, #4294967295
 800070c:	f000 f9a2 	bl	8000a54 <setVer>
			setTimer1(100);
 8000710:	2064      	movs	r0, #100	; 0x64
 8000712:	f000 fcd5 	bl	80010c0 <setTimer1>
			setTimer3(100);
 8000716:	2064      	movs	r0, #100	; 0x64
 8000718:	f000 fd0a 	bl	8001130 <setTimer3>
		if(isPress(1)){
 800071c:	2001      	movs	r0, #1
 800071e:	f7ff fd15 	bl	800014c <isPress>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d00a      	beq.n	800073e <editRun+0x82>
			redTemp = (redTemp >= 99) ? 1: redTemp + 1;
 8000728:	4b86      	ldr	r3, [pc, #536]	; (8000944 <editRun+0x288>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b62      	cmp	r3, #98	; 0x62
 800072e:	dc03      	bgt.n	8000738 <editRun+0x7c>
 8000730:	4b84      	ldr	r3, [pc, #528]	; (8000944 <editRun+0x288>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	3301      	adds	r3, #1
 8000736:	e000      	b.n	800073a <editRun+0x7e>
 8000738:	2301      	movs	r3, #1
 800073a:	4a82      	ldr	r2, [pc, #520]	; (8000944 <editRun+0x288>)
 800073c:	6013      	str	r3, [r2, #0]
		if(isPress(2)){
 800073e:	2002      	movs	r0, #2
 8000740:	f7ff fd04 	bl	800014c <isPress>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d003      	beq.n	8000752 <editRun+0x96>
			redCnt = redTemp;
 800074a:	4b7e      	ldr	r3, [pc, #504]	; (8000944 <editRun+0x288>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a80      	ldr	r2, [pc, #512]	; (8000950 <editRun+0x294>)
 8000750:	6013      	str	r3, [r2, #0]
		if(flagTimer1){
 8000752:	4b80      	ldr	r3, [pc, #512]	; (8000954 <editRun+0x298>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d00b      	beq.n	8000772 <editRun+0xb6>
			HAL_GPIO_TogglePin(R_H_GPIO_Port, R_H_Pin);
 800075a:	2102      	movs	r1, #2
 800075c:	487e      	ldr	r0, [pc, #504]	; (8000958 <editRun+0x29c>)
 800075e:	f001 f934 	bl	80019ca <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(R_V_GPIO_Port, R_V_Pin);
 8000762:	2110      	movs	r1, #16
 8000764:	487c      	ldr	r0, [pc, #496]	; (8000958 <editRun+0x29c>)
 8000766:	f001 f930 	bl	80019ca <HAL_GPIO_TogglePin>
			setTimer1(500);
 800076a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800076e:	f000 fca7 	bl	80010c0 <setTimer1>
		if(flagTimer3){
 8000772:	4b7a      	ldr	r3, [pc, #488]	; (800095c <editRun+0x2a0>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	f000 80db 	beq.w	8000932 <editRun+0x276>
			update7SEG(scan);
 800077c:	4b78      	ldr	r3, [pc, #480]	; (8000960 <editRun+0x2a4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fb75 	bl	8000e70 <update7SEG>
			scan = !scan;
 8000786:	4b76      	ldr	r3, [pc, #472]	; (8000960 <editRun+0x2a4>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	bf0c      	ite	eq
 800078e:	2301      	moveq	r3, #1
 8000790:	2300      	movne	r3, #0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	461a      	mov	r2, r3
 8000796:	4b72      	ldr	r3, [pc, #456]	; (8000960 <editRun+0x2a4>)
 8000798:	601a      	str	r2, [r3, #0]
			setTimer3(250);
 800079a:	20fa      	movs	r0, #250	; 0xfa
 800079c:	f000 fcc8 	bl	8001130 <setTimer3>
		break;
 80007a0:	e0c7      	b.n	8000932 <editRun+0x276>
		updateBuffer(yellowTemp, 3);
 80007a2:	4b6a      	ldr	r3, [pc, #424]	; (800094c <editRun+0x290>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2103      	movs	r1, #3
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 fbbf 	bl	8000f2c <updateBuffer>
		if(isPress(0)){
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff fccc 	bl	800014c <isPress>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d014      	beq.n	80007e4 <editRun+0x128>
			greenTemp = greenCnt;
 80007ba:	4b6a      	ldr	r3, [pc, #424]	; (8000964 <editRun+0x2a8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a6a      	ldr	r2, [pc, #424]	; (8000968 <editRun+0x2ac>)
 80007c0:	6013      	str	r3, [r2, #0]
			editState = EDIT_GREEN;
 80007c2:	4b5f      	ldr	r3, [pc, #380]	; (8000940 <editRun+0x284>)
 80007c4:	2208      	movs	r2, #8
 80007c6:	601a      	str	r2, [r3, #0]
			setHor(IDLE);
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	f000 f8dc 	bl	8000988 <setHor>
			setVer(IDLE);
 80007d0:	f04f 30ff 	mov.w	r0, #4294967295
 80007d4:	f000 f93e 	bl	8000a54 <setVer>
			setTimer1(100);
 80007d8:	2064      	movs	r0, #100	; 0x64
 80007da:	f000 fc71 	bl	80010c0 <setTimer1>
			setTimer3(100);
 80007de:	2064      	movs	r0, #100	; 0x64
 80007e0:	f000 fca6 	bl	8001130 <setTimer3>
		if(isPress(1)){
 80007e4:	2001      	movs	r0, #1
 80007e6:	f7ff fcb1 	bl	800014c <isPress>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d00a      	beq.n	8000806 <editRun+0x14a>
			yellowTemp = (yellowTemp >= 99) ? 1: yellowTemp + 1;
 80007f0:	4b56      	ldr	r3, [pc, #344]	; (800094c <editRun+0x290>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b62      	cmp	r3, #98	; 0x62
 80007f6:	dc03      	bgt.n	8000800 <editRun+0x144>
 80007f8:	4b54      	ldr	r3, [pc, #336]	; (800094c <editRun+0x290>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	e000      	b.n	8000802 <editRun+0x146>
 8000800:	2301      	movs	r3, #1
 8000802:	4a52      	ldr	r2, [pc, #328]	; (800094c <editRun+0x290>)
 8000804:	6013      	str	r3, [r2, #0]
		if(isPress(2)){
 8000806:	2002      	movs	r0, #2
 8000808:	f7ff fca0 	bl	800014c <isPress>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d003      	beq.n	800081a <editRun+0x15e>
			yellowCnt = yellowTemp;
 8000812:	4b4e      	ldr	r3, [pc, #312]	; (800094c <editRun+0x290>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a4c      	ldr	r2, [pc, #304]	; (8000948 <editRun+0x28c>)
 8000818:	6013      	str	r3, [r2, #0]
		if(flagTimer1){
 800081a:	4b4e      	ldr	r3, [pc, #312]	; (8000954 <editRun+0x298>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d00b      	beq.n	800083a <editRun+0x17e>
			HAL_GPIO_TogglePin(Y_H_GPIO_Port, Y_H_Pin);
 8000822:	2104      	movs	r1, #4
 8000824:	484c      	ldr	r0, [pc, #304]	; (8000958 <editRun+0x29c>)
 8000826:	f001 f8d0 	bl	80019ca <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Y_V_GPIO_Port, Y_V_Pin);
 800082a:	2120      	movs	r1, #32
 800082c:	484a      	ldr	r0, [pc, #296]	; (8000958 <editRun+0x29c>)
 800082e:	f001 f8cc 	bl	80019ca <HAL_GPIO_TogglePin>
			setTimer1(500);
 8000832:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000836:	f000 fc43 	bl	80010c0 <setTimer1>
		if(flagTimer3){
 800083a:	4b48      	ldr	r3, [pc, #288]	; (800095c <editRun+0x2a0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d079      	beq.n	8000936 <editRun+0x27a>
			update7SEG(scan);
 8000842:	4b47      	ldr	r3, [pc, #284]	; (8000960 <editRun+0x2a4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f000 fb12 	bl	8000e70 <update7SEG>
			scan = !scan;
 800084c:	4b44      	ldr	r3, [pc, #272]	; (8000960 <editRun+0x2a4>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	bf0c      	ite	eq
 8000854:	2301      	moveq	r3, #1
 8000856:	2300      	movne	r3, #0
 8000858:	b2db      	uxtb	r3, r3
 800085a:	461a      	mov	r2, r3
 800085c:	4b40      	ldr	r3, [pc, #256]	; (8000960 <editRun+0x2a4>)
 800085e:	601a      	str	r2, [r3, #0]
			setTimer3(250);
 8000860:	20fa      	movs	r0, #250	; 0xfa
 8000862:	f000 fc65 	bl	8001130 <setTimer3>
		break;
 8000866:	e066      	b.n	8000936 <editRun+0x27a>
		updateBuffer(greenTemp, 4);
 8000868:	4b3f      	ldr	r3, [pc, #252]	; (8000968 <editRun+0x2ac>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2104      	movs	r1, #4
 800086e:	4618      	mov	r0, r3
 8000870:	f000 fb5c 	bl	8000f2c <updateBuffer>
		if(isPress(0)){
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff fc69 	bl	800014c <isPress>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d014      	beq.n	80008aa <editRun+0x1ee>
			setHor(IDLE);
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	f000 f880 	bl	8000988 <setHor>
			setVer(IDLE);
 8000888:	f04f 30ff 	mov.w	r0, #4294967295
 800088c:	f000 f8e2 	bl	8000a54 <setVer>
			resetTimer();
 8000890:	f000 fd24 	bl	80012dc <resetTimer>
			editState = IDLE;
 8000894:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <editRun+0x284>)
 8000896:	f04f 32ff 	mov.w	r2, #4294967295
 800089a:	601a      	str	r2, [r3, #0]
			horState = INIT;
 800089c:	4b33      	ldr	r3, [pc, #204]	; (800096c <editRun+0x2b0>)
 800089e:	2201      	movs	r2, #1
 80008a0:	601a      	str	r2, [r3, #0]
			verState = INIT;
 80008a2:	4b33      	ldr	r3, [pc, #204]	; (8000970 <editRun+0x2b4>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	601a      	str	r2, [r3, #0]
			return;
 80008a8:	e048      	b.n	800093c <editRun+0x280>
		if(isPress(1)){
 80008aa:	2001      	movs	r0, #1
 80008ac:	f7ff fc4e 	bl	800014c <isPress>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d00a      	beq.n	80008cc <editRun+0x210>
			greenTemp = (greenTemp >= 99) ? 1: greenTemp + 1;
 80008b6:	4b2c      	ldr	r3, [pc, #176]	; (8000968 <editRun+0x2ac>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b62      	cmp	r3, #98	; 0x62
 80008bc:	dc03      	bgt.n	80008c6 <editRun+0x20a>
 80008be:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <editRun+0x2ac>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3301      	adds	r3, #1
 80008c4:	e000      	b.n	80008c8 <editRun+0x20c>
 80008c6:	2301      	movs	r3, #1
 80008c8:	4a27      	ldr	r2, [pc, #156]	; (8000968 <editRun+0x2ac>)
 80008ca:	6013      	str	r3, [r2, #0]
		if(isPress(2)){
 80008cc:	2002      	movs	r0, #2
 80008ce:	f7ff fc3d 	bl	800014c <isPress>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d003      	beq.n	80008e0 <editRun+0x224>
			greenCnt = greenTemp;
 80008d8:	4b23      	ldr	r3, [pc, #140]	; (8000968 <editRun+0x2ac>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a21      	ldr	r2, [pc, #132]	; (8000964 <editRun+0x2a8>)
 80008de:	6013      	str	r3, [r2, #0]
		if(flagTimer1){
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <editRun+0x298>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d00b      	beq.n	8000900 <editRun+0x244>
			HAL_GPIO_TogglePin(G_H_GPIO_Port, G_H_Pin);
 80008e8:	2108      	movs	r1, #8
 80008ea:	481b      	ldr	r0, [pc, #108]	; (8000958 <editRun+0x29c>)
 80008ec:	f001 f86d 	bl	80019ca <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(G_V_GPIO_Port, G_V_Pin);
 80008f0:	2140      	movs	r1, #64	; 0x40
 80008f2:	4819      	ldr	r0, [pc, #100]	; (8000958 <editRun+0x29c>)
 80008f4:	f001 f869 	bl	80019ca <HAL_GPIO_TogglePin>
			setTimer1(500);
 80008f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008fc:	f000 fbe0 	bl	80010c0 <setTimer1>
		if(flagTimer3){
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <editRun+0x2a0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d018      	beq.n	800093a <editRun+0x27e>
			update7SEG(scan);
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <editRun+0x2a4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f000 faaf 	bl	8000e70 <update7SEG>
			scan = !scan;
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <editRun+0x2a4>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	bf0c      	ite	eq
 800091a:	2301      	moveq	r3, #1
 800091c:	2300      	movne	r3, #0
 800091e:	b2db      	uxtb	r3, r3
 8000920:	461a      	mov	r2, r3
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <editRun+0x2a4>)
 8000924:	601a      	str	r2, [r3, #0]
			setTimer3(250);
 8000926:	20fa      	movs	r0, #250	; 0xfa
 8000928:	f000 fc02 	bl	8001130 <setTimer3>
		break;
 800092c:	e005      	b.n	800093a <editRun+0x27e>
		break;
 800092e:	bf00      	nop
 8000930:	e004      	b.n	800093c <editRun+0x280>
		break;
 8000932:	bf00      	nop
 8000934:	e002      	b.n	800093c <editRun+0x280>
		break;
 8000936:	bf00      	nop
 8000938:	e000      	b.n	800093c <editRun+0x280>
		break;
 800093a:	bf00      	nop
	}
}
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000044 	.word	0x20000044
 8000944:	20000054 	.word	0x20000054
 8000948:	2000004c 	.word	0x2000004c
 800094c:	20000058 	.word	0x20000058
 8000950:	20000048 	.word	0x20000048
 8000954:	20000200 	.word	0x20000200
 8000958:	40010800 	.word	0x40010800
 800095c:	20000208 	.word	0x20000208
 8000960:	200001d0 	.word	0x200001d0
 8000964:	20000050 	.word	0x20000050
 8000968:	2000005c 	.word	0x2000005c
 800096c:	2000003c 	.word	0x2000003c
 8000970:	20000040 	.word	0x20000040

08000974 <runAll>:

void runAll(){
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	horRun();
 8000978:	f7ff fcde 	bl	8000338 <horRun>
	verRun();
 800097c:	f7ff fdee 	bl	800055c <verRun>
	editRun();
 8000980:	f7ff fe9c 	bl	80006bc <editRun>
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}

08000988 <setHor>:
 *      Author: ADMIN
 */
#include "led.h"
int horLed = NONE, verLed = NONE;

void setHor(int color){
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	switch(color){
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b04      	cmp	r3, #4
 8000994:	d02f      	beq.n	80009f6 <setHor+0x6e>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b04      	cmp	r3, #4
 800099a:	dc3f      	bgt.n	8000a1c <setHor+0x94>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d003      	beq.n	80009aa <setHor+0x22>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b03      	cmp	r3, #3
 80009a6:	d013      	beq.n	80009d0 <setHor+0x48>
 80009a8:	e038      	b.n	8000a1c <setHor+0x94>
	case RED:
		HAL_GPIO_WritePin(R_H_GPIO_Port, R_H_Pin, ON);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2102      	movs	r1, #2
 80009ae:	4827      	ldr	r0, [pc, #156]	; (8000a4c <setHor+0xc4>)
 80009b0:	f000 fff3 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y_H_GPIO_Port, Y_H_Pin, OFF);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2104      	movs	r1, #4
 80009b8:	4824      	ldr	r0, [pc, #144]	; (8000a4c <setHor+0xc4>)
 80009ba:	f000 ffee 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, OFF);
 80009be:	2201      	movs	r2, #1
 80009c0:	2108      	movs	r1, #8
 80009c2:	4822      	ldr	r0, [pc, #136]	; (8000a4c <setHor+0xc4>)
 80009c4:	f000 ffe9 	bl	800199a <HAL_GPIO_WritePin>
		horLed = RED;
 80009c8:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <setHor+0xc8>)
 80009ca:	2202      	movs	r2, #2
 80009cc:	601a      	str	r2, [r3, #0]
		break;
 80009ce:	e038      	b.n	8000a42 <setHor+0xba>

	case YELLOW:
		HAL_GPIO_WritePin(R_H_GPIO_Port, R_H_Pin, OFF);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2102      	movs	r1, #2
 80009d4:	481d      	ldr	r0, [pc, #116]	; (8000a4c <setHor+0xc4>)
 80009d6:	f000 ffe0 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y_H_GPIO_Port, Y_H_Pin, ON);
 80009da:	2200      	movs	r2, #0
 80009dc:	2104      	movs	r1, #4
 80009de:	481b      	ldr	r0, [pc, #108]	; (8000a4c <setHor+0xc4>)
 80009e0:	f000 ffdb 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, OFF);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2108      	movs	r1, #8
 80009e8:	4818      	ldr	r0, [pc, #96]	; (8000a4c <setHor+0xc4>)
 80009ea:	f000 ffd6 	bl	800199a <HAL_GPIO_WritePin>
		horLed = YELLOW;
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <setHor+0xc8>)
 80009f0:	2203      	movs	r2, #3
 80009f2:	601a      	str	r2, [r3, #0]
		break;
 80009f4:	e025      	b.n	8000a42 <setHor+0xba>

	case GREEN:
		HAL_GPIO_WritePin(R_H_GPIO_Port, R_H_Pin, OFF);
 80009f6:	2201      	movs	r2, #1
 80009f8:	2102      	movs	r1, #2
 80009fa:	4814      	ldr	r0, [pc, #80]	; (8000a4c <setHor+0xc4>)
 80009fc:	f000 ffcd 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y_H_GPIO_Port, Y_H_Pin, OFF);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2104      	movs	r1, #4
 8000a04:	4811      	ldr	r0, [pc, #68]	; (8000a4c <setHor+0xc4>)
 8000a06:	f000 ffc8 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, ON);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	480f      	ldr	r0, [pc, #60]	; (8000a4c <setHor+0xc4>)
 8000a10:	f000 ffc3 	bl	800199a <HAL_GPIO_WritePin>
		horLed = GREEN;
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <setHor+0xc8>)
 8000a16:	2204      	movs	r2, #4
 8000a18:	601a      	str	r2, [r3, #0]
		break;
 8000a1a:	e012      	b.n	8000a42 <setHor+0xba>

	default:
		HAL_GPIO_WritePin(R_H_GPIO_Port, R_H_Pin, OFF);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2102      	movs	r1, #2
 8000a20:	480a      	ldr	r0, [pc, #40]	; (8000a4c <setHor+0xc4>)
 8000a22:	f000 ffba 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y_H_GPIO_Port, Y_H_Pin, OFF);
 8000a26:	2201      	movs	r2, #1
 8000a28:	2104      	movs	r1, #4
 8000a2a:	4808      	ldr	r0, [pc, #32]	; (8000a4c <setHor+0xc4>)
 8000a2c:	f000 ffb5 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, OFF);
 8000a30:	2201      	movs	r2, #1
 8000a32:	2108      	movs	r1, #8
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <setHor+0xc4>)
 8000a36:	f000 ffb0 	bl	800199a <HAL_GPIO_WritePin>
		horLed = NONE;
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <setHor+0xc8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
		break;
 8000a40:	bf00      	nop
	}
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40010800 	.word	0x40010800
 8000a50:	200001d4 	.word	0x200001d4

08000a54 <setVer>:

void setVer(int color){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	switch(color){
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	d02f      	beq.n	8000ac2 <setVer+0x6e>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b04      	cmp	r3, #4
 8000a66:	dc3f      	bgt.n	8000ae8 <setVer+0x94>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d003      	beq.n	8000a76 <setVer+0x22>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b03      	cmp	r3, #3
 8000a72:	d013      	beq.n	8000a9c <setVer+0x48>
 8000a74:	e038      	b.n	8000ae8 <setVer+0x94>
	case RED:
		HAL_GPIO_WritePin(R_V_GPIO_Port, R_V_Pin, ON);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2110      	movs	r1, #16
 8000a7a:	4827      	ldr	r0, [pc, #156]	; (8000b18 <setVer+0xc4>)
 8000a7c:	f000 ff8d 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y_V_GPIO_Port, Y_V_Pin, OFF);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2120      	movs	r1, #32
 8000a84:	4824      	ldr	r0, [pc, #144]	; (8000b18 <setVer+0xc4>)
 8000a86:	f000 ff88 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_V_GPIO_Port, G_V_Pin, OFF);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2140      	movs	r1, #64	; 0x40
 8000a8e:	4822      	ldr	r0, [pc, #136]	; (8000b18 <setVer+0xc4>)
 8000a90:	f000 ff83 	bl	800199a <HAL_GPIO_WritePin>
		verLed = RED;
 8000a94:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <setVer+0xc8>)
 8000a96:	2202      	movs	r2, #2
 8000a98:	601a      	str	r2, [r3, #0]
		break;
 8000a9a:	e038      	b.n	8000b0e <setVer+0xba>

	case YELLOW:
		HAL_GPIO_WritePin(R_V_GPIO_Port, R_V_Pin, OFF);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2110      	movs	r1, #16
 8000aa0:	481d      	ldr	r0, [pc, #116]	; (8000b18 <setVer+0xc4>)
 8000aa2:	f000 ff7a 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y_V_GPIO_Port, Y_V_Pin, ON);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2120      	movs	r1, #32
 8000aaa:	481b      	ldr	r0, [pc, #108]	; (8000b18 <setVer+0xc4>)
 8000aac:	f000 ff75 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_V_GPIO_Port, G_V_Pin, OFF);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2140      	movs	r1, #64	; 0x40
 8000ab4:	4818      	ldr	r0, [pc, #96]	; (8000b18 <setVer+0xc4>)
 8000ab6:	f000 ff70 	bl	800199a <HAL_GPIO_WritePin>
		verLed = YELLOW;
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <setVer+0xc8>)
 8000abc:	2203      	movs	r2, #3
 8000abe:	601a      	str	r2, [r3, #0]
		break;
 8000ac0:	e025      	b.n	8000b0e <setVer+0xba>

	case GREEN:
			HAL_GPIO_WritePin(R_V_GPIO_Port, R_V_Pin, OFF);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2110      	movs	r1, #16
 8000ac6:	4814      	ldr	r0, [pc, #80]	; (8000b18 <setVer+0xc4>)
 8000ac8:	f000 ff67 	bl	800199a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y_V_GPIO_Port, Y_V_Pin, OFF);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2120      	movs	r1, #32
 8000ad0:	4811      	ldr	r0, [pc, #68]	; (8000b18 <setVer+0xc4>)
 8000ad2:	f000 ff62 	bl	800199a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_V_GPIO_Port, G_V_Pin, ON);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2140      	movs	r1, #64	; 0x40
 8000ada:	480f      	ldr	r0, [pc, #60]	; (8000b18 <setVer+0xc4>)
 8000adc:	f000 ff5d 	bl	800199a <HAL_GPIO_WritePin>
			verLed = GREEN;
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <setVer+0xc8>)
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	601a      	str	r2, [r3, #0]
			break;
 8000ae6:	e012      	b.n	8000b0e <setVer+0xba>

	default:
		HAL_GPIO_WritePin(R_V_GPIO_Port, R_V_Pin, OFF);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2110      	movs	r1, #16
 8000aec:	480a      	ldr	r0, [pc, #40]	; (8000b18 <setVer+0xc4>)
 8000aee:	f000 ff54 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y_V_GPIO_Port, Y_V_Pin, OFF);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2120      	movs	r1, #32
 8000af6:	4808      	ldr	r0, [pc, #32]	; (8000b18 <setVer+0xc4>)
 8000af8:	f000 ff4f 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_V_GPIO_Port, G_V_Pin, OFF);
 8000afc:	2201      	movs	r2, #1
 8000afe:	2140      	movs	r1, #64	; 0x40
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <setVer+0xc4>)
 8000b02:	f000 ff4a 	bl	800199a <HAL_GPIO_WritePin>
		verLed = NONE;
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <setVer+0xc8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
		break;
 8000b0c:	bf00      	nop
	}
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40010800 	.word	0x40010800
 8000b1c:	200001d8 	.word	0x200001d8

08000b20 <HAL_TIM_PeriodElapsedCallback>:

/**
  * @brief  The application entry point.
  * @retval int
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	btRead();
 8000b28:	f7ff fb2a 	bl	8000180 <btRead>
	runTimer1();
 8000b2c:	f000 fb54 	bl	80011d8 <runTimer1>
	runTimer2();
 8000b30:	f000 fb6c 	bl	800120c <runTimer2>
	runTimer3();
 8000b34:	f000 fb84 	bl	8001240 <runTimer3>
	runTimer4();
 8000b38:	f000 fb9c 	bl	8001274 <runTimer4>
	runTimer5();
 8000b3c:	f000 fbb4 	bl	80012a8 <runTimer5>
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <main>:

int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4c:	f000 fc24 	bl	8001398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b50:	f000 f80c 	bl	8000b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b54:	f000 f892 	bl	8000c7c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b58:	f000 f844 	bl	8000be4 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <main+0x20>)
 8000b5e:	f001 fb79 	bl	8002254 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	runAll();
 8000b62:	f7ff ff07 	bl	8000974 <runAll>
 8000b66:	e7fc      	b.n	8000b62 <main+0x1a>
 8000b68:	20000214 	.word	0x20000214

08000b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b090      	sub	sp, #64	; 0x40
 8000b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b72:	f107 0318 	add.w	r3, r7, #24
 8000b76:	2228      	movs	r2, #40	; 0x28
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 ff1a 	bl	80029b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b92:	2301      	movs	r3, #1
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b96:	2310      	movs	r3, #16
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9e:	f107 0318 	add.w	r3, r7, #24
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 ff2a 	bl	80019fc <HAL_RCC_OscConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bae:	f000 f8c9 	bl	8000d44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f001 f996 	bl	8001efc <HAL_RCC_ClockConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bd6:	f000 f8b5 	bl	8000d44 <Error_Handler>
  }
}
 8000bda:	bf00      	nop
 8000bdc:	3740      	adds	r7, #64	; 0x40
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <MX_TIM2_Init+0x94>)
 8000c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_TIM2_Init+0x94>)
 8000c0a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <MX_TIM2_Init+0x94>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <MX_TIM2_Init+0x94>)
 8000c18:	2209      	movs	r2, #9
 8000c1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <MX_TIM2_Init+0x94>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <MX_TIM2_Init+0x94>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c28:	4813      	ldr	r0, [pc, #76]	; (8000c78 <MX_TIM2_Init+0x94>)
 8000c2a:	f001 fac3 	bl	80021b4 <HAL_TIM_Base_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c34:	f000 f886 	bl	8000d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	4619      	mov	r1, r3
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <MX_TIM2_Init+0x94>)
 8000c46:	f001 fc41 	bl	80024cc <HAL_TIM_ConfigClockSource>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c50:	f000 f878 	bl	8000d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c54:	2300      	movs	r3, #0
 8000c56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_TIM2_Init+0x94>)
 8000c62:	f001 fe19 	bl	8002898 <HAL_TIMEx_MasterConfigSynchronization>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c6c:	f000 f86a 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000214 	.word	0x20000214

08000c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <MX_GPIO_Init+0xbc>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a28      	ldr	r2, [pc, #160]	; (8000d38 <MX_GPIO_Init+0xbc>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <MX_GPIO_Init+0xbc>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca8:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <MX_GPIO_Init+0xbc>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a22      	ldr	r2, [pc, #136]	; (8000d38 <MX_GPIO_Init+0xbc>)
 8000cae:	f043 0308 	orr.w	r3, r3, #8
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <MX_GPIO_Init+0xbc>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0308 	and.w	r3, r3, #8
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R_H_Pin|Y_H_Pin|G_H_Pin|R_V_Pin
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8000cc6:	481d      	ldr	r0, [pc, #116]	; (8000d3c <MX_GPIO_Init+0xc0>)
 8000cc8:	f000 fe67 	bl	800199a <HAL_GPIO_WritePin>
                          |Y_V_Pin|G_V_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_H_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000cd2:	481b      	ldr	r0, [pc, #108]	; (8000d40 <MX_GPIO_Init+0xc4>)
 8000cd4:	f000 fe61 	bl	800199a <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : R_H_Pin Y_H_Pin G_H_Pin R_V_Pin
                           Y_V_Pin G_V_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = R_H_Pin|Y_H_Pin|G_H_Pin|R_V_Pin
 8000cd8:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8000cdc:	60bb      	str	r3, [r7, #8]
                          |Y_V_Pin|G_V_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4812      	ldr	r0, [pc, #72]	; (8000d3c <MX_GPIO_Init+0xc0>)
 8000cf2:	f000 fcc1 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_H_Pin PB1 PB2 PB10
                           PB11 PB12 PB13 PB3
                           PB4 PB5 PB6 A_V_Pin
                           PB8 PB9 */
  GPIO_InitStruct.Pin = A_H_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000cf6:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000cfa:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|A_V_Pin
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2302      	movs	r3, #2
 8000d06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	f107 0308 	add.w	r3, r7, #8
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480c      	ldr	r0, [pc, #48]	; (8000d40 <MX_GPIO_Init+0xc4>)
 8000d10:	f000 fcb2 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT1_Pin BT2_Pin BT3_Pin */
  GPIO_InitStruct.Pin = BT1_Pin|BT2_Pin|BT3_Pin;
 8000d14:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0308 	add.w	r3, r7, #8
 8000d26:	4619      	mov	r1, r3
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_GPIO_Init+0xc0>)
 8000d2a:	f000 fca5 	bl	8001678 <HAL_GPIO_Init>

}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010800 	.word	0x40010800
 8000d40:	40010c00 	.word	0x40010c00

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x8>
	...

08000d50 <set7Hor>:
	{0, 0, 0, 0, 0, 0, 0}, //8
	{0, 0, 0, 0, 1, 0, 0}, //9
	{1, 1, 1, 1, 1, 1, 1} //off all
};

void set7Hor(int num){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	if(num < 0 || num > 9){
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db02      	blt.n	8000d64 <set7Hor+0x14>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b09      	cmp	r3, #9
 8000d62:	dd18      	ble.n	8000d96 <set7Hor+0x46>
		for(int i = 0; i < 7; i++){
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	e011      	b.n	8000d8e <set7Hor+0x3e>
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin << i, arr[10][i]);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	b299      	uxth	r1, r3
 8000d74:	4a18      	ldr	r2, [pc, #96]	; (8000dd8 <set7Hor+0x88>)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	3346      	adds	r3, #70	; 0x46
 8000d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	461a      	mov	r2, r3
 8000d82:	4816      	ldr	r0, [pc, #88]	; (8000ddc <set7Hor+0x8c>)
 8000d84:	f000 fe09 	bl	800199a <HAL_GPIO_WritePin>
		for(int i = 0; i < 7; i++){
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2b06      	cmp	r3, #6
 8000d92:	ddea      	ble.n	8000d6a <set7Hor+0x1a>
 8000d94:	e01c      	b.n	8000dd0 <set7Hor+0x80>
		}
	}else{
		for(int i = 0; i < 7; i++){
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	e015      	b.n	8000dc8 <set7Hor+0x78>
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin << i, arr[num][i]);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	b299      	uxth	r1, r3
 8000da6:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <set7Hor+0x88>)
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	4613      	mov	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	1a9b      	subs	r3, r3, r2
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	4413      	add	r3, r2
 8000db4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4807      	ldr	r0, [pc, #28]	; (8000ddc <set7Hor+0x8c>)
 8000dbe:	f000 fdec 	bl	800199a <HAL_GPIO_WritePin>
		for(int i = 0; i < 7; i++){
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	dde6      	ble.n	8000d9c <set7Hor+0x4c>
		}
	}
}
 8000dce:	bf00      	nop
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000060 	.word	0x20000060
 8000ddc:	40010c00 	.word	0x40010c00

08000de0 <set7Ver>:

void set7Ver(int num){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	if(num < 0 || num > 9){
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	db02      	blt.n	8000df4 <set7Ver+0x14>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b09      	cmp	r3, #9
 8000df2:	dd18      	ble.n	8000e26 <set7Ver+0x46>
		for(int i = 0; i < 7; i++){
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	e011      	b.n	8000e1e <set7Ver+0x3e>
			HAL_GPIO_WritePin(A_V_GPIO_Port, A_V_Pin << i, arr[10][i]);
 8000dfa:	2280      	movs	r2, #128	; 0x80
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	b299      	uxth	r1, r3
 8000e04:	4a18      	ldr	r2, [pc, #96]	; (8000e68 <set7Ver+0x88>)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3346      	adds	r3, #70	; 0x46
 8000e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	461a      	mov	r2, r3
 8000e12:	4816      	ldr	r0, [pc, #88]	; (8000e6c <set7Ver+0x8c>)
 8000e14:	f000 fdc1 	bl	800199a <HAL_GPIO_WritePin>
		for(int i = 0; i < 7; i++){
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2b06      	cmp	r3, #6
 8000e22:	ddea      	ble.n	8000dfa <set7Ver+0x1a>
 8000e24:	e01c      	b.n	8000e60 <set7Ver+0x80>
		}
	}else{
		for(int i = 0; i < 7; i++){
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	e015      	b.n	8000e58 <set7Ver+0x78>
			HAL_GPIO_WritePin(A_V_GPIO_Port, A_V_Pin << i, arr[num][i]);
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	b299      	uxth	r1, r3
 8000e36:	480c      	ldr	r0, [pc, #48]	; (8000e68 <set7Ver+0x88>)
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	1a9b      	subs	r3, r3, r2
 8000e40:	68ba      	ldr	r2, [r7, #8]
 8000e42:	4413      	add	r3, r2
 8000e44:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4807      	ldr	r0, [pc, #28]	; (8000e6c <set7Ver+0x8c>)
 8000e4e:	f000 fda4 	bl	800199a <HAL_GPIO_WritePin>
		for(int i = 0; i < 7; i++){
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	3301      	adds	r3, #1
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	dde6      	ble.n	8000e2c <set7Ver+0x4c>
		}
	}
}
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000060 	.word	0x20000060
 8000e6c:	40010c00 	.word	0x40010c00

08000e70 <update7SEG>:

void update7SEG(int idx){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	idx = idx % 2;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	bfb8      	it	lt
 8000e82:	425b      	neglt	r3, r3
 8000e84:	607b      	str	r3, [r7, #4]

	switch (idx){
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <update7SEG+0x24>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d022      	beq.n	8000ed8 <update7SEG+0x68>
			set7Ver(led_buffer[3]);
			break;

		default:
			//do nothing
			break;
 8000e92:	e043      	b.n	8000f1c <update7SEG+0xac>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2180      	movs	r1, #128	; 0x80
 8000e98:	4822      	ldr	r0, [pc, #136]	; (8000f24 <update7SEG+0xb4>)
 8000e9a:	f000 fd7e 	bl	800199a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea4:	481f      	ldr	r0, [pc, #124]	; (8000f24 <update7SEG+0xb4>)
 8000ea6:	f000 fd78 	bl	800199a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb0:	481c      	ldr	r0, [pc, #112]	; (8000f24 <update7SEG+0xb4>)
 8000eb2:	f000 fd72 	bl	800199a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ebc:	4819      	ldr	r0, [pc, #100]	; (8000f24 <update7SEG+0xb4>)
 8000ebe:	f000 fd6c 	bl	800199a <HAL_GPIO_WritePin>
			set7Hor(led_buffer[0]);
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <update7SEG+0xb8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff42 	bl	8000d50 <set7Hor>
			set7Ver(led_buffer[2]);
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <update7SEG+0xb8>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff85 	bl	8000de0 <set7Ver>
			break;
 8000ed6:	e021      	b.n	8000f1c <update7SEG+0xac>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2180      	movs	r1, #128	; 0x80
 8000edc:	4811      	ldr	r0, [pc, #68]	; (8000f24 <update7SEG+0xb4>)
 8000ede:	f000 fd5c 	bl	800199a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee8:	480e      	ldr	r0, [pc, #56]	; (8000f24 <update7SEG+0xb4>)
 8000eea:	f000 fd56 	bl	800199a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef4:	480b      	ldr	r0, [pc, #44]	; (8000f24 <update7SEG+0xb4>)
 8000ef6:	f000 fd50 	bl	800199a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f00:	4808      	ldr	r0, [pc, #32]	; (8000f24 <update7SEG+0xb4>)
 8000f02:	f000 fd4a 	bl	800199a <HAL_GPIO_WritePin>
			set7Hor(led_buffer[1]);
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <update7SEG+0xb8>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff20 	bl	8000d50 <set7Hor>
			set7Ver(led_buffer[3]);
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <update7SEG+0xb8>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff63 	bl	8000de0 <set7Ver>
			break;
 8000f1a:	bf00      	nop
	}
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40010800 	.word	0x40010800
 8000f28:	200001dc 	.word	0x200001dc

08000f2c <updateBuffer>:

void updateBuffer(int seg1, int seg2){
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
	led_buffer[0] = seg1 / 10;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a18      	ldr	r2, [pc, #96]	; (8000f9c <updateBuffer+0x70>)
 8000f3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f3e:	1092      	asrs	r2, r2, #2
 8000f40:	17db      	asrs	r3, r3, #31
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	4a16      	ldr	r2, [pc, #88]	; (8000fa0 <updateBuffer+0x74>)
 8000f46:	6013      	str	r3, [r2, #0]
	led_buffer[1] = seg1 % 10;
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <updateBuffer+0x70>)
 8000f4c:	fb83 2301 	smull	r2, r3, r3, r1
 8000f50:	109a      	asrs	r2, r3, #2
 8000f52:	17cb      	asrs	r3, r1, #31
 8000f54:	1ad2      	subs	r2, r2, r3
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	1aca      	subs	r2, r1, r3
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <updateBuffer+0x74>)
 8000f62:	605a      	str	r2, [r3, #4]
	led_buffer[2] = seg2 / 10;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <updateBuffer+0x70>)
 8000f68:	fb82 1203 	smull	r1, r2, r2, r3
 8000f6c:	1092      	asrs	r2, r2, #2
 8000f6e:	17db      	asrs	r3, r3, #31
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <updateBuffer+0x74>)
 8000f74:	6093      	str	r3, [r2, #8]
	led_buffer[3] = seg2 % 10;
 8000f76:	6839      	ldr	r1, [r7, #0]
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <updateBuffer+0x70>)
 8000f7a:	fb83 2301 	smull	r2, r3, r3, r1
 8000f7e:	109a      	asrs	r2, r3, #2
 8000f80:	17cb      	asrs	r3, r1, #31
 8000f82:	1ad2      	subs	r2, r2, r3
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	1aca      	subs	r2, r1, r3
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <updateBuffer+0x74>)
 8000f90:	60da      	str	r2, [r3, #12]
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	66666667 	.word	0x66666667
 8000fa0:	200001dc 	.word	0x200001dc

08000fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_MspInit+0x5c>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	4a14      	ldr	r2, [pc, #80]	; (8001000 <HAL_MspInit+0x5c>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6193      	str	r3, [r2, #24]
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_MspInit+0x5c>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <HAL_MspInit+0x5c>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <HAL_MspInit+0x5c>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	61d3      	str	r3, [r2, #28]
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <HAL_MspInit+0x5c>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_MspInit+0x60>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_MspInit+0x60>)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	40021000 	.word	0x40021000
 8001004:	40010000 	.word	0x40010000

08001008 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001018:	d113      	bne.n	8001042 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_TIM_Base_MspInit+0x44>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <HAL_TIM_Base_MspInit+0x44>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_TIM_Base_MspInit+0x44>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	201c      	movs	r0, #28
 8001038:	f000 fae7 	bl	800160a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800103c:	201c      	movs	r0, #28
 800103e:	f000 fb00 	bl	8001642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40021000 	.word	0x40021000

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <NMI_Handler+0x4>

08001056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr

0800107a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr

08001086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr

08001092 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001096:	f000 f9c5 	bl	8001424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <TIM2_IRQHandler+0x10>)
 80010a6:	f001 f921 	bl	80022ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000214 	.word	0x20000214

080010b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <setTimer1>:
#include "timer.h"

int cntTimer1 = 0, cntTimer2 = 0, cntTimer3 = 0, cntTimer4 = 0, cntTimer5 = 0;
int flagTimer1 = 0, flagTimer2 = 0, flagTimer3 = 0, flagTimer4 = 0, flagTimer5 = 0;

void setTimer1(int duration){
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	cntTimer1 = duration/CYCLE;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a08      	ldr	r2, [pc, #32]	; (80010ec <setTimer1+0x2c>)
 80010cc:	fb82 1203 	smull	r1, r2, r2, r3
 80010d0:	1092      	asrs	r2, r2, #2
 80010d2:	17db      	asrs	r3, r3, #31
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <setTimer1+0x30>)
 80010d8:	6013      	str	r3, [r2, #0]
	flagTimer1 = 0;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <setTimer1+0x34>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	66666667 	.word	0x66666667
 80010f0:	200001ec 	.word	0x200001ec
 80010f4:	20000200 	.word	0x20000200

080010f8 <setTimer2>:

void setTimer2(int duration){
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	cntTimer2 = duration/CYCLE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a08      	ldr	r2, [pc, #32]	; (8001124 <setTimer2+0x2c>)
 8001104:	fb82 1203 	smull	r1, r2, r2, r3
 8001108:	1092      	asrs	r2, r2, #2
 800110a:	17db      	asrs	r3, r3, #31
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	4a06      	ldr	r2, [pc, #24]	; (8001128 <setTimer2+0x30>)
 8001110:	6013      	str	r3, [r2, #0]
	flagTimer2 = 0;
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <setTimer2+0x34>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	66666667 	.word	0x66666667
 8001128:	200001f0 	.word	0x200001f0
 800112c:	20000204 	.word	0x20000204

08001130 <setTimer3>:

void setTimer3(int duration){
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	cntTimer3 = duration/CYCLE;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a08      	ldr	r2, [pc, #32]	; (800115c <setTimer3+0x2c>)
 800113c:	fb82 1203 	smull	r1, r2, r2, r3
 8001140:	1092      	asrs	r2, r2, #2
 8001142:	17db      	asrs	r3, r3, #31
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	4a06      	ldr	r2, [pc, #24]	; (8001160 <setTimer3+0x30>)
 8001148:	6013      	str	r3, [r2, #0]
	flagTimer3 = 0;
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <setTimer3+0x34>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	66666667 	.word	0x66666667
 8001160:	200001f4 	.word	0x200001f4
 8001164:	20000208 	.word	0x20000208

08001168 <setTimer4>:

void setTimer4(int duration){
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	cntTimer4 = duration/CYCLE;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a08      	ldr	r2, [pc, #32]	; (8001194 <setTimer4+0x2c>)
 8001174:	fb82 1203 	smull	r1, r2, r2, r3
 8001178:	1092      	asrs	r2, r2, #2
 800117a:	17db      	asrs	r3, r3, #31
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	4a06      	ldr	r2, [pc, #24]	; (8001198 <setTimer4+0x30>)
 8001180:	6013      	str	r3, [r2, #0]
	flagTimer4 = 0;
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <setTimer4+0x34>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	66666667 	.word	0x66666667
 8001198:	200001f8 	.word	0x200001f8
 800119c:	2000020c 	.word	0x2000020c

080011a0 <setTimer5>:

void setTimer5(int duration){
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	cntTimer5 = duration/CYCLE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <setTimer5+0x2c>)
 80011ac:	fb82 1203 	smull	r1, r2, r2, r3
 80011b0:	1092      	asrs	r2, r2, #2
 80011b2:	17db      	asrs	r3, r3, #31
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <setTimer5+0x30>)
 80011b8:	6013      	str	r3, [r2, #0]
	flagTimer5 = 0;
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <setTimer5+0x34>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	66666667 	.word	0x66666667
 80011d0:	200001fc 	.word	0x200001fc
 80011d4:	20000210 	.word	0x20000210

080011d8 <runTimer1>:

void runTimer1(){
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
	if(cntTimer1 > 0){
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <runTimer1+0x2c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	dd0b      	ble.n	80011fc <runTimer1+0x24>
		cntTimer1--;
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <runTimer1+0x2c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	4a06      	ldr	r2, [pc, #24]	; (8001204 <runTimer1+0x2c>)
 80011ec:	6013      	str	r3, [r2, #0]
		if(cntTimer1 == 0) flagTimer1 = 1;
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <runTimer1+0x2c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <runTimer1+0x24>
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <runTimer1+0x30>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
	}
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	200001ec 	.word	0x200001ec
 8001208:	20000200 	.word	0x20000200

0800120c <runTimer2>:

void runTimer2(){
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	if(cntTimer2 > 0){
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <runTimer2+0x2c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	dd0b      	ble.n	8001230 <runTimer2+0x24>
		cntTimer2--;
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <runTimer2+0x2c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	3b01      	subs	r3, #1
 800121e:	4a06      	ldr	r2, [pc, #24]	; (8001238 <runTimer2+0x2c>)
 8001220:	6013      	str	r3, [r2, #0]
		if(cntTimer2 == 0) flagTimer2 = 1;
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <runTimer2+0x2c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d102      	bne.n	8001230 <runTimer2+0x24>
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <runTimer2+0x30>)
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]
	}
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	200001f0 	.word	0x200001f0
 800123c:	20000204 	.word	0x20000204

08001240 <runTimer3>:

void runTimer3(){
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
	if(cntTimer3 > 0){
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <runTimer3+0x2c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	dd0b      	ble.n	8001264 <runTimer3+0x24>
		cntTimer3--;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <runTimer3+0x2c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	3b01      	subs	r3, #1
 8001252:	4a06      	ldr	r2, [pc, #24]	; (800126c <runTimer3+0x2c>)
 8001254:	6013      	str	r3, [r2, #0]
		if(cntTimer3 == 0) flagTimer3 = 1;
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <runTimer3+0x2c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <runTimer3+0x24>
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <runTimer3+0x30>)
 8001260:	2201      	movs	r2, #1
 8001262:	601a      	str	r2, [r3, #0]
	}
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	200001f4 	.word	0x200001f4
 8001270:	20000208 	.word	0x20000208

08001274 <runTimer4>:

void runTimer4(){
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
	if(cntTimer4 > 0){
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <runTimer4+0x2c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	dd0b      	ble.n	8001298 <runTimer4+0x24>
		cntTimer4--;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <runTimer4+0x2c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3b01      	subs	r3, #1
 8001286:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <runTimer4+0x2c>)
 8001288:	6013      	str	r3, [r2, #0]
		if(cntTimer4 == 0) flagTimer4 = 1;
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <runTimer4+0x2c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d102      	bne.n	8001298 <runTimer4+0x24>
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <runTimer4+0x30>)
 8001294:	2201      	movs	r2, #1
 8001296:	601a      	str	r2, [r3, #0]
	}
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	200001f8 	.word	0x200001f8
 80012a4:	2000020c 	.word	0x2000020c

080012a8 <runTimer5>:

void runTimer5(){
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
	if(cntTimer5 > 0){
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <runTimer5+0x2c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	dd0b      	ble.n	80012cc <runTimer5+0x24>
		cntTimer5--;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <runTimer5+0x2c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <runTimer5+0x2c>)
 80012bc:	6013      	str	r3, [r2, #0]
		if(cntTimer5 == 0) flagTimer5 = 1;
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <runTimer5+0x2c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d102      	bne.n	80012cc <runTimer5+0x24>
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <runTimer5+0x30>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	601a      	str	r2, [r3, #0]
	}
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	200001fc 	.word	0x200001fc
 80012d8:	20000210 	.word	0x20000210

080012dc <resetTimer>:

void resetTimer(){
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
	cntTimer1 = 0;
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <resetTimer+0x48>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
	cntTimer2 = 0;
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <resetTimer+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
	cntTimer3 = 0;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <resetTimer+0x50>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
	cntTimer4 = 0;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <resetTimer+0x54>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
	cntTimer5 = 0;
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <resetTimer+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]

	flagTimer1 = 0;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <resetTimer+0x5c>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
	flagTimer2 = 0;
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <resetTimer+0x60>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
	flagTimer3 = 0;
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <resetTimer+0x64>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
	flagTimer4 = 0;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <resetTimer+0x68>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
	flagTimer5 = 0;
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <resetTimer+0x6c>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	200001ec 	.word	0x200001ec
 8001328:	200001f0 	.word	0x200001f0
 800132c:	200001f4 	.word	0x200001f4
 8001330:	200001f8 	.word	0x200001f8
 8001334:	200001fc 	.word	0x200001fc
 8001338:	20000200 	.word	0x20000200
 800133c:	20000204 	.word	0x20000204
 8001340:	20000208 	.word	0x20000208
 8001344:	2000020c 	.word	0x2000020c
 8001348:	20000210 	.word	0x20000210

0800134c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800134c:	f7ff feb2 	bl	80010b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001350:	480b      	ldr	r0, [pc, #44]	; (8001380 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001352:	490c      	ldr	r1, [pc, #48]	; (8001384 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001354:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001358:	e002      	b.n	8001360 <LoopCopyDataInit>

0800135a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800135c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135e:	3304      	adds	r3, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001364:	d3f9      	bcc.n	800135a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001366:	4a09      	ldr	r2, [pc, #36]	; (800138c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001368:	4c09      	ldr	r4, [pc, #36]	; (8001390 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800136c:	e001      	b.n	8001372 <LoopFillZerobss>

0800136e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001370:	3204      	adds	r2, #4

08001372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001374:	d3fb      	bcc.n	800136e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001376:	f001 faf9 	bl	800296c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800137a:	f7ff fbe5 	bl	8000b48 <main>
  bx lr
 800137e:	4770      	bx	lr
  ldr r0, =_sdata
 8001380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001384:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8001388:	08002a08 	.word	0x08002a08
  ldr r2, =_sbss
 800138c:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8001390:	20000260 	.word	0x20000260

08001394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC1_2_IRQHandler>
	...

08001398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_Init+0x28>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <HAL_Init+0x28>)
 80013a2:	f043 0310 	orr.w	r3, r3, #16
 80013a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f923 	bl	80015f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ae:	200f      	movs	r0, #15
 80013b0:	f000 f808 	bl	80013c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b4:	f7ff fdf6 	bl	8000fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40022000 	.word	0x40022000

080013c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_InitTick+0x54>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x58>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013da:	fbb3 f3f1 	udiv	r3, r3, r1
 80013de:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f93b 	bl	800165e <HAL_SYSTICK_Config>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00e      	b.n	8001410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b0f      	cmp	r3, #15
 80013f6:	d80a      	bhi.n	800140e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f8:	2200      	movs	r2, #0
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f000 f903 	bl	800160a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001404:	4a06      	ldr	r2, [pc, #24]	; (8001420 <HAL_InitTick+0x5c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	e000      	b.n	8001410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000194 	.word	0x20000194
 800141c:	2000019c 	.word	0x2000019c
 8001420:	20000198 	.word	0x20000198

08001424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_IncTick+0x1c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_IncTick+0x20>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4413      	add	r3, r2
 8001434:	4a03      	ldr	r2, [pc, #12]	; (8001444 <HAL_IncTick+0x20>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	2000019c 	.word	0x2000019c
 8001444:	2000025c 	.word	0x2000025c

08001448 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b02      	ldr	r3, [pc, #8]	; (8001458 <HAL_GetTick+0x10>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	2000025c 	.word	0x2000025c

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	db0b      	blt.n	80014ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	f003 021f 	and.w	r2, r3, #31
 80014d8:	4906      	ldr	r1, [pc, #24]	; (80014f4 <__NVIC_EnableIRQ+0x34>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	2001      	movs	r0, #1
 80014e2:	fa00 f202 	lsl.w	r2, r0, r2
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100

080014f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	2b00      	cmp	r3, #0
 800150a:	db0a      	blt.n	8001522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	490c      	ldr	r1, [pc, #48]	; (8001544 <__NVIC_SetPriority+0x4c>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	0112      	lsls	r2, r2, #4
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	440b      	add	r3, r1
 800151c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001520:	e00a      	b.n	8001538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4908      	ldr	r1, [pc, #32]	; (8001548 <__NVIC_SetPriority+0x50>)
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	3b04      	subs	r3, #4
 8001530:	0112      	lsls	r2, r2, #4
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	440b      	add	r3, r1
 8001536:	761a      	strb	r2, [r3, #24]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e100 	.word	0xe000e100
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f1c3 0307 	rsb	r3, r3, #7
 8001566:	2b04      	cmp	r3, #4
 8001568:	bf28      	it	cs
 800156a:	2304      	movcs	r3, #4
 800156c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3304      	adds	r3, #4
 8001572:	2b06      	cmp	r3, #6
 8001574:	d902      	bls.n	800157c <NVIC_EncodePriority+0x30>
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3b03      	subs	r3, #3
 800157a:	e000      	b.n	800157e <NVIC_EncodePriority+0x32>
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	f04f 32ff 	mov.w	r2, #4294967295
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	401a      	ands	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001594:	f04f 31ff 	mov.w	r1, #4294967295
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	43d9      	mvns	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	4313      	orrs	r3, r2
         );
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3724      	adds	r7, #36	; 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c0:	d301      	bcc.n	80015c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00f      	b.n	80015e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <SysTick_Config+0x40>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ce:	210f      	movs	r1, #15
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f7ff ff90 	bl	80014f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <SysTick_Config+0x40>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <SysTick_Config+0x40>)
 80015e0:	2207      	movs	r2, #7
 80015e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	e000e010 	.word	0xe000e010

080015f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff2d 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800161c:	f7ff ff42 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 8001620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	6978      	ldr	r0, [r7, #20]
 8001628:	f7ff ff90 	bl	800154c <NVIC_EncodePriority>
 800162c:	4602      	mov	r2, r0
 800162e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001632:	4611      	mov	r1, r2
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff5f 	bl	80014f8 <__NVIC_SetPriority>
}
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff35 	bl	80014c0 <__NVIC_EnableIRQ>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ffa2 	bl	80015b0 <SysTick_Config>
 800166c:	4603      	mov	r3, r0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001678:	b480      	push	{r7}
 800167a:	b08b      	sub	sp, #44	; 0x2c
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168a:	e148      	b.n	800191e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800168c:	2201      	movs	r2, #1
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	f040 8137 	bne.w	8001918 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4aa3      	ldr	r2, [pc, #652]	; (800193c <HAL_GPIO_Init+0x2c4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d05e      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016b4:	4aa1      	ldr	r2, [pc, #644]	; (800193c <HAL_GPIO_Init+0x2c4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d875      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016ba:	4aa1      	ldr	r2, [pc, #644]	; (8001940 <HAL_GPIO_Init+0x2c8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d058      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016c0:	4a9f      	ldr	r2, [pc, #636]	; (8001940 <HAL_GPIO_Init+0x2c8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d86f      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016c6:	4a9f      	ldr	r2, [pc, #636]	; (8001944 <HAL_GPIO_Init+0x2cc>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d052      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016cc:	4a9d      	ldr	r2, [pc, #628]	; (8001944 <HAL_GPIO_Init+0x2cc>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d869      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016d2:	4a9d      	ldr	r2, [pc, #628]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d04c      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016d8:	4a9b      	ldr	r2, [pc, #620]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d863      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016de:	4a9b      	ldr	r2, [pc, #620]	; (800194c <HAL_GPIO_Init+0x2d4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d046      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016e4:	4a99      	ldr	r2, [pc, #612]	; (800194c <HAL_GPIO_Init+0x2d4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d85d      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016ea:	2b12      	cmp	r3, #18
 80016ec:	d82a      	bhi.n	8001744 <HAL_GPIO_Init+0xcc>
 80016ee:	2b12      	cmp	r3, #18
 80016f0:	d859      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016f2:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <HAL_GPIO_Init+0x80>)
 80016f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f8:	08001773 	.word	0x08001773
 80016fc:	0800174d 	.word	0x0800174d
 8001700:	0800175f 	.word	0x0800175f
 8001704:	080017a1 	.word	0x080017a1
 8001708:	080017a7 	.word	0x080017a7
 800170c:	080017a7 	.word	0x080017a7
 8001710:	080017a7 	.word	0x080017a7
 8001714:	080017a7 	.word	0x080017a7
 8001718:	080017a7 	.word	0x080017a7
 800171c:	080017a7 	.word	0x080017a7
 8001720:	080017a7 	.word	0x080017a7
 8001724:	080017a7 	.word	0x080017a7
 8001728:	080017a7 	.word	0x080017a7
 800172c:	080017a7 	.word	0x080017a7
 8001730:	080017a7 	.word	0x080017a7
 8001734:	080017a7 	.word	0x080017a7
 8001738:	080017a7 	.word	0x080017a7
 800173c:	08001755 	.word	0x08001755
 8001740:	08001769 	.word	0x08001769
 8001744:	4a82      	ldr	r2, [pc, #520]	; (8001950 <HAL_GPIO_Init+0x2d8>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d013      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800174a:	e02c      	b.n	80017a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	623b      	str	r3, [r7, #32]
          break;
 8001752:	e029      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	3304      	adds	r3, #4
 800175a:	623b      	str	r3, [r7, #32]
          break;
 800175c:	e024      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	3308      	adds	r3, #8
 8001764:	623b      	str	r3, [r7, #32]
          break;
 8001766:	e01f      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	330c      	adds	r3, #12
 800176e:	623b      	str	r3, [r7, #32]
          break;
 8001770:	e01a      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800177a:	2304      	movs	r3, #4
 800177c:	623b      	str	r3, [r7, #32]
          break;
 800177e:	e013      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d105      	bne.n	8001794 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001788:	2308      	movs	r3, #8
 800178a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	611a      	str	r2, [r3, #16]
          break;
 8001792:	e009      	b.n	80017a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001794:	2308      	movs	r3, #8
 8001796:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	615a      	str	r2, [r3, #20]
          break;
 800179e:	e003      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017a0:	2300      	movs	r3, #0
 80017a2:	623b      	str	r3, [r7, #32]
          break;
 80017a4:	e000      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          break;
 80017a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2bff      	cmp	r3, #255	; 0xff
 80017ac:	d801      	bhi.n	80017b2 <HAL_GPIO_Init+0x13a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	e001      	b.n	80017b6 <HAL_GPIO_Init+0x13e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3304      	adds	r3, #4
 80017b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2bff      	cmp	r3, #255	; 0xff
 80017bc:	d802      	bhi.n	80017c4 <HAL_GPIO_Init+0x14c>
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	e002      	b.n	80017ca <HAL_GPIO_Init+0x152>
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	3b08      	subs	r3, #8
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	210f      	movs	r1, #15
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	401a      	ands	r2, r3
 80017dc:	6a39      	ldr	r1, [r7, #32]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	431a      	orrs	r2, r3
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 8090 	beq.w	8001918 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017f8:	4b56      	ldr	r3, [pc, #344]	; (8001954 <HAL_GPIO_Init+0x2dc>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	4a55      	ldr	r2, [pc, #340]	; (8001954 <HAL_GPIO_Init+0x2dc>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6193      	str	r3, [r2, #24]
 8001804:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_GPIO_Init+0x2dc>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001810:	4a51      	ldr	r2, [pc, #324]	; (8001958 <HAL_GPIO_Init+0x2e0>)
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	220f      	movs	r2, #15
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a49      	ldr	r2, [pc, #292]	; (800195c <HAL_GPIO_Init+0x2e4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d00d      	beq.n	8001858 <HAL_GPIO_Init+0x1e0>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a48      	ldr	r2, [pc, #288]	; (8001960 <HAL_GPIO_Init+0x2e8>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d007      	beq.n	8001854 <HAL_GPIO_Init+0x1dc>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a47      	ldr	r2, [pc, #284]	; (8001964 <HAL_GPIO_Init+0x2ec>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d101      	bne.n	8001850 <HAL_GPIO_Init+0x1d8>
 800184c:	2302      	movs	r3, #2
 800184e:	e004      	b.n	800185a <HAL_GPIO_Init+0x1e2>
 8001850:	2303      	movs	r3, #3
 8001852:	e002      	b.n	800185a <HAL_GPIO_Init+0x1e2>
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <HAL_GPIO_Init+0x1e2>
 8001858:	2300      	movs	r3, #0
 800185a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800185c:	f002 0203 	and.w	r2, r2, #3
 8001860:	0092      	lsls	r2, r2, #2
 8001862:	4093      	lsls	r3, r2
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800186a:	493b      	ldr	r1, [pc, #236]	; (8001958 <HAL_GPIO_Init+0x2e0>)
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	3302      	adds	r3, #2
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001884:	4b38      	ldr	r3, [pc, #224]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	4937      	ldr	r1, [pc, #220]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	608b      	str	r3, [r1, #8]
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001892:	4b35      	ldr	r3, [pc, #212]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	43db      	mvns	r3, r3
 800189a:	4933      	ldr	r1, [pc, #204]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 800189c:	4013      	ands	r3, r2
 800189e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d006      	beq.n	80018ba <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018ac:	4b2e      	ldr	r3, [pc, #184]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	492d      	ldr	r1, [pc, #180]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	60cb      	str	r3, [r1, #12]
 80018b8:	e006      	b.n	80018c8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018ba:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	4929      	ldr	r1, [pc, #164]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018d4:	4b24      	ldr	r3, [pc, #144]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	4923      	ldr	r1, [pc, #140]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
 80018e0:	e006      	b.n	80018f0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018e2:	4b21      	ldr	r3, [pc, #132]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	491f      	ldr	r1, [pc, #124]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4919      	ldr	r1, [pc, #100]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
 8001908:	e006      	b.n	8001918 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	43db      	mvns	r3, r3
 8001912:	4915      	ldr	r1, [pc, #84]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 8001914:	4013      	ands	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	3301      	adds	r3, #1
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	fa22 f303 	lsr.w	r3, r2, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	f47f aeaf 	bne.w	800168c <HAL_GPIO_Init+0x14>
  }
}
 800192e:	bf00      	nop
 8001930:	bf00      	nop
 8001932:	372c      	adds	r7, #44	; 0x2c
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	10320000 	.word	0x10320000
 8001940:	10310000 	.word	0x10310000
 8001944:	10220000 	.word	0x10220000
 8001948:	10210000 	.word	0x10210000
 800194c:	10120000 	.word	0x10120000
 8001950:	10110000 	.word	0x10110000
 8001954:	40021000 	.word	0x40021000
 8001958:	40010000 	.word	0x40010000
 800195c:	40010800 	.word	0x40010800
 8001960:	40010c00 	.word	0x40010c00
 8001964:	40011000 	.word	0x40011000
 8001968:	40010400 	.word	0x40010400

0800196c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	887b      	ldrh	r3, [r7, #2]
 800197e:	4013      	ands	r3, r2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
 8001988:	e001      	b.n	800198e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	460b      	mov	r3, r1
 80019a4:	807b      	strh	r3, [r7, #2]
 80019a6:	4613      	mov	r3, r2
 80019a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019aa:	787b      	ldrb	r3, [r7, #1]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b0:	887a      	ldrh	r2, [r7, #2]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019b6:	e003      	b.n	80019c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019b8:	887b      	ldrh	r3, [r7, #2]
 80019ba:	041a      	lsls	r2, r3, #16
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	611a      	str	r2, [r3, #16]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr

080019ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b085      	sub	sp, #20
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	460b      	mov	r3, r1
 80019d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019dc:	887a      	ldrh	r2, [r7, #2]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4013      	ands	r3, r2
 80019e2:	041a      	lsls	r2, r3, #16
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43d9      	mvns	r1, r3
 80019e8:	887b      	ldrh	r3, [r7, #2]
 80019ea:	400b      	ands	r3, r1
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	611a      	str	r2, [r3, #16]
}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e26c      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 8087 	beq.w	8001b2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a1c:	4b92      	ldr	r3, [pc, #584]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d00c      	beq.n	8001a42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a28:	4b8f      	ldr	r3, [pc, #572]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d112      	bne.n	8001a5a <HAL_RCC_OscConfig+0x5e>
 8001a34:	4b8c      	ldr	r3, [pc, #560]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a40:	d10b      	bne.n	8001a5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a42:	4b89      	ldr	r3, [pc, #548]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d06c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x12c>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d168      	bne.n	8001b28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e246      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x76>
 8001a64:	4b80      	ldr	r3, [pc, #512]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a7f      	ldr	r2, [pc, #508]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	e02e      	b.n	8001ad0 <HAL_RCC_OscConfig+0xd4>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x98>
 8001a7a:	4b7b      	ldr	r3, [pc, #492]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a7a      	ldr	r2, [pc, #488]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b78      	ldr	r3, [pc, #480]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a77      	ldr	r2, [pc, #476]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e01d      	b.n	8001ad0 <HAL_RCC_OscConfig+0xd4>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0xbc>
 8001a9e:	4b72      	ldr	r3, [pc, #456]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a71      	ldr	r2, [pc, #452]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b6f      	ldr	r3, [pc, #444]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a6e      	ldr	r2, [pc, #440]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e00b      	b.n	8001ad0 <HAL_RCC_OscConfig+0xd4>
 8001ab8:	4b6b      	ldr	r3, [pc, #428]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a6a      	ldr	r2, [pc, #424]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b68      	ldr	r3, [pc, #416]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a67      	ldr	r2, [pc, #412]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ace:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d013      	beq.n	8001b00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fcb6 	bl	8001448 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fcb2 	bl	8001448 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e1fa      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af2:	4b5d      	ldr	r3, [pc, #372]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xe4>
 8001afe:	e014      	b.n	8001b2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff fca2 	bl	8001448 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff fc9e 	bl	8001448 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	; 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e1e6      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1a:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x10c>
 8001b26:	e000      	b.n	8001b2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d063      	beq.n	8001bfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b36:	4b4c      	ldr	r3, [pc, #304]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00b      	beq.n	8001b5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b42:	4b49      	ldr	r3, [pc, #292]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d11c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x18c>
 8001b4e:	4b46      	ldr	r3, [pc, #280]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d116      	bne.n	8001b88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5a:	4b43      	ldr	r3, [pc, #268]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <HAL_RCC_OscConfig+0x176>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d001      	beq.n	8001b72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e1ba      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b72:	4b3d      	ldr	r3, [pc, #244]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4939      	ldr	r1, [pc, #228]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b86:	e03a      	b.n	8001bfe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d020      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b90:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <HAL_RCC_OscConfig+0x270>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7ff fc57 	bl	8001448 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fc53 	bl	8001448 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e19b      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb0:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4927      	ldr	r1, [pc, #156]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]
 8001bd0:	e015      	b.n	8001bfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd2:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <HAL_RCC_OscConfig+0x270>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fc36 	bl	8001448 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be0:	f7ff fc32 	bl	8001448 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e17a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d03a      	beq.n	8001c80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d019      	beq.n	8001c46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c12:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <HAL_RCC_OscConfig+0x274>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c18:	f7ff fc16 	bl	8001448 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c20:	f7ff fc12 	bl	8001448 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e15a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f000 fa9a 	bl	8002178 <RCC_Delay>
 8001c44:	e01c      	b.n	8001c80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_RCC_OscConfig+0x274>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4c:	f7ff fbfc 	bl	8001448 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c52:	e00f      	b.n	8001c74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c54:	f7ff fbf8 	bl	8001448 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d908      	bls.n	8001c74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e140      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	42420000 	.word	0x42420000
 8001c70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c74:	4b9e      	ldr	r3, [pc, #632]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1e9      	bne.n	8001c54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80a6 	beq.w	8001dda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c92:	4b97      	ldr	r3, [pc, #604]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10d      	bne.n	8001cba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	4b94      	ldr	r3, [pc, #592]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4a93      	ldr	r2, [pc, #588]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	61d3      	str	r3, [r2, #28]
 8001caa:	4b91      	ldr	r3, [pc, #580]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cba:	4b8e      	ldr	r3, [pc, #568]	; (8001ef4 <HAL_RCC_OscConfig+0x4f8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d118      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc6:	4b8b      	ldr	r3, [pc, #556]	; (8001ef4 <HAL_RCC_OscConfig+0x4f8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a8a      	ldr	r2, [pc, #552]	; (8001ef4 <HAL_RCC_OscConfig+0x4f8>)
 8001ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd2:	f7ff fbb9 	bl	8001448 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cda:	f7ff fbb5 	bl	8001448 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b64      	cmp	r3, #100	; 0x64
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e0fd      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cec:	4b81      	ldr	r3, [pc, #516]	; (8001ef4 <HAL_RCC_OscConfig+0x4f8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d106      	bne.n	8001d0e <HAL_RCC_OscConfig+0x312>
 8001d00:	4b7b      	ldr	r3, [pc, #492]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	4a7a      	ldr	r2, [pc, #488]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	6213      	str	r3, [r2, #32]
 8001d0c:	e02d      	b.n	8001d6a <HAL_RCC_OscConfig+0x36e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x334>
 8001d16:	4b76      	ldr	r3, [pc, #472]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4a75      	ldr	r2, [pc, #468]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d1c:	f023 0301 	bic.w	r3, r3, #1
 8001d20:	6213      	str	r3, [r2, #32]
 8001d22:	4b73      	ldr	r3, [pc, #460]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	4a72      	ldr	r2, [pc, #456]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	f023 0304 	bic.w	r3, r3, #4
 8001d2c:	6213      	str	r3, [r2, #32]
 8001d2e:	e01c      	b.n	8001d6a <HAL_RCC_OscConfig+0x36e>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	2b05      	cmp	r3, #5
 8001d36:	d10c      	bne.n	8001d52 <HAL_RCC_OscConfig+0x356>
 8001d38:	4b6d      	ldr	r3, [pc, #436]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	4a6c      	ldr	r2, [pc, #432]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d3e:	f043 0304 	orr.w	r3, r3, #4
 8001d42:	6213      	str	r3, [r2, #32]
 8001d44:	4b6a      	ldr	r3, [pc, #424]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	4a69      	ldr	r2, [pc, #420]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6213      	str	r3, [r2, #32]
 8001d50:	e00b      	b.n	8001d6a <HAL_RCC_OscConfig+0x36e>
 8001d52:	4b67      	ldr	r3, [pc, #412]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4a66      	ldr	r2, [pc, #408]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	6213      	str	r3, [r2, #32]
 8001d5e:	4b64      	ldr	r3, [pc, #400]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	4a63      	ldr	r2, [pc, #396]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	f023 0304 	bic.w	r3, r3, #4
 8001d68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d015      	beq.n	8001d9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d72:	f7ff fb69 	bl	8001448 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d78:	e00a      	b.n	8001d90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7a:	f7ff fb65 	bl	8001448 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e0ab      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d90:	4b57      	ldr	r3, [pc, #348]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0ee      	beq.n	8001d7a <HAL_RCC_OscConfig+0x37e>
 8001d9c:	e014      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9e:	f7ff fb53 	bl	8001448 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da4:	e00a      	b.n	8001dbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da6:	f7ff fb4f 	bl	8001448 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e095      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dbc:	4b4c      	ldr	r3, [pc, #304]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1ee      	bne.n	8001da6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d105      	bne.n	8001dda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dce:	4b48      	ldr	r3, [pc, #288]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	4a47      	ldr	r2, [pc, #284]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 8081 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de4:	4b42      	ldr	r3, [pc, #264]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d061      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d146      	bne.n	8001e86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df8:	4b3f      	ldr	r3, [pc, #252]	; (8001ef8 <HAL_RCC_OscConfig+0x4fc>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7ff fb23 	bl	8001448 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e06:	f7ff fb1f 	bl	8001448 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e067      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e18:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f0      	bne.n	8001e06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2c:	d108      	bne.n	8001e40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e2e:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	492d      	ldr	r1, [pc, #180]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e40:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a19      	ldr	r1, [r3, #32]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	430b      	orrs	r3, r1
 8001e52:	4927      	ldr	r1, [pc, #156]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e58:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <HAL_RCC_OscConfig+0x4fc>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5e:	f7ff faf3 	bl	8001448 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e66:	f7ff faef 	bl	8001448 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e037      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e78:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_OscConfig+0x46a>
 8001e84:	e02f      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e86:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <HAL_RCC_OscConfig+0x4fc>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fadc 	bl	8001448 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e94:	f7ff fad8 	bl	8001448 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e020      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea6:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x498>
 8001eb2:	e018      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e013      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	42420060 	.word	0x42420060

08001efc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0d0      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f10:	4b6a      	ldr	r3, [pc, #424]	; (80020bc <HAL_RCC_ClockConfig+0x1c0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d910      	bls.n	8001f40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b67      	ldr	r3, [pc, #412]	; (80020bc <HAL_RCC_ClockConfig+0x1c0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 0207 	bic.w	r2, r3, #7
 8001f26:	4965      	ldr	r1, [pc, #404]	; (80020bc <HAL_RCC_ClockConfig+0x1c0>)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2e:	4b63      	ldr	r3, [pc, #396]	; (80020bc <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0b8      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d020      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f58:	4b59      	ldr	r3, [pc, #356]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	4a58      	ldr	r2, [pc, #352]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f70:	4b53      	ldr	r3, [pc, #332]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	4a52      	ldr	r2, [pc, #328]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f7c:	4b50      	ldr	r3, [pc, #320]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	494d      	ldr	r1, [pc, #308]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d040      	beq.n	800201c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d107      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa2:	4b47      	ldr	r3, [pc, #284]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d115      	bne.n	8001fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e07f      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d107      	bne.n	8001fca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fba:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d109      	bne.n	8001fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e073      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fca:	4b3d      	ldr	r3, [pc, #244]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e06b      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fda:	4b39      	ldr	r3, [pc, #228]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f023 0203 	bic.w	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	4936      	ldr	r1, [pc, #216]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fec:	f7ff fa2c 	bl	8001448 <HAL_GetTick>
 8001ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff2:	e00a      	b.n	800200a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff4:	f7ff fa28 	bl	8001448 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e053      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200a:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 020c 	and.w	r2, r3, #12
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	429a      	cmp	r2, r3
 800201a:	d1eb      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <HAL_RCC_ClockConfig+0x1c0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d210      	bcs.n	800204c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b24      	ldr	r3, [pc, #144]	; (80020bc <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 0207 	bic.w	r2, r3, #7
 8002032:	4922      	ldr	r1, [pc, #136]	; (80020bc <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d001      	beq.n	800204c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e032      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4916      	ldr	r1, [pc, #88]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	4313      	orrs	r3, r2
 8002068:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d009      	beq.n	800208a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002076:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	490e      	ldr	r1, [pc, #56]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	4313      	orrs	r3, r2
 8002088:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800208a:	f000 f821 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 800208e:	4602      	mov	r2, r0
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	490a      	ldr	r1, [pc, #40]	; (80020c4 <HAL_RCC_ClockConfig+0x1c8>)
 800209c:	5ccb      	ldrb	r3, [r1, r3]
 800209e:	fa22 f303 	lsr.w	r3, r2, r3
 80020a2:	4a09      	ldr	r2, [pc, #36]	; (80020c8 <HAL_RCC_ClockConfig+0x1cc>)
 80020a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_RCC_ClockConfig+0x1d0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff f98a 	bl	80013c4 <HAL_InitTick>

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40022000 	.word	0x40022000
 80020c0:	40021000 	.word	0x40021000
 80020c4:	080029dc 	.word	0x080029dc
 80020c8:	20000194 	.word	0x20000194
 80020cc:	20000198 	.word	0x20000198

080020d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b087      	sub	sp, #28
 80020d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	2300      	movs	r3, #0
 80020e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <HAL_RCC_GetSysClockFreq+0x94>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d002      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x30>
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d003      	beq.n	8002106 <HAL_RCC_GetSysClockFreq+0x36>
 80020fe:	e027      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002100:	4b19      	ldr	r3, [pc, #100]	; (8002168 <HAL_RCC_GetSysClockFreq+0x98>)
 8002102:	613b      	str	r3, [r7, #16]
      break;
 8002104:	e027      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	0c9b      	lsrs	r3, r3, #18
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	4a17      	ldr	r2, [pc, #92]	; (800216c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002110:	5cd3      	ldrb	r3, [r2, r3]
 8002112:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d010      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_RCC_GetSysClockFreq+0x94>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	0c5b      	lsrs	r3, r3, #17
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	4a11      	ldr	r2, [pc, #68]	; (8002170 <HAL_RCC_GetSysClockFreq+0xa0>)
 800212a:	5cd3      	ldrb	r3, [r2, r3]
 800212c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a0d      	ldr	r2, [pc, #52]	; (8002168 <HAL_RCC_GetSysClockFreq+0x98>)
 8002132:	fb02 f203 	mul.w	r2, r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	e004      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a0c      	ldr	r2, [pc, #48]	; (8002174 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002144:	fb02 f303 	mul.w	r3, r2, r3
 8002148:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	613b      	str	r3, [r7, #16]
      break;
 800214e:	e002      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <HAL_RCC_GetSysClockFreq+0x98>)
 8002152:	613b      	str	r3, [r7, #16]
      break;
 8002154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002156:	693b      	ldr	r3, [r7, #16]
}
 8002158:	4618      	mov	r0, r3
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	007a1200 	.word	0x007a1200
 800216c:	080029ec 	.word	0x080029ec
 8002170:	080029fc 	.word	0x080029fc
 8002174:	003d0900 	.word	0x003d0900

08002178 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002180:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <RCC_Delay+0x34>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <RCC_Delay+0x38>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	0a5b      	lsrs	r3, r3, #9
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	fb02 f303 	mul.w	r3, r2, r3
 8002192:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002194:	bf00      	nop
  }
  while (Delay --);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1e5a      	subs	r2, r3, #1
 800219a:	60fa      	str	r2, [r7, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f9      	bne.n	8002194 <RCC_Delay+0x1c>
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr
 80021ac:	20000194 	.word	0x20000194
 80021b0:	10624dd3 	.word	0x10624dd3

080021b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e041      	b.n	800224a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe ff14 	bl	8001008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3304      	adds	r3, #4
 80021f0:	4619      	mov	r1, r3
 80021f2:	4610      	mov	r0, r2
 80021f4:	f000 fa56 	bl	80026a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b01      	cmp	r3, #1
 8002266:	d001      	beq.n	800226c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e035      	b.n	80022d8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a16      	ldr	r2, [pc, #88]	; (80022e4 <HAL_TIM_Base_Start_IT+0x90>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d009      	beq.n	80022a2 <HAL_TIM_Base_Start_IT+0x4e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002296:	d004      	beq.n	80022a2 <HAL_TIM_Base_Start_IT+0x4e>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <HAL_TIM_Base_Start_IT+0x94>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d111      	bne.n	80022c6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b06      	cmp	r3, #6
 80022b2:	d010      	beq.n	80022d6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c4:	e007      	b.n	80022d6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40012c00 	.word	0x40012c00
 80022e8:	40000400 	.word	0x40000400

080022ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d020      	beq.n	8002350 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d01b      	beq.n	8002350 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0202 	mvn.w	r2, #2
 8002320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f998 	bl	800266c <HAL_TIM_IC_CaptureCallback>
 800233c:	e005      	b.n	800234a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f98b 	bl	800265a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f99a 	bl	800267e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b00      	cmp	r3, #0
 8002358:	d020      	beq.n	800239c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01b      	beq.n	800239c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0204 	mvn.w	r2, #4
 800236c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2202      	movs	r2, #2
 8002372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f972 	bl	800266c <HAL_TIM_IC_CaptureCallback>
 8002388:	e005      	b.n	8002396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f965 	bl	800265a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f974 	bl	800267e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d020      	beq.n	80023e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d01b      	beq.n	80023e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f06f 0208 	mvn.w	r2, #8
 80023b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2204      	movs	r2, #4
 80023be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f94c 	bl	800266c <HAL_TIM_IC_CaptureCallback>
 80023d4:	e005      	b.n	80023e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f93f 	bl	800265a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f94e 	bl	800267e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d020      	beq.n	8002434 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01b      	beq.n	8002434 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0210 	mvn.w	r2, #16
 8002404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2208      	movs	r2, #8
 800240a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f926 	bl	800266c <HAL_TIM_IC_CaptureCallback>
 8002420:	e005      	b.n	800242e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f919 	bl	800265a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f928 	bl	800267e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00c      	beq.n	8002458 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d007      	beq.n	8002458 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0201 	mvn.w	r2, #1
 8002450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7fe fb64 	bl	8000b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00c      	beq.n	800247c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002468:	2b00      	cmp	r3, #0
 800246a:	d007      	beq.n	800247c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fa6f 	bl	800295a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00c      	beq.n	80024a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248c:	2b00      	cmp	r3, #0
 800248e:	d007      	beq.n	80024a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f8f8 	bl	8002690 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	f003 0320 	and.w	r3, r3, #32
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00c      	beq.n	80024c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d007      	beq.n	80024c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f06f 0220 	mvn.w	r2, #32
 80024bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fa42 	bl	8002948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024c4:	bf00      	nop
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_TIM_ConfigClockSource+0x1c>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e0b4      	b.n	8002652 <HAL_TIM_ConfigClockSource+0x186>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800250e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002520:	d03e      	beq.n	80025a0 <HAL_TIM_ConfigClockSource+0xd4>
 8002522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002526:	f200 8087 	bhi.w	8002638 <HAL_TIM_ConfigClockSource+0x16c>
 800252a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252e:	f000 8086 	beq.w	800263e <HAL_TIM_ConfigClockSource+0x172>
 8002532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002536:	d87f      	bhi.n	8002638 <HAL_TIM_ConfigClockSource+0x16c>
 8002538:	2b70      	cmp	r3, #112	; 0x70
 800253a:	d01a      	beq.n	8002572 <HAL_TIM_ConfigClockSource+0xa6>
 800253c:	2b70      	cmp	r3, #112	; 0x70
 800253e:	d87b      	bhi.n	8002638 <HAL_TIM_ConfigClockSource+0x16c>
 8002540:	2b60      	cmp	r3, #96	; 0x60
 8002542:	d050      	beq.n	80025e6 <HAL_TIM_ConfigClockSource+0x11a>
 8002544:	2b60      	cmp	r3, #96	; 0x60
 8002546:	d877      	bhi.n	8002638 <HAL_TIM_ConfigClockSource+0x16c>
 8002548:	2b50      	cmp	r3, #80	; 0x50
 800254a:	d03c      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0xfa>
 800254c:	2b50      	cmp	r3, #80	; 0x50
 800254e:	d873      	bhi.n	8002638 <HAL_TIM_ConfigClockSource+0x16c>
 8002550:	2b40      	cmp	r3, #64	; 0x40
 8002552:	d058      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0x13a>
 8002554:	2b40      	cmp	r3, #64	; 0x40
 8002556:	d86f      	bhi.n	8002638 <HAL_TIM_ConfigClockSource+0x16c>
 8002558:	2b30      	cmp	r3, #48	; 0x30
 800255a:	d064      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0x15a>
 800255c:	2b30      	cmp	r3, #48	; 0x30
 800255e:	d86b      	bhi.n	8002638 <HAL_TIM_ConfigClockSource+0x16c>
 8002560:	2b20      	cmp	r3, #32
 8002562:	d060      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0x15a>
 8002564:	2b20      	cmp	r3, #32
 8002566:	d867      	bhi.n	8002638 <HAL_TIM_ConfigClockSource+0x16c>
 8002568:	2b00      	cmp	r3, #0
 800256a:	d05c      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0x15a>
 800256c:	2b10      	cmp	r3, #16
 800256e:	d05a      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0x15a>
 8002570:	e062      	b.n	8002638 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	6899      	ldr	r1, [r3, #8]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f000 f96a 	bl	800285a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002594:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	609a      	str	r2, [r3, #8]
      break;
 800259e:	e04f      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6818      	ldr	r0, [r3, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	6899      	ldr	r1, [r3, #8]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f000 f953 	bl	800285a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025c2:	609a      	str	r2, [r3, #8]
      break;
 80025c4:	e03c      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6859      	ldr	r1, [r3, #4]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	461a      	mov	r2, r3
 80025d4:	f000 f8ca 	bl	800276c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2150      	movs	r1, #80	; 0x50
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 f921 	bl	8002826 <TIM_ITRx_SetConfig>
      break;
 80025e4:	e02c      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6859      	ldr	r1, [r3, #4]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f000 f8e8 	bl	80027c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2160      	movs	r1, #96	; 0x60
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 f911 	bl	8002826 <TIM_ITRx_SetConfig>
      break;
 8002604:	e01c      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6859      	ldr	r1, [r3, #4]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	461a      	mov	r2, r3
 8002614:	f000 f8aa 	bl	800276c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2140      	movs	r1, #64	; 0x40
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f901 	bl	8002826 <TIM_ITRx_SetConfig>
      break;
 8002624:	e00c      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4619      	mov	r1, r3
 8002630:	4610      	mov	r0, r2
 8002632:	f000 f8f8 	bl	8002826 <TIM_ITRx_SetConfig>
      break;
 8002636:	e003      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
      break;
 800263c:	e000      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800263e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002650:	7bfb      	ldrb	r3, [r7, #15]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr
	...

080026a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a2b      	ldr	r2, [pc, #172]	; (8002764 <TIM_Base_SetConfig+0xc0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d007      	beq.n	80026cc <TIM_Base_SetConfig+0x28>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c2:	d003      	beq.n	80026cc <TIM_Base_SetConfig+0x28>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a28      	ldr	r2, [pc, #160]	; (8002768 <TIM_Base_SetConfig+0xc4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d108      	bne.n	80026de <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a20      	ldr	r2, [pc, #128]	; (8002764 <TIM_Base_SetConfig+0xc0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d007      	beq.n	80026f6 <TIM_Base_SetConfig+0x52>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ec:	d003      	beq.n	80026f6 <TIM_Base_SetConfig+0x52>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <TIM_Base_SetConfig+0xc4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d108      	bne.n	8002708 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4313      	orrs	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a0d      	ldr	r2, [pc, #52]	; (8002764 <TIM_Base_SetConfig+0xc0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d103      	bne.n	800273c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d005      	beq.n	800275a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f023 0201 	bic.w	r2, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	611a      	str	r2, [r3, #16]
  }
}
 800275a:	bf00      	nop
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr
 8002764:	40012c00 	.word	0x40012c00
 8002768:	40000400 	.word	0x40000400

0800276c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	f023 0201 	bic.w	r2, r3, #1
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f023 030a 	bic.w	r3, r3, #10
 80027a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	621a      	str	r2, [r3, #32]
}
 80027be:	bf00      	nop
 80027c0:	371c      	adds	r7, #28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	f023 0210 	bic.w	r2, r3, #16
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	031b      	lsls	r3, r3, #12
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002804:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	621a      	str	r2, [r3, #32]
}
 800281c:	bf00      	nop
 800281e:	371c      	adds	r7, #28
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002826:	b480      	push	{r7}
 8002828:	b085      	sub	sp, #20
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800283c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	f043 0307 	orr.w	r3, r3, #7
 8002848:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	609a      	str	r2, [r3, #8]
}
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800285a:	b480      	push	{r7}
 800285c:	b087      	sub	sp, #28
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002874:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	021a      	lsls	r2, r3, #8
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	431a      	orrs	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	4313      	orrs	r3, r2
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4313      	orrs	r3, r2
 8002886:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	609a      	str	r2, [r3, #8]
}
 800288e:	bf00      	nop
 8002890:	371c      	adds	r7, #28
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e041      	b.n	8002934 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a14      	ldr	r2, [pc, #80]	; (8002940 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d009      	beq.n	8002908 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fc:	d004      	beq.n	8002908 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a10      	ldr	r2, [pc, #64]	; (8002944 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d10c      	bne.n	8002922 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800290e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	4313      	orrs	r3, r2
 8002918:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40012c00 	.word	0x40012c00
 8002944:	40000400 	.word	0x40000400

08002948 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <__libc_init_array>:
 800296c:	b570      	push	{r4, r5, r6, lr}
 800296e:	2600      	movs	r6, #0
 8002970:	4d0c      	ldr	r5, [pc, #48]	; (80029a4 <__libc_init_array+0x38>)
 8002972:	4c0d      	ldr	r4, [pc, #52]	; (80029a8 <__libc_init_array+0x3c>)
 8002974:	1b64      	subs	r4, r4, r5
 8002976:	10a4      	asrs	r4, r4, #2
 8002978:	42a6      	cmp	r6, r4
 800297a:	d109      	bne.n	8002990 <__libc_init_array+0x24>
 800297c:	f000 f822 	bl	80029c4 <_init>
 8002980:	2600      	movs	r6, #0
 8002982:	4d0a      	ldr	r5, [pc, #40]	; (80029ac <__libc_init_array+0x40>)
 8002984:	4c0a      	ldr	r4, [pc, #40]	; (80029b0 <__libc_init_array+0x44>)
 8002986:	1b64      	subs	r4, r4, r5
 8002988:	10a4      	asrs	r4, r4, #2
 800298a:	42a6      	cmp	r6, r4
 800298c:	d105      	bne.n	800299a <__libc_init_array+0x2e>
 800298e:	bd70      	pop	{r4, r5, r6, pc}
 8002990:	f855 3b04 	ldr.w	r3, [r5], #4
 8002994:	4798      	blx	r3
 8002996:	3601      	adds	r6, #1
 8002998:	e7ee      	b.n	8002978 <__libc_init_array+0xc>
 800299a:	f855 3b04 	ldr.w	r3, [r5], #4
 800299e:	4798      	blx	r3
 80029a0:	3601      	adds	r6, #1
 80029a2:	e7f2      	b.n	800298a <__libc_init_array+0x1e>
 80029a4:	08002a00 	.word	0x08002a00
 80029a8:	08002a00 	.word	0x08002a00
 80029ac:	08002a00 	.word	0x08002a00
 80029b0:	08002a04 	.word	0x08002a04

080029b4 <memset>:
 80029b4:	4603      	mov	r3, r0
 80029b6:	4402      	add	r2, r0
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d100      	bne.n	80029be <memset+0xa>
 80029bc:	4770      	bx	lr
 80029be:	f803 1b01 	strb.w	r1, [r3], #1
 80029c2:	e7f9      	b.n	80029b8 <memset+0x4>

080029c4 <_init>:
 80029c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c6:	bf00      	nop
 80029c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ca:	bc08      	pop	{r3}
 80029cc:	469e      	mov	lr, r3
 80029ce:	4770      	bx	lr

080029d0 <_fini>:
 80029d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d2:	bf00      	nop
 80029d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d6:	bc08      	pop	{r3}
 80029d8:	469e      	mov	lr, r3
 80029da:	4770      	bx	lr

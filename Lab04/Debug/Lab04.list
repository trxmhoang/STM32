
Lab04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080034cc  080034cc  000134cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035a8  080035a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080035a8  080035a8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035a8  080035a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035a8  080035a8  000135a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035ac  080035ac  000135ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080035b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000070  08003620  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08003620  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6ff  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000200e  00000000  00000000  0002e798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  000307a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00031470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187db  00000000  00000000  00032070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dabf  00000000  00000000  0004a84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089d56  00000000  00000000  0005830a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2060  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c58  00000000  00000000  000e20b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080034b4 	.word	0x080034b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080034b4 	.word	0x080034b4

0800014c <__io_putchar>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int __io_putchar(int ch) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f002 f843 	bl	80021e8 <HAL_UART_Transmit>
    return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200000e8 	.word	0x200000e8

08000170 <get_time>:

void get_time(uint32_t task_id) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    printf("[Task %lu]: @ %lu ms\r\n", task_id, tick);
 8000178:	4b05      	ldr	r3, [pc, #20]	; (8000190 <get_time+0x20>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	461a      	mov	r2, r3
 800017e:	6879      	ldr	r1, [r7, #4]
 8000180:	4804      	ldr	r0, [pc, #16]	; (8000194 <get_time+0x24>)
 8000182:	f002 fa37 	bl	80025f4 <iprintf>
}
 8000186:	bf00      	nop
 8000188:	3708      	adds	r7, #8
 800018a:	46bd      	mov	sp, r7
 800018c:	bd80      	pop	{r7, pc}
 800018e:	bf00      	nop
 8000190:	20000090 	.word	0x20000090
 8000194:	080034cc 	.word	0x080034cc

08000198 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80001a0:	f000 f972 	bl	8000488 <SCH_Update>
}
 80001a4:	bf00      	nop
 80001a6:	3708      	adds	r7, #8
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}

080001ac <main>:

int main(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b0:	f000 fcc4 	bl	8000b3c <HAL_Init>
  SystemClock_Config();
 80001b4:	f000 f850 	bl	8000258 <SystemClock_Config>

  MX_GPIO_Init();
 80001b8:	f000 f900 	bl	80003bc <MX_GPIO_Init>
  MX_TIM2_Init();
 80001bc:	f000 f888 	bl	80002d0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80001c0:	f000 f8d2 	bl	8000368 <MX_USART2_UART_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80001c4:	481a      	ldr	r0, [pc, #104]	; (8000230 <main+0x84>)
 80001c6:	f001 fc33 	bl	8001a30 <HAL_TIM_Base_Start_IT>

  SCH_Init();
 80001ca:	f000 f931 	bl	8000430 <SCH_Init>
  SCH_Add_Task(blink_int, 0, 1);
 80001ce:	2201      	movs	r2, #1
 80001d0:	2100      	movs	r1, #0
 80001d2:	4818      	ldr	r0, [pc, #96]	; (8000234 <main+0x88>)
 80001d4:	f000 f9ae 	bl	8000534 <SCH_Add_Task>
  SCH_Add_Task(blink_led, 2, 50);
 80001d8:	2232      	movs	r2, #50	; 0x32
 80001da:	2102      	movs	r1, #2
 80001dc:	4816      	ldr	r0, [pc, #88]	; (8000238 <main+0x8c>)
 80001de:	f000 f9a9 	bl	8000534 <SCH_Add_Task>
  SCH_Add_Task(oneshot_1, 200, 0);
 80001e2:	2200      	movs	r2, #0
 80001e4:	21c8      	movs	r1, #200	; 0xc8
 80001e6:	4815      	ldr	r0, [pc, #84]	; (800023c <main+0x90>)
 80001e8:	f000 f9a4 	bl	8000534 <SCH_Add_Task>
  SCH_Add_Task(oneshot_2, 300, 0);
 80001ec:	2200      	movs	r2, #0
 80001ee:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80001f2:	4813      	ldr	r0, [pc, #76]	; (8000240 <main+0x94>)
 80001f4:	f000 f99e 	bl	8000534 <SCH_Add_Task>
  SCH_Add_Task(task1, 5, 50);
 80001f8:	2232      	movs	r2, #50	; 0x32
 80001fa:	2105      	movs	r1, #5
 80001fc:	4811      	ldr	r0, [pc, #68]	; (8000244 <main+0x98>)
 80001fe:	f000 f999 	bl	8000534 <SCH_Add_Task>
  SCH_Add_Task(task2, 10, 100);
 8000202:	2264      	movs	r2, #100	; 0x64
 8000204:	210a      	movs	r1, #10
 8000206:	4810      	ldr	r0, [pc, #64]	; (8000248 <main+0x9c>)
 8000208:	f000 f994 	bl	8000534 <SCH_Add_Task>
  SCH_Add_Task(task3, 15, 150);
 800020c:	2296      	movs	r2, #150	; 0x96
 800020e:	210f      	movs	r1, #15
 8000210:	480e      	ldr	r0, [pc, #56]	; (800024c <main+0xa0>)
 8000212:	f000 f98f 	bl	8000534 <SCH_Add_Task>
  SCH_Add_Task(task4, 20, 200);
 8000216:	22c8      	movs	r2, #200	; 0xc8
 8000218:	2114      	movs	r1, #20
 800021a:	480d      	ldr	r0, [pc, #52]	; (8000250 <main+0xa4>)
 800021c:	f000 f98a 	bl	8000534 <SCH_Add_Task>
  SCH_Add_Task(task5, 25, 250);
 8000220:	22fa      	movs	r2, #250	; 0xfa
 8000222:	2119      	movs	r1, #25
 8000224:	480b      	ldr	r0, [pc, #44]	; (8000254 <main+0xa8>)
 8000226:	f000 f985 	bl	8000534 <SCH_Add_Task>

  while (1)
  {
	  SCH_Dispatch_Tasks();
 800022a:	f000 fa2f 	bl	800068c <SCH_Dispatch_Tasks>
 800022e:	e7fc      	b.n	800022a <main+0x7e>
 8000230:	200000a0 	.word	0x200000a0
 8000234:	08000a21 	.word	0x08000a21
 8000238:	08000a39 	.word	0x08000a39
 800023c:	08000a51 	.word	0x08000a51
 8000240:	08000a69 	.word	0x08000a69
 8000244:	08000a81 	.word	0x08000a81
 8000248:	08000a95 	.word	0x08000a95
 800024c:	08000ab1 	.word	0x08000ab1
 8000250:	08000ac5 	.word	0x08000ac5
 8000254:	08000ad9 	.word	0x08000ad9

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b090      	sub	sp, #64	; 0x40
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	2228      	movs	r2, #40	; 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f002 f9bc 	bl	80025e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027a:	2302      	movs	r3, #2
 800027c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027e:	2301      	movs	r3, #1
 8000280:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000282:	2310      	movs	r3, #16
 8000284:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000286:	2300      	movs	r3, #0
 8000288:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	4618      	mov	r0, r3
 8000290:	f000 ff70 	bl	8001174 <HAL_RCC_OscConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800029a:	f000 f8c3 	bl	8000424 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	230f      	movs	r3, #15
 80002a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a2:	2300      	movs	r3, #0
 80002a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 f9dc 	bl	8001674 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002c2:	f000 f8af 	bl	8000424 <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3740      	adds	r7, #64	; 0x40
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002d6:	f107 0308 	add.w	r3, r7, #8
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e4:	463b      	mov	r3, r7
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002ec:	4b1d      	ldr	r3, [pc, #116]	; (8000364 <MX_TIM2_Init+0x94>)
 80002ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80002f4:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <MX_TIM2_Init+0x94>)
 80002f6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002fc:	4b19      	ldr	r3, [pc, #100]	; (8000364 <MX_TIM2_Init+0x94>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000302:	4b18      	ldr	r3, [pc, #96]	; (8000364 <MX_TIM2_Init+0x94>)
 8000304:	2209      	movs	r2, #9
 8000306:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000308:	4b16      	ldr	r3, [pc, #88]	; (8000364 <MX_TIM2_Init+0x94>)
 800030a:	2200      	movs	r2, #0
 800030c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800030e:	4b15      	ldr	r3, [pc, #84]	; (8000364 <MX_TIM2_Init+0x94>)
 8000310:	2200      	movs	r2, #0
 8000312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000314:	4813      	ldr	r0, [pc, #76]	; (8000364 <MX_TIM2_Init+0x94>)
 8000316:	f001 fb3b 	bl	8001990 <HAL_TIM_Base_Init>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000320:	f000 f880 	bl	8000424 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000328:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800032a:	f107 0308 	add.w	r3, r7, #8
 800032e:	4619      	mov	r1, r3
 8000330:	480c      	ldr	r0, [pc, #48]	; (8000364 <MX_TIM2_Init+0x94>)
 8000332:	f001 fcb9 	bl	8001ca8 <HAL_TIM_ConfigClockSource>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800033c:	f000 f872 	bl	8000424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000340:	2300      	movs	r3, #0
 8000342:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000344:	2300      	movs	r3, #0
 8000346:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000348:	463b      	mov	r3, r7
 800034a:	4619      	mov	r1, r3
 800034c:	4805      	ldr	r0, [pc, #20]	; (8000364 <MX_TIM2_Init+0x94>)
 800034e:	f001 fe91 	bl	8002074 <HAL_TIMEx_MasterConfigSynchronization>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000358:	f000 f864 	bl	8000424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800035c:	bf00      	nop
 800035e:	3718      	adds	r7, #24
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	200000a0 	.word	0x200000a0

08000368 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800036c:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <MX_USART2_UART_Init+0x4c>)
 800036e:	4a12      	ldr	r2, [pc, #72]	; (80003b8 <MX_USART2_UART_Init+0x50>)
 8000370:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000372:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <MX_USART2_UART_Init+0x4c>)
 8000374:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000378:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <MX_USART2_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <MX_USART2_UART_Init+0x4c>)
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <MX_USART2_UART_Init+0x4c>)
 8000388:	2200      	movs	r2, #0
 800038a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <MX_USART2_UART_Init+0x4c>)
 800038e:	220c      	movs	r2, #12
 8000390:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <MX_USART2_UART_Init+0x4c>)
 8000394:	2200      	movs	r2, #0
 8000396:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <MX_USART2_UART_Init+0x4c>)
 800039a:	2200      	movs	r2, #0
 800039c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800039e:	4805      	ldr	r0, [pc, #20]	; (80003b4 <MX_USART2_UART_Init+0x4c>)
 80003a0:	f001 fed2 	bl	8002148 <HAL_UART_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003aa:	f000 f83b 	bl	8000424 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	200000e8 	.word	0x200000e8
 80003b8:	40004400 	.word	0x40004400

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	f107 0308 	add.w	r3, r7, #8
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <MX_GPIO_Init+0x60>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a11      	ldr	r2, [pc, #68]	; (800041c <MX_GPIO_Init+0x60>)
 80003d6:	f043 0304 	orr.w	r3, r3, #4
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_GPIO_Init+0x60>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0304 	and.w	r3, r3, #4
 80003e4:	607b      	str	r3, [r7, #4]
 80003e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led0_Pin|led1_Pin|led2_Pin|led3_Pin
 80003e8:	2200      	movs	r2, #0
 80003ea:	f641 71f0 	movw	r1, #8176	; 0x1ff0
 80003ee:	480c      	ldr	r0, [pc, #48]	; (8000420 <MX_GPIO_Init+0x64>)
 80003f0:	f000 fe8e 	bl	8001110 <HAL_GPIO_WritePin>
                          |led8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : led0_Pin led1_Pin led2_Pin led3_Pin
                           led4_Pin led5_Pin led6_Pin led7_Pin
                           led8_Pin */
  GPIO_InitStruct.Pin = led0_Pin|led1_Pin|led2_Pin|led3_Pin
 80003f4:	f641 73f0 	movw	r3, #8176	; 0x1ff0
 80003f8:	60bb      	str	r3, [r7, #8]
                          |led4_Pin|led5_Pin|led6_Pin|led7_Pin
                          |led8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fa:	2301      	movs	r3, #1
 80003fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000402:	2302      	movs	r3, #2
 8000404:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000406:	f107 0308 	add.w	r3, r7, #8
 800040a:	4619      	mov	r1, r3
 800040c:	4804      	ldr	r0, [pc, #16]	; (8000420 <MX_GPIO_Init+0x64>)
 800040e:	f000 fd05 	bl	8000e1c <HAL_GPIO_Init>

}
 8000412:	bf00      	nop
 8000414:	3718      	adds	r7, #24
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000
 8000420:	40010800 	.word	0x40010800

08000424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000428:	b672      	cpsid	i
}
 800042a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800042c:	e7fe      	b.n	800042c <Error_Handler+0x8>
	...

08000430 <SCH_Init>:
		HAL_GPIO_WritePin(led0_GPIO_Port, led0_Pin << j, 1);
	}
}
*/

void SCH_Init(void){
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
	ERROR_CODE_G = 0;
 8000436:	4b10      	ldr	r3, [pc, #64]	; (8000478 <SCH_Init+0x48>)
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
	idx = 0;
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <SCH_Init+0x4c>)
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
	head = NULL;
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <SCH_Init+0x50>)
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]

	for (int j = 0; j < 9; j++){
 8000448:	2300      	movs	r3, #0
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	e00c      	b.n	8000468 <SCH_Init+0x38>
		HAL_GPIO_WritePin(led0_GPIO_Port, led0_Pin << j, 1);
 800044e:	2210      	movs	r2, #16
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	fa02 f303 	lsl.w	r3, r2, r3
 8000456:	b29b      	uxth	r3, r3
 8000458:	2201      	movs	r2, #1
 800045a:	4619      	mov	r1, r3
 800045c:	4809      	ldr	r0, [pc, #36]	; (8000484 <SCH_Init+0x54>)
 800045e:	f000 fe57 	bl	8001110 <HAL_GPIO_WritePin>
	for (int j = 0; j < 9; j++){
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	3301      	adds	r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	2b08      	cmp	r3, #8
 800046c:	ddef      	ble.n	800044e <SCH_Init+0x1e>
	}
}
 800046e:	bf00      	nop
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000310 	.word	0x20000310
 800047c:	20000314 	.word	0x20000314
 8000480:	2000008c 	.word	0x2000008c
 8000484:	40010800 	.word	0x40010800

08000488 <SCH_Update>:

void SCH_Update(void){
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
	tick += 10;
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <SCH_Update+0xa4>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	330a      	adds	r3, #10
 8000494:	4a25      	ldr	r2, [pc, #148]	; (800052c <SCH_Update+0xa4>)
 8000496:	6013      	str	r3, [r2, #0]
	sTask *current = head;
 8000498:	4b25      	ldr	r3, [pc, #148]	; (8000530 <SCH_Update+0xa8>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	607b      	str	r3, [r7, #4]
	sTask *pre = NULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	603b      	str	r3, [r7, #0]

	while(current != NULL){
 80004a2:	e03a      	b.n	800051a <SCH_Update+0x92>
		if(current->Delay > 1){
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d90a      	bls.n	80004c2 <SCH_Update+0x3a>
			current->Delay--;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	1e5a      	subs	r2, r3, #1
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	605a      	str	r2, [r3, #4]
			pre = current;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	603b      	str	r3, [r7, #0]
			current = current->next;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	e02b      	b.n	800051a <SCH_Update+0x92>
		}else{
			current->RunMe++;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	7b1b      	ldrb	r3, [r3, #12]
 80004c6:	3301      	adds	r3, #1
 80004c8:	b2da      	uxtb	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	731a      	strb	r2, [r3, #12]
			if(current->Period > 0){
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	689b      	ldr	r3, [r3, #8]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d009      	beq.n	80004ea <SCH_Update+0x62>
				current->Delay = current->Period;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	689a      	ldr	r2, [r3, #8]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	605a      	str	r2, [r3, #4]
				pre = current;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	603b      	str	r3, [r7, #0]
				current = current->next;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	e017      	b.n	800051a <SCH_Update+0x92>
			}else{
				if(pre == NULL) head = current->next;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d104      	bne.n	80004fa <SCH_Update+0x72>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <SCH_Update+0xa8>)
 80004f6:	6013      	str	r3, [r2, #0]
 80004f8:	e003      	b.n	8000502 <SCH_Update+0x7a>
				else pre->next = current->next;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	695a      	ldr	r2, [r3, #20]
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	615a      	str	r2, [r3, #20]
				current->next = NULL;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2200      	movs	r2, #0
 8000506:	615a      	str	r2, [r3, #20]
				current = (pre == NULL) ? head : pre->next;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d002      	beq.n	8000514 <SCH_Update+0x8c>
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	e001      	b.n	8000518 <SCH_Update+0x90>
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <SCH_Update+0xa8>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	607b      	str	r3, [r7, #4]
	while(current != NULL){
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1c1      	bne.n	80004a4 <SCH_Update+0x1c>
			}
		}
	}
}
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	20000090 	.word	0x20000090
 8000530:	2000008c 	.word	0x2000008c

08000534 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
	if(idx >= SCH_MAX_TASKS){
 8000540:	4b30      	ldr	r3, [pc, #192]	; (8000604 <SCH_Add_Task+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b13      	cmp	r3, #19
 8000546:	d904      	bls.n	8000552 <SCH_Add_Task+0x1e>
		ERROR_CODE_G = ERROR_SCH_TOO_MANY_TASKS;
 8000548:	4b2f      	ldr	r3, [pc, #188]	; (8000608 <SCH_Add_Task+0xd4>)
 800054a:	2265      	movs	r2, #101	; 0x65
 800054c:	601a      	str	r2, [r3, #0]
		return SCH_MAX_TASKS;
 800054e:	2314      	movs	r3, #20
 8000550:	e053      	b.n	80005fa <SCH_Add_Task+0xc6>
	}

	SCH_tasks_G[idx].pTask = pFunction;
 8000552:	4b2c      	ldr	r3, [pc, #176]	; (8000604 <SCH_Add_Task+0xd0>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	492d      	ldr	r1, [pc, #180]	; (800060c <SCH_Add_Task+0xd8>)
 8000558:	4613      	mov	r3, r2
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	4413      	add	r3, r2
 800055e:	00db      	lsls	r3, r3, #3
 8000560:	440b      	add	r3, r1
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[idx].Delay = DELAY;
 8000566:	4b27      	ldr	r3, [pc, #156]	; (8000604 <SCH_Add_Task+0xd0>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	4928      	ldr	r1, [pc, #160]	; (800060c <SCH_Add_Task+0xd8>)
 800056c:	4613      	mov	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	4413      	add	r3, r2
 8000572:	00db      	lsls	r3, r3, #3
 8000574:	440b      	add	r3, r1
 8000576:	3304      	adds	r3, #4
 8000578:	68ba      	ldr	r2, [r7, #8]
 800057a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[idx].Period = PERIOD;
 800057c:	4b21      	ldr	r3, [pc, #132]	; (8000604 <SCH_Add_Task+0xd0>)
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	4922      	ldr	r1, [pc, #136]	; (800060c <SCH_Add_Task+0xd8>)
 8000582:	4613      	mov	r3, r2
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	4413      	add	r3, r2
 8000588:	00db      	lsls	r3, r3, #3
 800058a:	440b      	add	r3, r1
 800058c:	3308      	adds	r3, #8
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[idx].RunMe = 0;
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <SCH_Add_Task+0xd0>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	491d      	ldr	r1, [pc, #116]	; (800060c <SCH_Add_Task+0xd8>)
 8000598:	4613      	mov	r3, r2
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	4413      	add	r3, r2
 800059e:	00db      	lsls	r3, r3, #3
 80005a0:	440b      	add	r3, r1
 80005a2:	330c      	adds	r3, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[idx].TaskID = idx;
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <SCH_Add_Task+0xd0>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <SCH_Add_Task+0xd0>)
 80005ae:	6819      	ldr	r1, [r3, #0]
 80005b0:	4816      	ldr	r0, [pc, #88]	; (800060c <SCH_Add_Task+0xd8>)
 80005b2:	4613      	mov	r3, r2
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	4413      	add	r3, r2
 80005b8:	00db      	lsls	r3, r3, #3
 80005ba:	4403      	add	r3, r0
 80005bc:	3310      	adds	r3, #16
 80005be:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[idx].next = head;
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <SCH_Add_Task+0xd0>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <SCH_Add_Task+0xdc>)
 80005c6:	6819      	ldr	r1, [r3, #0]
 80005c8:	4810      	ldr	r0, [pc, #64]	; (800060c <SCH_Add_Task+0xd8>)
 80005ca:	4613      	mov	r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	4413      	add	r3, r2
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	4403      	add	r3, r0
 80005d4:	3314      	adds	r3, #20
 80005d6:	6019      	str	r1, [r3, #0]
	head = &SCH_tasks_G[idx];
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <SCH_Add_Task+0xd0>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4613      	mov	r3, r2
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	4413      	add	r3, r2
 80005e2:	00db      	lsls	r3, r3, #3
 80005e4:	4a09      	ldr	r2, [pc, #36]	; (800060c <SCH_Add_Task+0xd8>)
 80005e6:	4413      	add	r3, r2
 80005e8:	4a09      	ldr	r2, [pc, #36]	; (8000610 <SCH_Add_Task+0xdc>)
 80005ea:	6013      	str	r3, [r2, #0]

	return ++idx;
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <SCH_Add_Task+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	4a04      	ldr	r2, [pc, #16]	; (8000604 <SCH_Add_Task+0xd0>)
 80005f4:	6013      	str	r3, [r2, #0]
 80005f6:	4b03      	ldr	r3, [pc, #12]	; (8000604 <SCH_Add_Task+0xd0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	20000314 	.word	0x20000314
 8000608:	20000310 	.word	0x20000310
 800060c:	20000130 	.word	0x20000130
 8000610:	2000008c 	.word	0x2000008c

08000614 <SCH_Delete_Task>:
		current = &(*current)->next;
	}
}
*/

void SCH_Delete_Task(sTask *dl_task){
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	if(dl_task == NULL) return;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d02c      	beq.n	800067c <SCH_Delete_Task+0x68>

	if(head == dl_task){
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <SCH_Delete_Task+0x74>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	429a      	cmp	r2, r3
 800062a:	d10a      	bne.n	8000642 <SCH_Delete_Task+0x2e>
		head = dl_task->next;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	4a15      	ldr	r2, [pc, #84]	; (8000688 <SCH_Delete_Task+0x74>)
 8000632:	6013      	str	r3, [r2, #0]
		dl_task->next = NULL;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
		dl_task->pTask = NULL;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
		return;
 8000640:	e01d      	b.n	800067e <SCH_Delete_Task+0x6a>
	}

	sTask* current = head;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <SCH_Delete_Task+0x74>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	60fb      	str	r3, [r7, #12]
	while(current != NULL && current->next != dl_task){
 8000648:	e002      	b.n	8000650 <SCH_Delete_Task+0x3c>
		current = current->next;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	60fb      	str	r3, [r7, #12]
	while(current != NULL && current->next != dl_task){
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d004      	beq.n	8000660 <SCH_Delete_Task+0x4c>
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	429a      	cmp	r2, r3
 800065e:	d1f4      	bne.n	800064a <SCH_Delete_Task+0x36>
	}

	if(current != NULL){
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d00b      	beq.n	800067e <SCH_Delete_Task+0x6a>
		current->next = dl_task->next;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	695a      	ldr	r2, [r3, #20]
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	615a      	str	r2, [r3, #20]
		dl_task->next = NULL;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
		dl_task->pTask = NULL;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	e000      	b.n	800067e <SCH_Delete_Task+0x6a>
	if(dl_task == NULL) return;
 800067c:	bf00      	nop
	}
}
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	2000008c 	.word	0x2000008c

0800068c <SCH_Dispatch_Tasks>:


void SCH_Dispatch_Tasks(void){
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < SCH_MAX_TASKS; i++){
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	e040      	b.n	800071a <SCH_Dispatch_Tasks+0x8e>
		if(SCH_tasks_G[i].RunMe > 0){
 8000698:	4924      	ldr	r1, [pc, #144]	; (800072c <SCH_Dispatch_Tasks+0xa0>)
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	4613      	mov	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4413      	add	r3, r2
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	440b      	add	r3, r1
 80006a6:	330c      	adds	r3, #12
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d032      	beq.n	8000714 <SCH_Dispatch_Tasks+0x88>
			(*SCH_tasks_G[i].pTask)();
 80006ae:	491f      	ldr	r1, [pc, #124]	; (800072c <SCH_Dispatch_Tasks+0xa0>)
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	440b      	add	r3, r1
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4798      	blx	r3
			SCH_tasks_G[i].RunMe--;
 80006c0:	491a      	ldr	r1, [pc, #104]	; (800072c <SCH_Dispatch_Tasks+0xa0>)
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	4613      	mov	r3, r2
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	4413      	add	r3, r2
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	440b      	add	r3, r1
 80006ce:	330c      	adds	r3, #12
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	b2d8      	uxtb	r0, r3
 80006d6:	4915      	ldr	r1, [pc, #84]	; (800072c <SCH_Dispatch_Tasks+0xa0>)
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	4613      	mov	r3, r2
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	4413      	add	r3, r2
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	440b      	add	r3, r1
 80006e4:	330c      	adds	r3, #12
 80006e6:	4602      	mov	r2, r0
 80006e8:	701a      	strb	r2, [r3, #0]

			if(SCH_tasks_G[i].Period == 0) SCH_Delete_Task(&SCH_tasks_G[i]);
 80006ea:	4910      	ldr	r1, [pc, #64]	; (800072c <SCH_Dispatch_Tasks+0xa0>)
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	4613      	mov	r3, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	440b      	add	r3, r1
 80006f8:	3308      	adds	r3, #8
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d109      	bne.n	8000714 <SCH_Dispatch_Tasks+0x88>
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	4613      	mov	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	4413      	add	r3, r2
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	4a08      	ldr	r2, [pc, #32]	; (800072c <SCH_Dispatch_Tasks+0xa0>)
 800070c:	4413      	add	r3, r2
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff80 	bl	8000614 <SCH_Delete_Task>
	for(uint32_t i = 0; i < SCH_MAX_TASKS; i++){
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3301      	adds	r3, #1
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b13      	cmp	r3, #19
 800071e:	d9bb      	bls.n	8000698 <SCH_Dispatch_Tasks+0xc>
		}
	}
}
 8000720:	bf00      	nop
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000130 	.word	0x20000130

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <HAL_MspInit+0x5c>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	4a14      	ldr	r2, [pc, #80]	; (800078c <HAL_MspInit+0x5c>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6193      	str	r3, [r2, #24]
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_MspInit+0x5c>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_MspInit+0x5c>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a0e      	ldr	r2, [pc, #56]	; (800078c <HAL_MspInit+0x5c>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <HAL_MspInit+0x5c>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000766:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <HAL_MspInit+0x60>)
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <HAL_MspInit+0x60>)
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	40021000 	.word	0x40021000
 8000790:	40010000 	.word	0x40010000

08000794 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007a4:	d113      	bne.n	80007ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <HAL_TIM_Base_MspInit+0x44>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <HAL_TIM_Base_MspInit+0x44>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	61d3      	str	r3, [r2, #28]
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_TIM_Base_MspInit+0x44>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	201c      	movs	r0, #28
 80007c4:	f000 faf3 	bl	8000dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007c8:	201c      	movs	r0, #28
 80007ca:	f000 fb0c 	bl	8000de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <HAL_UART_MspInit+0x88>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d12f      	bne.n	800085c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <HAL_UART_MspInit+0x8c>)
 80007fe:	69db      	ldr	r3, [r3, #28]
 8000800:	4a19      	ldr	r2, [pc, #100]	; (8000868 <HAL_UART_MspInit+0x8c>)
 8000802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000806:	61d3      	str	r3, [r2, #28]
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <HAL_UART_MspInit+0x8c>)
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <HAL_UART_MspInit+0x8c>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a13      	ldr	r2, [pc, #76]	; (8000868 <HAL_UART_MspInit+0x8c>)
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <HAL_UART_MspInit+0x8c>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0304 	and.w	r3, r3, #4
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800082c:	2304      	movs	r3, #4
 800082e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4619      	mov	r1, r3
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <HAL_UART_MspInit+0x90>)
 8000840:	f000 faec 	bl	8000e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000844:	2308      	movs	r3, #8
 8000846:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	4619      	mov	r1, r3
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <HAL_UART_MspInit+0x90>)
 8000858:	f000 fae0 	bl	8000e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800085c:	bf00      	nop
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40004400 	.word	0x40004400
 8000868:	40021000 	.word	0x40021000
 800086c:	40010800 	.word	0x40010800

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler+0x4>

08000882 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler+0x4>

0800088e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b6:	f000 f987 	bl	8000bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <TIM2_IRQHandler+0x10>)
 80008c6:	f001 f8ff 	bl	8001ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000a0 	.word	0x200000a0

080008d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	e00a      	b.n	80008fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008e6:	f3af 8000 	nop.w
 80008ea:	4601      	mov	r1, r0
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	1c5a      	adds	r2, r3, #1
 80008f0:	60ba      	str	r2, [r7, #8]
 80008f2:	b2ca      	uxtb	r2, r1
 80008f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3301      	adds	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	429a      	cmp	r2, r3
 8000902:	dbf0      	blt.n	80008e6 <_read+0x12>
	}

return len;
 8000904:	687b      	ldr	r3, [r7, #4]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	e009      	b.n	8000934 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	60ba      	str	r2, [r7, #8]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fc0f 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	3301      	adds	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697a      	ldr	r2, [r7, #20]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	429a      	cmp	r2, r3
 800093a:	dbf1      	blt.n	8000920 <_write+0x12>
	}
	return len;
 800093c:	687b      	ldr	r3, [r7, #4]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <_close>:

int _close(int file)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
	return -1;
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000952:	4618      	mov	r0, r3
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800096c:	605a      	str	r2, [r3, #4]
	return 0;
 800096e:	2300      	movs	r3, #0
}
 8000970:	4618      	mov	r0, r3
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr

0800097a <_isatty>:

int _isatty(int file)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
	return 1;
 8000982:	2301      	movs	r3, #1
}
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr

0800098e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800098e:	b480      	push	{r7}
 8000990:	b085      	sub	sp, #20
 8000992:	af00      	add	r7, sp, #0
 8000994:	60f8      	str	r0, [r7, #12]
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
	return 0;
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
	...

080009a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b0:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <_sbrk+0x5c>)
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <_sbrk+0x60>)
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <_sbrk+0x64>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d102      	bne.n	80009ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <_sbrk+0x64>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <_sbrk+0x68>)
 80009c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d207      	bcs.n	80009e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d8:	f001 fdda 	bl	8002590 <__errno>
 80009dc:	4603      	mov	r3, r0
 80009de:	220c      	movs	r2, #12
 80009e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	e009      	b.n	80009fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ee:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <_sbrk+0x64>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <_sbrk+0x64>)
 80009f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009fa:	68fb      	ldr	r3, [r7, #12]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20002800 	.word	0x20002800
 8000a08:	00000400 	.word	0x00000400
 8000a0c:	20000094 	.word	0x20000094
 8000a10:	20000330 	.word	0x20000330

08000a14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr

08000a20 <blink_int>:
 *  Created on: Oct 26, 2025
 *      Author: tramhoang
 */
#include "task.h"

void blink_int(void){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(led5_GPIO_Port, led5_Pin);
 8000a24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <blink_int+0x14>)
 8000a2a:	f000 fb89 	bl	8001140 <HAL_GPIO_TogglePin>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40010800 	.word	0x40010800

08000a38 <blink_led>:
void blink_led(void){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(led6_GPIO_Port, led6_Pin);
 8000a3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <blink_led+0x14>)
 8000a42:	f000 fb7d 	bl	8001140 <HAL_GPIO_TogglePin>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40010800 	.word	0x40010800

08000a50 <oneshot_1>:

void oneshot_1(void){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(led7_GPIO_Port, led7_Pin);
 8000a54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <oneshot_1+0x14>)
 8000a5a:	f000 fb71 	bl	8001140 <HAL_GPIO_TogglePin>
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40010800 	.word	0x40010800

08000a68 <oneshot_2>:

void oneshot_2(void){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(led8_GPIO_Port, led8_Pin);
 8000a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <oneshot_2+0x14>)
 8000a72:	f000 fb65 	bl	8001140 <HAL_GPIO_TogglePin>
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40010800 	.word	0x40010800

08000a80 <task1>:

void task1(void){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(led0_GPIO_Port, led0_Pin);
 8000a84:	2110      	movs	r1, #16
 8000a86:	4802      	ldr	r0, [pc, #8]	; (8000a90 <task1+0x10>)
 8000a88:	f000 fb5a 	bl	8001140 <HAL_GPIO_TogglePin>
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40010800 	.word	0x40010800

08000a94 <task2>:
void task2(void){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	get_time(2);
 8000a98:	2002      	movs	r0, #2
 8000a9a:	f7ff fb69 	bl	8000170 <get_time>
	HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8000a9e:	2120      	movs	r1, #32
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <task2+0x18>)
 8000aa2:	f000 fb4d 	bl	8001140 <HAL_GPIO_TogglePin>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40010800 	.word	0x40010800

08000ab0 <task3>:

void task3(void){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 8000ab4:	2140      	movs	r1, #64	; 0x40
 8000ab6:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <task3+0x10>)
 8000ab8:	f000 fb42 	bl	8001140 <HAL_GPIO_TogglePin>
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40010800 	.word	0x40010800

08000ac4 <task4>:
void task4(void){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(led3_GPIO_Port, led3_Pin);
 8000ac8:	2180      	movs	r1, #128	; 0x80
 8000aca:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <task4+0x10>)
 8000acc:	f000 fb38 	bl	8001140 <HAL_GPIO_TogglePin>
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40010800 	.word	0x40010800

08000ad8 <task5>:

void task5(void){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(led4_GPIO_Port, led4_Pin);
 8000adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <task5+0x14>)
 8000ae2:	f000 fb2d 	bl	8001140 <HAL_GPIO_TogglePin>
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40010800 	.word	0x40010800

08000af0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af0:	f7ff ff90 	bl	8000a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af4:	480b      	ldr	r0, [pc, #44]	; (8000b24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000af6:	490c      	ldr	r1, [pc, #48]	; (8000b28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000af8:	4a0c      	ldr	r2, [pc, #48]	; (8000b2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000afc:	e002      	b.n	8000b04 <LoopCopyDataInit>

08000afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b02:	3304      	adds	r3, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b08:	d3f9      	bcc.n	8000afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0a:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b0c:	4c09      	ldr	r4, [pc, #36]	; (8000b34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b10:	e001      	b.n	8000b16 <LoopFillZerobss>

08000b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b14:	3204      	adds	r2, #4

08000b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b18:	d3fb      	bcc.n	8000b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f001 fd3f 	bl	800259c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b1e:	f7ff fb45 	bl	80001ac <main>
  bx lr
 8000b22:	4770      	bx	lr
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b2c:	080035b0 	.word	0x080035b0
  ldr r2, =_sbss
 8000b30:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b34:	2000032c 	.word	0x2000032c

08000b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_2_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_Init+0x28>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_Init+0x28>)
 8000b46:	f043 0310 	orr.w	r3, r3, #16
 8000b4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 f923 	bl	8000d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	200f      	movs	r0, #15
 8000b54:	f000 f808 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff fdea 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40022000 	.word	0x40022000

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_InitTick+0x54>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_InitTick+0x58>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f93b 	bl	8000e02 <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00e      	b.n	8000bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d80a      	bhi.n	8000bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f000 f903 	bl	8000dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <HAL_InitTick+0x5c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_IncTick+0x1c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_IncTick+0x20>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a03      	ldr	r2, [pc, #12]	; (8000be8 <HAL_IncTick+0x20>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000318 	.word	0x20000318

08000bec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b02      	ldr	r3, [pc, #8]	; (8000bfc <HAL_GetTick+0x10>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	20000318 	.word	0x20000318

08000c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c32:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	60d3      	str	r3, [r2, #12]
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <__NVIC_GetPriorityGrouping+0x18>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	f003 0307 	and.w	r3, r3, #7
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db0b      	blt.n	8000c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f003 021f 	and.w	r2, r3, #31
 8000c7c:	4906      	ldr	r1, [pc, #24]	; (8000c98 <__NVIC_EnableIRQ+0x34>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	095b      	lsrs	r3, r3, #5
 8000c84:	2001      	movs	r0, #1
 8000c86:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100

08000c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db0a      	blt.n	8000cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	490c      	ldr	r1, [pc, #48]	; (8000ce8 <__NVIC_SetPriority+0x4c>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	0112      	lsls	r2, r2, #4
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc4:	e00a      	b.n	8000cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4908      	ldr	r1, [pc, #32]	; (8000cec <__NVIC_SetPriority+0x50>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	3b04      	subs	r3, #4
 8000cd4:	0112      	lsls	r2, r2, #4
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	440b      	add	r3, r1
 8000cda:	761a      	strb	r2, [r3, #24]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	; 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f1c3 0307 	rsb	r3, r3, #7
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	bf28      	it	cs
 8000d0e:	2304      	movcs	r3, #4
 8000d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3304      	adds	r3, #4
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d902      	bls.n	8000d20 <NVIC_EncodePriority+0x30>
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3b03      	subs	r3, #3
 8000d1e:	e000      	b.n	8000d22 <NVIC_EncodePriority+0x32>
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	401a      	ands	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d38:	f04f 31ff 	mov.w	r1, #4294967295
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	43d9      	mvns	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	4313      	orrs	r3, r2
         );
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3724      	adds	r7, #36	; 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d64:	d301      	bcc.n	8000d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00f      	b.n	8000d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <SysTick_Config+0x40>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d72:	210f      	movs	r1, #15
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f7ff ff90 	bl	8000c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <SysTick_Config+0x40>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SysTick_Config+0x40>)
 8000d84:	2207      	movs	r2, #7
 8000d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	e000e010 	.word	0xe000e010

08000d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff2d 	bl	8000c00 <__NVIC_SetPriorityGrouping>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc0:	f7ff ff42 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	6978      	ldr	r0, [r7, #20]
 8000dcc:	f7ff ff90 	bl	8000cf0 <NVIC_EncodePriority>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff5f 	bl	8000c9c <__NVIC_SetPriority>
}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff35 	bl	8000c64 <__NVIC_EnableIRQ>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ffa2 	bl	8000d54 <SysTick_Config>
 8000e10:	4603      	mov	r3, r0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b08b      	sub	sp, #44	; 0x2c
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2e:	e148      	b.n	80010c2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e30:	2201      	movs	r2, #1
 8000e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	69fa      	ldr	r2, [r7, #28]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f040 8137 	bne.w	80010bc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	4aa3      	ldr	r2, [pc, #652]	; (80010e0 <HAL_GPIO_Init+0x2c4>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d05e      	beq.n	8000f16 <HAL_GPIO_Init+0xfa>
 8000e58:	4aa1      	ldr	r2, [pc, #644]	; (80010e0 <HAL_GPIO_Init+0x2c4>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d875      	bhi.n	8000f4a <HAL_GPIO_Init+0x12e>
 8000e5e:	4aa1      	ldr	r2, [pc, #644]	; (80010e4 <HAL_GPIO_Init+0x2c8>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d058      	beq.n	8000f16 <HAL_GPIO_Init+0xfa>
 8000e64:	4a9f      	ldr	r2, [pc, #636]	; (80010e4 <HAL_GPIO_Init+0x2c8>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d86f      	bhi.n	8000f4a <HAL_GPIO_Init+0x12e>
 8000e6a:	4a9f      	ldr	r2, [pc, #636]	; (80010e8 <HAL_GPIO_Init+0x2cc>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d052      	beq.n	8000f16 <HAL_GPIO_Init+0xfa>
 8000e70:	4a9d      	ldr	r2, [pc, #628]	; (80010e8 <HAL_GPIO_Init+0x2cc>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d869      	bhi.n	8000f4a <HAL_GPIO_Init+0x12e>
 8000e76:	4a9d      	ldr	r2, [pc, #628]	; (80010ec <HAL_GPIO_Init+0x2d0>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d04c      	beq.n	8000f16 <HAL_GPIO_Init+0xfa>
 8000e7c:	4a9b      	ldr	r2, [pc, #620]	; (80010ec <HAL_GPIO_Init+0x2d0>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d863      	bhi.n	8000f4a <HAL_GPIO_Init+0x12e>
 8000e82:	4a9b      	ldr	r2, [pc, #620]	; (80010f0 <HAL_GPIO_Init+0x2d4>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d046      	beq.n	8000f16 <HAL_GPIO_Init+0xfa>
 8000e88:	4a99      	ldr	r2, [pc, #612]	; (80010f0 <HAL_GPIO_Init+0x2d4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d85d      	bhi.n	8000f4a <HAL_GPIO_Init+0x12e>
 8000e8e:	2b12      	cmp	r3, #18
 8000e90:	d82a      	bhi.n	8000ee8 <HAL_GPIO_Init+0xcc>
 8000e92:	2b12      	cmp	r3, #18
 8000e94:	d859      	bhi.n	8000f4a <HAL_GPIO_Init+0x12e>
 8000e96:	a201      	add	r2, pc, #4	; (adr r2, 8000e9c <HAL_GPIO_Init+0x80>)
 8000e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9c:	08000f17 	.word	0x08000f17
 8000ea0:	08000ef1 	.word	0x08000ef1
 8000ea4:	08000f03 	.word	0x08000f03
 8000ea8:	08000f45 	.word	0x08000f45
 8000eac:	08000f4b 	.word	0x08000f4b
 8000eb0:	08000f4b 	.word	0x08000f4b
 8000eb4:	08000f4b 	.word	0x08000f4b
 8000eb8:	08000f4b 	.word	0x08000f4b
 8000ebc:	08000f4b 	.word	0x08000f4b
 8000ec0:	08000f4b 	.word	0x08000f4b
 8000ec4:	08000f4b 	.word	0x08000f4b
 8000ec8:	08000f4b 	.word	0x08000f4b
 8000ecc:	08000f4b 	.word	0x08000f4b
 8000ed0:	08000f4b 	.word	0x08000f4b
 8000ed4:	08000f4b 	.word	0x08000f4b
 8000ed8:	08000f4b 	.word	0x08000f4b
 8000edc:	08000f4b 	.word	0x08000f4b
 8000ee0:	08000ef9 	.word	0x08000ef9
 8000ee4:	08000f0d 	.word	0x08000f0d
 8000ee8:	4a82      	ldr	r2, [pc, #520]	; (80010f4 <HAL_GPIO_Init+0x2d8>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d013      	beq.n	8000f16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eee:	e02c      	b.n	8000f4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	623b      	str	r3, [r7, #32]
          break;
 8000ef6:	e029      	b.n	8000f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	3304      	adds	r3, #4
 8000efe:	623b      	str	r3, [r7, #32]
          break;
 8000f00:	e024      	b.n	8000f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	3308      	adds	r3, #8
 8000f08:	623b      	str	r3, [r7, #32]
          break;
 8000f0a:	e01f      	b.n	8000f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	330c      	adds	r3, #12
 8000f12:	623b      	str	r3, [r7, #32]
          break;
 8000f14:	e01a      	b.n	8000f4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d102      	bne.n	8000f24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f1e:	2304      	movs	r3, #4
 8000f20:	623b      	str	r3, [r7, #32]
          break;
 8000f22:	e013      	b.n	8000f4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d105      	bne.n	8000f38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f2c:	2308      	movs	r3, #8
 8000f2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69fa      	ldr	r2, [r7, #28]
 8000f34:	611a      	str	r2, [r3, #16]
          break;
 8000f36:	e009      	b.n	8000f4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f38:	2308      	movs	r3, #8
 8000f3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	615a      	str	r2, [r3, #20]
          break;
 8000f42:	e003      	b.n	8000f4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
          break;
 8000f48:	e000      	b.n	8000f4c <HAL_GPIO_Init+0x130>
          break;
 8000f4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	2bff      	cmp	r3, #255	; 0xff
 8000f50:	d801      	bhi.n	8000f56 <HAL_GPIO_Init+0x13a>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	e001      	b.n	8000f5a <HAL_GPIO_Init+0x13e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	2bff      	cmp	r3, #255	; 0xff
 8000f60:	d802      	bhi.n	8000f68 <HAL_GPIO_Init+0x14c>
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	e002      	b.n	8000f6e <HAL_GPIO_Init+0x152>
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6a:	3b08      	subs	r3, #8
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	210f      	movs	r1, #15
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	401a      	ands	r2, r3
 8000f80:	6a39      	ldr	r1, [r7, #32]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 8090 	beq.w	80010bc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f9c:	4b56      	ldr	r3, [pc, #344]	; (80010f8 <HAL_GPIO_Init+0x2dc>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a55      	ldr	r2, [pc, #340]	; (80010f8 <HAL_GPIO_Init+0x2dc>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b53      	ldr	r3, [pc, #332]	; (80010f8 <HAL_GPIO_Init+0x2dc>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fb4:	4a51      	ldr	r2, [pc, #324]	; (80010fc <HAL_GPIO_Init+0x2e0>)
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3302      	adds	r3, #2
 8000fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	220f      	movs	r2, #15
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a49      	ldr	r2, [pc, #292]	; (8001100 <HAL_GPIO_Init+0x2e4>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d00d      	beq.n	8000ffc <HAL_GPIO_Init+0x1e0>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a48      	ldr	r2, [pc, #288]	; (8001104 <HAL_GPIO_Init+0x2e8>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d007      	beq.n	8000ff8 <HAL_GPIO_Init+0x1dc>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a47      	ldr	r2, [pc, #284]	; (8001108 <HAL_GPIO_Init+0x2ec>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d101      	bne.n	8000ff4 <HAL_GPIO_Init+0x1d8>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	e004      	b.n	8000ffe <HAL_GPIO_Init+0x1e2>
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e002      	b.n	8000ffe <HAL_GPIO_Init+0x1e2>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <HAL_GPIO_Init+0x1e2>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001000:	f002 0203 	and.w	r2, r2, #3
 8001004:	0092      	lsls	r2, r2, #2
 8001006:	4093      	lsls	r3, r2
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	4313      	orrs	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800100e:	493b      	ldr	r1, [pc, #236]	; (80010fc <HAL_GPIO_Init+0x2e0>)
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	3302      	adds	r3, #2
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d006      	beq.n	8001036 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001028:	4b38      	ldr	r3, [pc, #224]	; (800110c <HAL_GPIO_Init+0x2f0>)
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	4937      	ldr	r1, [pc, #220]	; (800110c <HAL_GPIO_Init+0x2f0>)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	608b      	str	r3, [r1, #8]
 8001034:	e006      	b.n	8001044 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001036:	4b35      	ldr	r3, [pc, #212]	; (800110c <HAL_GPIO_Init+0x2f0>)
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	43db      	mvns	r3, r3
 800103e:	4933      	ldr	r1, [pc, #204]	; (800110c <HAL_GPIO_Init+0x2f0>)
 8001040:	4013      	ands	r3, r2
 8001042:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d006      	beq.n	800105e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001050:	4b2e      	ldr	r3, [pc, #184]	; (800110c <HAL_GPIO_Init+0x2f0>)
 8001052:	68da      	ldr	r2, [r3, #12]
 8001054:	492d      	ldr	r1, [pc, #180]	; (800110c <HAL_GPIO_Init+0x2f0>)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	60cb      	str	r3, [r1, #12]
 800105c:	e006      	b.n	800106c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800105e:	4b2b      	ldr	r3, [pc, #172]	; (800110c <HAL_GPIO_Init+0x2f0>)
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	43db      	mvns	r3, r3
 8001066:	4929      	ldr	r1, [pc, #164]	; (800110c <HAL_GPIO_Init+0x2f0>)
 8001068:	4013      	ands	r3, r2
 800106a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d006      	beq.n	8001086 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <HAL_GPIO_Init+0x2f0>)
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	4923      	ldr	r1, [pc, #140]	; (800110c <HAL_GPIO_Init+0x2f0>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	604b      	str	r3, [r1, #4]
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001086:	4b21      	ldr	r3, [pc, #132]	; (800110c <HAL_GPIO_Init+0x2f0>)
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	43db      	mvns	r3, r3
 800108e:	491f      	ldr	r1, [pc, #124]	; (800110c <HAL_GPIO_Init+0x2f0>)
 8001090:	4013      	ands	r3, r2
 8001092:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d006      	beq.n	80010ae <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010a0:	4b1a      	ldr	r3, [pc, #104]	; (800110c <HAL_GPIO_Init+0x2f0>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4919      	ldr	r1, [pc, #100]	; (800110c <HAL_GPIO_Init+0x2f0>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	600b      	str	r3, [r1, #0]
 80010ac:	e006      	b.n	80010bc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_GPIO_Init+0x2f0>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	4915      	ldr	r1, [pc, #84]	; (800110c <HAL_GPIO_Init+0x2f0>)
 80010b8:	4013      	ands	r3, r2
 80010ba:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	3301      	adds	r3, #1
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	fa22 f303 	lsr.w	r3, r2, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f47f aeaf 	bne.w	8000e30 <HAL_GPIO_Init+0x14>
  }
}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	372c      	adds	r7, #44	; 0x2c
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	10320000 	.word	0x10320000
 80010e4:	10310000 	.word	0x10310000
 80010e8:	10220000 	.word	0x10220000
 80010ec:	10210000 	.word	0x10210000
 80010f0:	10120000 	.word	0x10120000
 80010f4:	10110000 	.word	0x10110000
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010000 	.word	0x40010000
 8001100:	40010800 	.word	0x40010800
 8001104:	40010c00 	.word	0x40010c00
 8001108:	40011000 	.word	0x40011000
 800110c:	40010400 	.word	0x40010400

08001110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
 800111c:	4613      	mov	r3, r2
 800111e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001120:	787b      	ldrb	r3, [r7, #1]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800112c:	e003      	b.n	8001136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800112e:	887b      	ldrh	r3, [r7, #2]
 8001130:	041a      	lsls	r2, r3, #16
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	611a      	str	r2, [r3, #16]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4013      	ands	r3, r2
 8001158:	041a      	lsls	r2, r3, #16
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43d9      	mvns	r1, r3
 800115e:	887b      	ldrh	r3, [r7, #2]
 8001160:	400b      	ands	r3, r1
 8001162:	431a      	orrs	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	611a      	str	r2, [r3, #16]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
	...

08001174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e26c      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8087 	beq.w	80012a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001194:	4b92      	ldr	r3, [pc, #584]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	2b04      	cmp	r3, #4
 800119e:	d00c      	beq.n	80011ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011a0:	4b8f      	ldr	r3, [pc, #572]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	d112      	bne.n	80011d2 <HAL_RCC_OscConfig+0x5e>
 80011ac:	4b8c      	ldr	r3, [pc, #560]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b8:	d10b      	bne.n	80011d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ba:	4b89      	ldr	r3, [pc, #548]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d06c      	beq.n	80012a0 <HAL_RCC_OscConfig+0x12c>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d168      	bne.n	80012a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e246      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011da:	d106      	bne.n	80011ea <HAL_RCC_OscConfig+0x76>
 80011dc:	4b80      	ldr	r3, [pc, #512]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a7f      	ldr	r2, [pc, #508]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e02e      	b.n	8001248 <HAL_RCC_OscConfig+0xd4>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10c      	bne.n	800120c <HAL_RCC_OscConfig+0x98>
 80011f2:	4b7b      	ldr	r3, [pc, #492]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a7a      	ldr	r2, [pc, #488]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	4b78      	ldr	r3, [pc, #480]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a77      	ldr	r2, [pc, #476]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001204:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e01d      	b.n	8001248 <HAL_RCC_OscConfig+0xd4>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001214:	d10c      	bne.n	8001230 <HAL_RCC_OscConfig+0xbc>
 8001216:	4b72      	ldr	r3, [pc, #456]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a71      	ldr	r2, [pc, #452]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800121c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	4b6f      	ldr	r3, [pc, #444]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a6e      	ldr	r2, [pc, #440]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e00b      	b.n	8001248 <HAL_RCC_OscConfig+0xd4>
 8001230:	4b6b      	ldr	r3, [pc, #428]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a6a      	ldr	r2, [pc, #424]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b68      	ldr	r3, [pc, #416]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a67      	ldr	r2, [pc, #412]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001246:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d013      	beq.n	8001278 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fccc 	bl	8000bec <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fcc8 	bl	8000bec <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	; 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e1fa      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	4b5d      	ldr	r3, [pc, #372]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f0      	beq.n	8001258 <HAL_RCC_OscConfig+0xe4>
 8001276:	e014      	b.n	80012a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fcb8 	bl	8000bec <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001280:	f7ff fcb4 	bl	8000bec <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b64      	cmp	r3, #100	; 0x64
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e1e6      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001292:	4b53      	ldr	r3, [pc, #332]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x10c>
 800129e:	e000      	b.n	80012a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d063      	beq.n	8001376 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ae:	4b4c      	ldr	r3, [pc, #304]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00b      	beq.n	80012d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012ba:	4b49      	ldr	r3, [pc, #292]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d11c      	bne.n	8001300 <HAL_RCC_OscConfig+0x18c>
 80012c6:	4b46      	ldr	r3, [pc, #280]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d116      	bne.n	8001300 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d2:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d005      	beq.n	80012ea <HAL_RCC_OscConfig+0x176>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d001      	beq.n	80012ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e1ba      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ea:	4b3d      	ldr	r3, [pc, #244]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	4939      	ldr	r1, [pc, #228]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fe:	e03a      	b.n	8001376 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d020      	beq.n	800134a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001308:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130e:	f7ff fc6d 	bl	8000bec <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001316:	f7ff fc69 	bl	8000bec <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e19b      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001328:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001334:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4927      	ldr	r1, [pc, #156]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001344:	4313      	orrs	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
 8001348:	e015      	b.n	8001376 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fc4c 	bl	8000bec <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001358:	f7ff fc48 	bl	8000bec <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e17a      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d03a      	beq.n	80013f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d019      	beq.n	80013be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <HAL_RCC_OscConfig+0x274>)
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001390:	f7ff fc2c 	bl	8000bec <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001398:	f7ff fc28 	bl	8000bec <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e15a      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013b6:	2001      	movs	r0, #1
 80013b8:	f000 facc 	bl	8001954 <RCC_Delay>
 80013bc:	e01c      	b.n	80013f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_RCC_OscConfig+0x274>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c4:	f7ff fc12 	bl	8000bec <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ca:	e00f      	b.n	80013ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013cc:	f7ff fc0e 	bl	8000bec <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d908      	bls.n	80013ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e140      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000
 80013e4:	42420000 	.word	0x42420000
 80013e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ec:	4b9e      	ldr	r3, [pc, #632]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1e9      	bne.n	80013cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80a6 	beq.w	8001552 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800140a:	4b97      	ldr	r3, [pc, #604]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10d      	bne.n	8001432 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	4b94      	ldr	r3, [pc, #592]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	4a93      	ldr	r2, [pc, #588]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001420:	61d3      	str	r3, [r2, #28]
 8001422:	4b91      	ldr	r3, [pc, #580]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800142e:	2301      	movs	r3, #1
 8001430:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001432:	4b8e      	ldr	r3, [pc, #568]	; (800166c <HAL_RCC_OscConfig+0x4f8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143a:	2b00      	cmp	r3, #0
 800143c:	d118      	bne.n	8001470 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800143e:	4b8b      	ldr	r3, [pc, #556]	; (800166c <HAL_RCC_OscConfig+0x4f8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a8a      	ldr	r2, [pc, #552]	; (800166c <HAL_RCC_OscConfig+0x4f8>)
 8001444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800144a:	f7ff fbcf 	bl	8000bec <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001452:	f7ff fbcb 	bl	8000bec <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b64      	cmp	r3, #100	; 0x64
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e0fd      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001464:	4b81      	ldr	r3, [pc, #516]	; (800166c <HAL_RCC_OscConfig+0x4f8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d106      	bne.n	8001486 <HAL_RCC_OscConfig+0x312>
 8001478:	4b7b      	ldr	r3, [pc, #492]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	4a7a      	ldr	r2, [pc, #488]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6213      	str	r3, [r2, #32]
 8001484:	e02d      	b.n	80014e2 <HAL_RCC_OscConfig+0x36e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x334>
 800148e:	4b76      	ldr	r3, [pc, #472]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4a75      	ldr	r2, [pc, #468]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 8001494:	f023 0301 	bic.w	r3, r3, #1
 8001498:	6213      	str	r3, [r2, #32]
 800149a:	4b73      	ldr	r3, [pc, #460]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	4a72      	ldr	r2, [pc, #456]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80014a0:	f023 0304 	bic.w	r3, r3, #4
 80014a4:	6213      	str	r3, [r2, #32]
 80014a6:	e01c      	b.n	80014e2 <HAL_RCC_OscConfig+0x36e>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	d10c      	bne.n	80014ca <HAL_RCC_OscConfig+0x356>
 80014b0:	4b6d      	ldr	r3, [pc, #436]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	4a6c      	ldr	r2, [pc, #432]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	6213      	str	r3, [r2, #32]
 80014bc:	4b6a      	ldr	r3, [pc, #424]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4a69      	ldr	r2, [pc, #420]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6213      	str	r3, [r2, #32]
 80014c8:	e00b      	b.n	80014e2 <HAL_RCC_OscConfig+0x36e>
 80014ca:	4b67      	ldr	r3, [pc, #412]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	4a66      	ldr	r2, [pc, #408]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	6213      	str	r3, [r2, #32]
 80014d6:	4b64      	ldr	r3, [pc, #400]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4a63      	ldr	r2, [pc, #396]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80014dc:	f023 0304 	bic.w	r3, r3, #4
 80014e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d015      	beq.n	8001516 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fb7f 	bl	8000bec <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f0:	e00a      	b.n	8001508 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f2:	f7ff fb7b 	bl	8000bec <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001500:	4293      	cmp	r3, r2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e0ab      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001508:	4b57      	ldr	r3, [pc, #348]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0ee      	beq.n	80014f2 <HAL_RCC_OscConfig+0x37e>
 8001514:	e014      	b.n	8001540 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff fb69 	bl	8000bec <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800151c:	e00a      	b.n	8001534 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800151e:	f7ff fb65 	bl	8000bec <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	f241 3288 	movw	r2, #5000	; 0x1388
 800152c:	4293      	cmp	r3, r2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e095      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001534:	4b4c      	ldr	r3, [pc, #304]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1ee      	bne.n	800151e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d105      	bne.n	8001552 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001546:	4b48      	ldr	r3, [pc, #288]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a47      	ldr	r2, [pc, #284]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 800154c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001550:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8081 	beq.w	800165e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800155c:	4b42      	ldr	r3, [pc, #264]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b08      	cmp	r3, #8
 8001566:	d061      	beq.n	800162c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d146      	bne.n	80015fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001570:	4b3f      	ldr	r3, [pc, #252]	; (8001670 <HAL_RCC_OscConfig+0x4fc>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001576:	f7ff fb39 	bl	8000bec <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157e:	f7ff fb35 	bl	8000bec <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e067      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001590:	4b35      	ldr	r3, [pc, #212]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f0      	bne.n	800157e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a4:	d108      	bne.n	80015b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015a6:	4b30      	ldr	r3, [pc, #192]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	492d      	ldr	r1, [pc, #180]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b8:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a19      	ldr	r1, [r3, #32]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	430b      	orrs	r3, r1
 80015ca:	4927      	ldr	r1, [pc, #156]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d0:	4b27      	ldr	r3, [pc, #156]	; (8001670 <HAL_RCC_OscConfig+0x4fc>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d6:	f7ff fb09 	bl	8000bec <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015de:	f7ff fb05 	bl	8000bec <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e037      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f0:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x46a>
 80015fc:	e02f      	b.n	800165e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <HAL_RCC_OscConfig+0x4fc>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff faf2 	bl	8000bec <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff faee 	bl	8000bec <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e020      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x498>
 800162a:	e018      	b.n	800165e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e013      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	429a      	cmp	r2, r3
 800164a:	d106      	bne.n	800165a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001656:	429a      	cmp	r2, r3
 8001658:	d001      	beq.n	800165e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40021000 	.word	0x40021000
 800166c:	40007000 	.word	0x40007000
 8001670:	42420060 	.word	0x42420060

08001674 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0d0      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001688:	4b6a      	ldr	r3, [pc, #424]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d910      	bls.n	80016b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b67      	ldr	r3, [pc, #412]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 0207 	bic.w	r2, r3, #7
 800169e:	4965      	ldr	r1, [pc, #404]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a6:	4b63      	ldr	r3, [pc, #396]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0b8      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d020      	beq.n	8001706 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d0:	4b59      	ldr	r3, [pc, #356]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a58      	ldr	r2, [pc, #352]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e8:	4b53      	ldr	r3, [pc, #332]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4a52      	ldr	r2, [pc, #328]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f4:	4b50      	ldr	r3, [pc, #320]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	494d      	ldr	r1, [pc, #308]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	4313      	orrs	r3, r2
 8001704:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d040      	beq.n	8001794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	4b47      	ldr	r3, [pc, #284]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d115      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e07f      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001732:	4b41      	ldr	r3, [pc, #260]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d109      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e073      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001742:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e06b      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001752:	4b39      	ldr	r3, [pc, #228]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f023 0203 	bic.w	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4936      	ldr	r1, [pc, #216]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001764:	f7ff fa42 	bl	8000bec <HAL_GetTick>
 8001768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176a:	e00a      	b.n	8001782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176c:	f7ff fa3e 	bl	8000bec <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e053      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001782:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 020c 	and.w	r2, r3, #12
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	429a      	cmp	r2, r3
 8001792:	d1eb      	bne.n	800176c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d210      	bcs.n	80017c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b24      	ldr	r3, [pc, #144]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 0207 	bic.w	r2, r3, #7
 80017aa:	4922      	ldr	r1, [pc, #136]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e032      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4916      	ldr	r1, [pc, #88]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	490e      	ldr	r1, [pc, #56]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001802:	f000 f821 	bl	8001848 <HAL_RCC_GetSysClockFreq>
 8001806:	4602      	mov	r2, r0
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	490a      	ldr	r1, [pc, #40]	; (800183c <HAL_RCC_ClockConfig+0x1c8>)
 8001814:	5ccb      	ldrb	r3, [r1, r3]
 8001816:	fa22 f303 	lsr.w	r3, r2, r3
 800181a:	4a09      	ldr	r2, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1cc>)
 800181c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_RCC_ClockConfig+0x1d0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f9a0 	bl	8000b68 <HAL_InitTick>

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40022000 	.word	0x40022000
 8001838:	40021000 	.word	0x40021000
 800183c:	080034e4 	.word	0x080034e4
 8001840:	20000000 	.word	0x20000000
 8001844:	20000004 	.word	0x20000004

08001848 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b04      	cmp	r3, #4
 8001870:	d002      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0x30>
 8001872:	2b08      	cmp	r3, #8
 8001874:	d003      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x36>
 8001876:	e027      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800187a:	613b      	str	r3, [r7, #16]
      break;
 800187c:	e027      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	0c9b      	lsrs	r3, r3, #18
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	4a17      	ldr	r2, [pc, #92]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001888:	5cd3      	ldrb	r3, [r2, r3]
 800188a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d010      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	0c5b      	lsrs	r3, r3, #17
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018a2:	5cd3      	ldrb	r3, [r2, r3]
 80018a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a0d      	ldr	r2, [pc, #52]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80018aa:	fb02 f203 	mul.w	r2, r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e004      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a0c      	ldr	r2, [pc, #48]	; (80018ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80018bc:	fb02 f303 	mul.w	r3, r2, r3
 80018c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	613b      	str	r3, [r7, #16]
      break;
 80018c6:	e002      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ca:	613b      	str	r3, [r7, #16]
      break;
 80018cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ce:	693b      	ldr	r3, [r7, #16]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
 80018e0:	007a1200 	.word	0x007a1200
 80018e4:	080034fc 	.word	0x080034fc
 80018e8:	0800350c 	.word	0x0800350c
 80018ec:	003d0900 	.word	0x003d0900

080018f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f4:	4b02      	ldr	r3, [pc, #8]	; (8001900 <HAL_RCC_GetHCLKFreq+0x10>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	20000000 	.word	0x20000000

08001904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001908:	f7ff fff2 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 800190c:	4602      	mov	r2, r0
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	4903      	ldr	r1, [pc, #12]	; (8001928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800191a:	5ccb      	ldrb	r3, [r1, r3]
 800191c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001920:	4618      	mov	r0, r3
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000
 8001928:	080034f4 	.word	0x080034f4

0800192c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001930:	f7ff ffde 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 8001934:	4602      	mov	r2, r0
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	0adb      	lsrs	r3, r3, #11
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	4903      	ldr	r1, [pc, #12]	; (8001950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001942:	5ccb      	ldrb	r3, [r1, r3]
 8001944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001948:	4618      	mov	r0, r3
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40021000 	.word	0x40021000
 8001950:	080034f4 	.word	0x080034f4

08001954 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800195c:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <RCC_Delay+0x34>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0a      	ldr	r2, [pc, #40]	; (800198c <RCC_Delay+0x38>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	0a5b      	lsrs	r3, r3, #9
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001970:	bf00      	nop
  }
  while (Delay --);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1e5a      	subs	r2, r3, #1
 8001976:	60fa      	str	r2, [r7, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f9      	bne.n	8001970 <RCC_Delay+0x1c>
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	20000000 	.word	0x20000000
 800198c:	10624dd3 	.word	0x10624dd3

08001990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e041      	b.n	8001a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d106      	bne.n	80019bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7fe feec 	bl	8000794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2202      	movs	r2, #2
 80019c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3304      	adds	r3, #4
 80019cc:	4619      	mov	r1, r3
 80019ce:	4610      	mov	r0, r2
 80019d0:	f000 fa56 	bl	8001e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d001      	beq.n	8001a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e035      	b.n	8001ab4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a16      	ldr	r2, [pc, #88]	; (8001ac0 <HAL_TIM_Base_Start_IT+0x90>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d009      	beq.n	8001a7e <HAL_TIM_Base_Start_IT+0x4e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a72:	d004      	beq.n	8001a7e <HAL_TIM_Base_Start_IT+0x4e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <HAL_TIM_Base_Start_IT+0x94>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d111      	bne.n	8001aa2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2b06      	cmp	r3, #6
 8001a8e:	d010      	beq.n	8001ab2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aa0:	e007      	b.n	8001ab2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 0201 	orr.w	r2, r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40012c00 	.word	0x40012c00
 8001ac4:	40000400 	.word	0x40000400

08001ac8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d020      	beq.n	8001b2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d01b      	beq.n	8001b2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f06f 0202 	mvn.w	r2, #2
 8001afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f998 	bl	8001e48 <HAL_TIM_IC_CaptureCallback>
 8001b18:	e005      	b.n	8001b26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f98b 	bl	8001e36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f99a 	bl	8001e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d020      	beq.n	8001b78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01b      	beq.n	8001b78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0204 	mvn.w	r2, #4
 8001b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f972 	bl	8001e48 <HAL_TIM_IC_CaptureCallback>
 8001b64:	e005      	b.n	8001b72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f965 	bl	8001e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f974 	bl	8001e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d020      	beq.n	8001bc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d01b      	beq.n	8001bc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f06f 0208 	mvn.w	r2, #8
 8001b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2204      	movs	r2, #4
 8001b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f94c 	bl	8001e48 <HAL_TIM_IC_CaptureCallback>
 8001bb0:	e005      	b.n	8001bbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f93f 	bl	8001e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f94e 	bl	8001e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d020      	beq.n	8001c10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d01b      	beq.n	8001c10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f06f 0210 	mvn.w	r2, #16
 8001be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2208      	movs	r2, #8
 8001be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f926 	bl	8001e48 <HAL_TIM_IC_CaptureCallback>
 8001bfc:	e005      	b.n	8001c0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f919 	bl	8001e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f928 	bl	8001e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00c      	beq.n	8001c34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d007      	beq.n	8001c34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0201 	mvn.w	r2, #1
 8001c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7fe fab2 	bl	8000198 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00c      	beq.n	8001c58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d007      	beq.n	8001c58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fa6f 	bl	8002136 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00c      	beq.n	8001c7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d007      	beq.n	8001c7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f8f8 	bl	8001e6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00c      	beq.n	8001ca0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f003 0320 	and.w	r3, r3, #32
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d007      	beq.n	8001ca0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0220 	mvn.w	r2, #32
 8001c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 fa42 	bl	8002124 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_TIM_ConfigClockSource+0x1c>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e0b4      	b.n	8001e2e <HAL_TIM_ConfigClockSource+0x186>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cfc:	d03e      	beq.n	8001d7c <HAL_TIM_ConfigClockSource+0xd4>
 8001cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d02:	f200 8087 	bhi.w	8001e14 <HAL_TIM_ConfigClockSource+0x16c>
 8001d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d0a:	f000 8086 	beq.w	8001e1a <HAL_TIM_ConfigClockSource+0x172>
 8001d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d12:	d87f      	bhi.n	8001e14 <HAL_TIM_ConfigClockSource+0x16c>
 8001d14:	2b70      	cmp	r3, #112	; 0x70
 8001d16:	d01a      	beq.n	8001d4e <HAL_TIM_ConfigClockSource+0xa6>
 8001d18:	2b70      	cmp	r3, #112	; 0x70
 8001d1a:	d87b      	bhi.n	8001e14 <HAL_TIM_ConfigClockSource+0x16c>
 8001d1c:	2b60      	cmp	r3, #96	; 0x60
 8001d1e:	d050      	beq.n	8001dc2 <HAL_TIM_ConfigClockSource+0x11a>
 8001d20:	2b60      	cmp	r3, #96	; 0x60
 8001d22:	d877      	bhi.n	8001e14 <HAL_TIM_ConfigClockSource+0x16c>
 8001d24:	2b50      	cmp	r3, #80	; 0x50
 8001d26:	d03c      	beq.n	8001da2 <HAL_TIM_ConfigClockSource+0xfa>
 8001d28:	2b50      	cmp	r3, #80	; 0x50
 8001d2a:	d873      	bhi.n	8001e14 <HAL_TIM_ConfigClockSource+0x16c>
 8001d2c:	2b40      	cmp	r3, #64	; 0x40
 8001d2e:	d058      	beq.n	8001de2 <HAL_TIM_ConfigClockSource+0x13a>
 8001d30:	2b40      	cmp	r3, #64	; 0x40
 8001d32:	d86f      	bhi.n	8001e14 <HAL_TIM_ConfigClockSource+0x16c>
 8001d34:	2b30      	cmp	r3, #48	; 0x30
 8001d36:	d064      	beq.n	8001e02 <HAL_TIM_ConfigClockSource+0x15a>
 8001d38:	2b30      	cmp	r3, #48	; 0x30
 8001d3a:	d86b      	bhi.n	8001e14 <HAL_TIM_ConfigClockSource+0x16c>
 8001d3c:	2b20      	cmp	r3, #32
 8001d3e:	d060      	beq.n	8001e02 <HAL_TIM_ConfigClockSource+0x15a>
 8001d40:	2b20      	cmp	r3, #32
 8001d42:	d867      	bhi.n	8001e14 <HAL_TIM_ConfigClockSource+0x16c>
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d05c      	beq.n	8001e02 <HAL_TIM_ConfigClockSource+0x15a>
 8001d48:	2b10      	cmp	r3, #16
 8001d4a:	d05a      	beq.n	8001e02 <HAL_TIM_ConfigClockSource+0x15a>
 8001d4c:	e062      	b.n	8001e14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6899      	ldr	r1, [r3, #8]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f000 f96a 	bl	8002036 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	609a      	str	r2, [r3, #8]
      break;
 8001d7a:	e04f      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	6899      	ldr	r1, [r3, #8]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f000 f953 	bl	8002036 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d9e:	609a      	str	r2, [r3, #8]
      break;
 8001da0:	e03c      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	6859      	ldr	r1, [r3, #4]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	461a      	mov	r2, r3
 8001db0:	f000 f8ca 	bl	8001f48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2150      	movs	r1, #80	; 0x50
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 f921 	bl	8002002 <TIM_ITRx_SetConfig>
      break;
 8001dc0:	e02c      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	6859      	ldr	r1, [r3, #4]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	f000 f8e8 	bl	8001fa4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2160      	movs	r1, #96	; 0x60
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 f911 	bl	8002002 <TIM_ITRx_SetConfig>
      break;
 8001de0:	e01c      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6859      	ldr	r1, [r3, #4]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	461a      	mov	r2, r3
 8001df0:	f000 f8aa 	bl	8001f48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2140      	movs	r1, #64	; 0x40
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f901 	bl	8002002 <TIM_ITRx_SetConfig>
      break;
 8001e00:	e00c      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	f000 f8f8 	bl	8002002 <TIM_ITRx_SetConfig>
      break;
 8001e12:	e003      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
      break;
 8001e18:	e000      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001e1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
	...

08001e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a2b      	ldr	r2, [pc, #172]	; (8001f40 <TIM_Base_SetConfig+0xc0>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d007      	beq.n	8001ea8 <TIM_Base_SetConfig+0x28>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9e:	d003      	beq.n	8001ea8 <TIM_Base_SetConfig+0x28>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a28      	ldr	r2, [pc, #160]	; (8001f44 <TIM_Base_SetConfig+0xc4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d108      	bne.n	8001eba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a20      	ldr	r2, [pc, #128]	; (8001f40 <TIM_Base_SetConfig+0xc0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d007      	beq.n	8001ed2 <TIM_Base_SetConfig+0x52>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec8:	d003      	beq.n	8001ed2 <TIM_Base_SetConfig+0x52>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <TIM_Base_SetConfig+0xc4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d108      	bne.n	8001ee4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <TIM_Base_SetConfig+0xc0>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d103      	bne.n	8001f18 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d005      	beq.n	8001f36 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f023 0201 	bic.w	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	611a      	str	r2, [r3, #16]
  }
}
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr
 8001f40:	40012c00 	.word	0x40012c00
 8001f44:	40000400 	.word	0x40000400

08001f48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	f023 0201 	bic.w	r2, r3, #1
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f023 030a 	bic.w	r3, r3, #10
 8001f84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	621a      	str	r2, [r3, #32]
}
 8001f9a:	bf00      	nop
 8001f9c:	371c      	adds	r7, #28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	f023 0210 	bic.w	r2, r3, #16
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	031b      	lsls	r3, r3, #12
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	621a      	str	r2, [r3, #32]
}
 8001ff8:	bf00      	nop
 8001ffa:	371c      	adds	r7, #28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr

08002002 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002002:	b480      	push	{r7}
 8002004:	b085      	sub	sp, #20
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002018:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	f043 0307 	orr.w	r3, r3, #7
 8002024:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	609a      	str	r2, [r3, #8]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr

08002036 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002036:	b480      	push	{r7}
 8002038:	b087      	sub	sp, #28
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002050:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	021a      	lsls	r2, r3, #8
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	431a      	orrs	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	4313      	orrs	r3, r2
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4313      	orrs	r3, r2
 8002062:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	609a      	str	r2, [r3, #8]
}
 800206a:	bf00      	nop
 800206c:	371c      	adds	r7, #28
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002088:	2302      	movs	r3, #2
 800208a:	e041      	b.n	8002110 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a14      	ldr	r2, [pc, #80]	; (800211c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d009      	beq.n	80020e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d8:	d004      	beq.n	80020e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a10      	ldr	r2, [pc, #64]	; (8002120 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d10c      	bne.n	80020fe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40012c00 	.word	0x40012c00
 8002120:	40000400 	.word	0x40000400

08002124 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e042      	b.n	80021e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe fb34 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2224      	movs	r2, #36	; 0x24
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800218a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f971 	bl	8002474 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b20      	cmp	r3, #32
 8002206:	d175      	bne.n	80022f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_UART_Transmit+0x2c>
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e06e      	b.n	80022f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2221      	movs	r2, #33	; 0x21
 8002222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002226:	f7fe fce1 	bl	8000bec <HAL_GetTick>
 800222a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	88fa      	ldrh	r2, [r7, #6]
 8002230:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	88fa      	ldrh	r2, [r7, #6]
 8002236:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002240:	d108      	bne.n	8002254 <HAL_UART_Transmit+0x6c>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d104      	bne.n	8002254 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	e003      	b.n	800225c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800225c:	e02e      	b.n	80022bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2200      	movs	r2, #0
 8002266:	2180      	movs	r1, #128	; 0x80
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f848 	bl	80022fe <UART_WaitOnFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e03a      	b.n	80022f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10b      	bne.n	800229e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002294:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	3302      	adds	r3, #2
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	e007      	b.n	80022ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	781a      	ldrb	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	3301      	adds	r3, #1
 80022ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1cb      	bne.n	800225e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2200      	movs	r2, #0
 80022ce:	2140      	movs	r1, #64	; 0x40
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 f814 	bl	80022fe <UART_WaitOnFlagUntilTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d005      	beq.n	80022e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e006      	b.n	80022f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	e000      	b.n	80022f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80022f4:	2302      	movs	r3, #2
  }
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	4613      	mov	r3, r2
 800230c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800230e:	e03b      	b.n	8002388 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d037      	beq.n	8002388 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002318:	f7fe fc68 	bl	8000bec <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	6a3a      	ldr	r2, [r7, #32]
 8002324:	429a      	cmp	r2, r3
 8002326:	d302      	bcc.n	800232e <UART_WaitOnFlagUntilTimeout+0x30>
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e03a      	b.n	80023a8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d023      	beq.n	8002388 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b80      	cmp	r3, #128	; 0x80
 8002344:	d020      	beq.n	8002388 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b40      	cmp	r3, #64	; 0x40
 800234a:	d01d      	beq.n	8002388 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b08      	cmp	r3, #8
 8002358:	d116      	bne.n	8002388 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f81d 	bl	80023b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2208      	movs	r2, #8
 800237a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e00f      	b.n	80023a8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	4013      	ands	r3, r2
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	429a      	cmp	r2, r3
 8002396:	bf0c      	ite	eq
 8002398:	2301      	moveq	r3, #1
 800239a:	2300      	movne	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d0b4      	beq.n	8002310 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b095      	sub	sp, #84	; 0x54
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	330c      	adds	r3, #12
 80023be:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c2:	e853 3f00 	ldrex	r3, [r3]
 80023c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80023c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80023ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	330c      	adds	r3, #12
 80023d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023d8:	643a      	str	r2, [r7, #64]	; 0x40
 80023da:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80023de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023e0:	e841 2300 	strex	r3, r2, [r1]
 80023e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80023e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1e5      	bne.n	80023b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	3314      	adds	r3, #20
 80023f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	e853 3f00 	ldrex	r3, [r3]
 80023fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f023 0301 	bic.w	r3, r3, #1
 8002402:	64bb      	str	r3, [r7, #72]	; 0x48
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	3314      	adds	r3, #20
 800240a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800240c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002410:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002414:	e841 2300 	strex	r3, r2, [r1]
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1e5      	bne.n	80023ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	2b01      	cmp	r3, #1
 8002426:	d119      	bne.n	800245c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	330c      	adds	r3, #12
 800242e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	e853 3f00 	ldrex	r3, [r3]
 8002436:	60bb      	str	r3, [r7, #8]
   return(result);
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f023 0310 	bic.w	r3, r3, #16
 800243e:	647b      	str	r3, [r7, #68]	; 0x44
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	330c      	adds	r3, #12
 8002446:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002448:	61ba      	str	r2, [r7, #24]
 800244a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800244c:	6979      	ldr	r1, [r7, #20]
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	e841 2300 	strex	r3, r2, [r1]
 8002454:	613b      	str	r3, [r7, #16]
   return(result);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1e5      	bne.n	8002428 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	631a      	str	r2, [r3, #48]	; 0x30
}
 800246a:	bf00      	nop
 800246c:	3754      	adds	r7, #84	; 0x54
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80024ae:	f023 030c 	bic.w	r3, r3, #12
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	68b9      	ldr	r1, [r7, #8]
 80024b8:	430b      	orrs	r3, r1
 80024ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699a      	ldr	r2, [r3, #24]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a2c      	ldr	r2, [pc, #176]	; (8002588 <UART_SetConfig+0x114>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d103      	bne.n	80024e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024dc:	f7ff fa26 	bl	800192c <HAL_RCC_GetPCLK2Freq>
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	e002      	b.n	80024ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80024e4:	f7ff fa0e 	bl	8001904 <HAL_RCC_GetPCLK1Freq>
 80024e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	009a      	lsls	r2, r3, #2
 80024f4:	441a      	add	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002500:	4a22      	ldr	r2, [pc, #136]	; (800258c <UART_SetConfig+0x118>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	0119      	lsls	r1, r3, #4
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	009a      	lsls	r2, r3, #2
 8002514:	441a      	add	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <UART_SetConfig+0x118>)
 8002522:	fba3 0302 	umull	r0, r3, r3, r2
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	2064      	movs	r0, #100	; 0x64
 800252a:	fb00 f303 	mul.w	r3, r0, r3
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	3332      	adds	r3, #50	; 0x32
 8002534:	4a15      	ldr	r2, [pc, #84]	; (800258c <UART_SetConfig+0x118>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002540:	4419      	add	r1, r3
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	009a      	lsls	r2, r3, #2
 800254c:	441a      	add	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	fbb2 f2f3 	udiv	r2, r2, r3
 8002558:	4b0c      	ldr	r3, [pc, #48]	; (800258c <UART_SetConfig+0x118>)
 800255a:	fba3 0302 	umull	r0, r3, r3, r2
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	2064      	movs	r0, #100	; 0x64
 8002562:	fb00 f303 	mul.w	r3, r0, r3
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	3332      	adds	r3, #50	; 0x32
 800256c:	4a07      	ldr	r2, [pc, #28]	; (800258c <UART_SetConfig+0x118>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	f003 020f 	and.w	r2, r3, #15
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	440a      	add	r2, r1
 800257e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002580:	bf00      	nop
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40013800 	.word	0x40013800
 800258c:	51eb851f 	.word	0x51eb851f

08002590 <__errno>:
 8002590:	4b01      	ldr	r3, [pc, #4]	; (8002598 <__errno+0x8>)
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	2000000c 	.word	0x2000000c

0800259c <__libc_init_array>:
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	2600      	movs	r6, #0
 80025a0:	4d0c      	ldr	r5, [pc, #48]	; (80025d4 <__libc_init_array+0x38>)
 80025a2:	4c0d      	ldr	r4, [pc, #52]	; (80025d8 <__libc_init_array+0x3c>)
 80025a4:	1b64      	subs	r4, r4, r5
 80025a6:	10a4      	asrs	r4, r4, #2
 80025a8:	42a6      	cmp	r6, r4
 80025aa:	d109      	bne.n	80025c0 <__libc_init_array+0x24>
 80025ac:	f000 ff82 	bl	80034b4 <_init>
 80025b0:	2600      	movs	r6, #0
 80025b2:	4d0a      	ldr	r5, [pc, #40]	; (80025dc <__libc_init_array+0x40>)
 80025b4:	4c0a      	ldr	r4, [pc, #40]	; (80025e0 <__libc_init_array+0x44>)
 80025b6:	1b64      	subs	r4, r4, r5
 80025b8:	10a4      	asrs	r4, r4, #2
 80025ba:	42a6      	cmp	r6, r4
 80025bc:	d105      	bne.n	80025ca <__libc_init_array+0x2e>
 80025be:	bd70      	pop	{r4, r5, r6, pc}
 80025c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025c4:	4798      	blx	r3
 80025c6:	3601      	adds	r6, #1
 80025c8:	e7ee      	b.n	80025a8 <__libc_init_array+0xc>
 80025ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ce:	4798      	blx	r3
 80025d0:	3601      	adds	r6, #1
 80025d2:	e7f2      	b.n	80025ba <__libc_init_array+0x1e>
 80025d4:	080035a8 	.word	0x080035a8
 80025d8:	080035a8 	.word	0x080035a8
 80025dc:	080035a8 	.word	0x080035a8
 80025e0:	080035ac 	.word	0x080035ac

080025e4 <memset>:
 80025e4:	4603      	mov	r3, r0
 80025e6:	4402      	add	r2, r0
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d100      	bne.n	80025ee <memset+0xa>
 80025ec:	4770      	bx	lr
 80025ee:	f803 1b01 	strb.w	r1, [r3], #1
 80025f2:	e7f9      	b.n	80025e8 <memset+0x4>

080025f4 <iprintf>:
 80025f4:	b40f      	push	{r0, r1, r2, r3}
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <iprintf+0x2c>)
 80025f8:	b513      	push	{r0, r1, r4, lr}
 80025fa:	681c      	ldr	r4, [r3, #0]
 80025fc:	b124      	cbz	r4, 8002608 <iprintf+0x14>
 80025fe:	69a3      	ldr	r3, [r4, #24]
 8002600:	b913      	cbnz	r3, 8002608 <iprintf+0x14>
 8002602:	4620      	mov	r0, r4
 8002604:	f000 f866 	bl	80026d4 <__sinit>
 8002608:	ab05      	add	r3, sp, #20
 800260a:	4620      	mov	r0, r4
 800260c:	9a04      	ldr	r2, [sp, #16]
 800260e:	68a1      	ldr	r1, [r4, #8]
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	f000 f981 	bl	8002918 <_vfiprintf_r>
 8002616:	b002      	add	sp, #8
 8002618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800261c:	b004      	add	sp, #16
 800261e:	4770      	bx	lr
 8002620:	2000000c 	.word	0x2000000c

08002624 <std>:
 8002624:	2300      	movs	r3, #0
 8002626:	b510      	push	{r4, lr}
 8002628:	4604      	mov	r4, r0
 800262a:	e9c0 3300 	strd	r3, r3, [r0]
 800262e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002632:	6083      	str	r3, [r0, #8]
 8002634:	8181      	strh	r1, [r0, #12]
 8002636:	6643      	str	r3, [r0, #100]	; 0x64
 8002638:	81c2      	strh	r2, [r0, #14]
 800263a:	6183      	str	r3, [r0, #24]
 800263c:	4619      	mov	r1, r3
 800263e:	2208      	movs	r2, #8
 8002640:	305c      	adds	r0, #92	; 0x5c
 8002642:	f7ff ffcf 	bl	80025e4 <memset>
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <std+0x38>)
 8002648:	6224      	str	r4, [r4, #32]
 800264a:	6263      	str	r3, [r4, #36]	; 0x24
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <std+0x3c>)
 800264e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002650:	4b04      	ldr	r3, [pc, #16]	; (8002664 <std+0x40>)
 8002652:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <std+0x44>)
 8002656:	6323      	str	r3, [r4, #48]	; 0x30
 8002658:	bd10      	pop	{r4, pc}
 800265a:	bf00      	nop
 800265c:	08002ec5 	.word	0x08002ec5
 8002660:	08002ee7 	.word	0x08002ee7
 8002664:	08002f1f 	.word	0x08002f1f
 8002668:	08002f43 	.word	0x08002f43

0800266c <_cleanup_r>:
 800266c:	4901      	ldr	r1, [pc, #4]	; (8002674 <_cleanup_r+0x8>)
 800266e:	f000 b8af 	b.w	80027d0 <_fwalk_reent>
 8002672:	bf00      	nop
 8002674:	0800321d 	.word	0x0800321d

08002678 <__sfmoreglue>:
 8002678:	b570      	push	{r4, r5, r6, lr}
 800267a:	2568      	movs	r5, #104	; 0x68
 800267c:	1e4a      	subs	r2, r1, #1
 800267e:	4355      	muls	r5, r2
 8002680:	460e      	mov	r6, r1
 8002682:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002686:	f000 f8c5 	bl	8002814 <_malloc_r>
 800268a:	4604      	mov	r4, r0
 800268c:	b140      	cbz	r0, 80026a0 <__sfmoreglue+0x28>
 800268e:	2100      	movs	r1, #0
 8002690:	e9c0 1600 	strd	r1, r6, [r0]
 8002694:	300c      	adds	r0, #12
 8002696:	60a0      	str	r0, [r4, #8]
 8002698:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800269c:	f7ff ffa2 	bl	80025e4 <memset>
 80026a0:	4620      	mov	r0, r4
 80026a2:	bd70      	pop	{r4, r5, r6, pc}

080026a4 <__sfp_lock_acquire>:
 80026a4:	4801      	ldr	r0, [pc, #4]	; (80026ac <__sfp_lock_acquire+0x8>)
 80026a6:	f000 b8b3 	b.w	8002810 <__retarget_lock_acquire_recursive>
 80026aa:	bf00      	nop
 80026ac:	20000324 	.word	0x20000324

080026b0 <__sfp_lock_release>:
 80026b0:	4801      	ldr	r0, [pc, #4]	; (80026b8 <__sfp_lock_release+0x8>)
 80026b2:	f000 b8ae 	b.w	8002812 <__retarget_lock_release_recursive>
 80026b6:	bf00      	nop
 80026b8:	20000324 	.word	0x20000324

080026bc <__sinit_lock_acquire>:
 80026bc:	4801      	ldr	r0, [pc, #4]	; (80026c4 <__sinit_lock_acquire+0x8>)
 80026be:	f000 b8a7 	b.w	8002810 <__retarget_lock_acquire_recursive>
 80026c2:	bf00      	nop
 80026c4:	2000031f 	.word	0x2000031f

080026c8 <__sinit_lock_release>:
 80026c8:	4801      	ldr	r0, [pc, #4]	; (80026d0 <__sinit_lock_release+0x8>)
 80026ca:	f000 b8a2 	b.w	8002812 <__retarget_lock_release_recursive>
 80026ce:	bf00      	nop
 80026d0:	2000031f 	.word	0x2000031f

080026d4 <__sinit>:
 80026d4:	b510      	push	{r4, lr}
 80026d6:	4604      	mov	r4, r0
 80026d8:	f7ff fff0 	bl	80026bc <__sinit_lock_acquire>
 80026dc:	69a3      	ldr	r3, [r4, #24]
 80026de:	b11b      	cbz	r3, 80026e8 <__sinit+0x14>
 80026e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026e4:	f7ff bff0 	b.w	80026c8 <__sinit_lock_release>
 80026e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80026ec:	6523      	str	r3, [r4, #80]	; 0x50
 80026ee:	4b13      	ldr	r3, [pc, #76]	; (800273c <__sinit+0x68>)
 80026f0:	4a13      	ldr	r2, [pc, #76]	; (8002740 <__sinit+0x6c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80026f6:	42a3      	cmp	r3, r4
 80026f8:	bf08      	it	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	4620      	mov	r0, r4
 80026fe:	bf08      	it	eq
 8002700:	61a3      	streq	r3, [r4, #24]
 8002702:	f000 f81f 	bl	8002744 <__sfp>
 8002706:	6060      	str	r0, [r4, #4]
 8002708:	4620      	mov	r0, r4
 800270a:	f000 f81b 	bl	8002744 <__sfp>
 800270e:	60a0      	str	r0, [r4, #8]
 8002710:	4620      	mov	r0, r4
 8002712:	f000 f817 	bl	8002744 <__sfp>
 8002716:	2200      	movs	r2, #0
 8002718:	2104      	movs	r1, #4
 800271a:	60e0      	str	r0, [r4, #12]
 800271c:	6860      	ldr	r0, [r4, #4]
 800271e:	f7ff ff81 	bl	8002624 <std>
 8002722:	2201      	movs	r2, #1
 8002724:	2109      	movs	r1, #9
 8002726:	68a0      	ldr	r0, [r4, #8]
 8002728:	f7ff ff7c 	bl	8002624 <std>
 800272c:	2202      	movs	r2, #2
 800272e:	2112      	movs	r1, #18
 8002730:	68e0      	ldr	r0, [r4, #12]
 8002732:	f7ff ff77 	bl	8002624 <std>
 8002736:	2301      	movs	r3, #1
 8002738:	61a3      	str	r3, [r4, #24]
 800273a:	e7d1      	b.n	80026e0 <__sinit+0xc>
 800273c:	08003510 	.word	0x08003510
 8002740:	0800266d 	.word	0x0800266d

08002744 <__sfp>:
 8002744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002746:	4607      	mov	r7, r0
 8002748:	f7ff ffac 	bl	80026a4 <__sfp_lock_acquire>
 800274c:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <__sfp+0x84>)
 800274e:	681e      	ldr	r6, [r3, #0]
 8002750:	69b3      	ldr	r3, [r6, #24]
 8002752:	b913      	cbnz	r3, 800275a <__sfp+0x16>
 8002754:	4630      	mov	r0, r6
 8002756:	f7ff ffbd 	bl	80026d4 <__sinit>
 800275a:	3648      	adds	r6, #72	; 0x48
 800275c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002760:	3b01      	subs	r3, #1
 8002762:	d503      	bpl.n	800276c <__sfp+0x28>
 8002764:	6833      	ldr	r3, [r6, #0]
 8002766:	b30b      	cbz	r3, 80027ac <__sfp+0x68>
 8002768:	6836      	ldr	r6, [r6, #0]
 800276a:	e7f7      	b.n	800275c <__sfp+0x18>
 800276c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002770:	b9d5      	cbnz	r5, 80027a8 <__sfp+0x64>
 8002772:	4b16      	ldr	r3, [pc, #88]	; (80027cc <__sfp+0x88>)
 8002774:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002778:	60e3      	str	r3, [r4, #12]
 800277a:	6665      	str	r5, [r4, #100]	; 0x64
 800277c:	f000 f847 	bl	800280e <__retarget_lock_init_recursive>
 8002780:	f7ff ff96 	bl	80026b0 <__sfp_lock_release>
 8002784:	2208      	movs	r2, #8
 8002786:	4629      	mov	r1, r5
 8002788:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800278c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002790:	6025      	str	r5, [r4, #0]
 8002792:	61a5      	str	r5, [r4, #24]
 8002794:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002798:	f7ff ff24 	bl	80025e4 <memset>
 800279c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80027a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80027a4:	4620      	mov	r0, r4
 80027a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027a8:	3468      	adds	r4, #104	; 0x68
 80027aa:	e7d9      	b.n	8002760 <__sfp+0x1c>
 80027ac:	2104      	movs	r1, #4
 80027ae:	4638      	mov	r0, r7
 80027b0:	f7ff ff62 	bl	8002678 <__sfmoreglue>
 80027b4:	4604      	mov	r4, r0
 80027b6:	6030      	str	r0, [r6, #0]
 80027b8:	2800      	cmp	r0, #0
 80027ba:	d1d5      	bne.n	8002768 <__sfp+0x24>
 80027bc:	f7ff ff78 	bl	80026b0 <__sfp_lock_release>
 80027c0:	230c      	movs	r3, #12
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	e7ee      	b.n	80027a4 <__sfp+0x60>
 80027c6:	bf00      	nop
 80027c8:	08003510 	.word	0x08003510
 80027cc:	ffff0001 	.word	0xffff0001

080027d0 <_fwalk_reent>:
 80027d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027d4:	4606      	mov	r6, r0
 80027d6:	4688      	mov	r8, r1
 80027d8:	2700      	movs	r7, #0
 80027da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80027de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80027e2:	f1b9 0901 	subs.w	r9, r9, #1
 80027e6:	d505      	bpl.n	80027f4 <_fwalk_reent+0x24>
 80027e8:	6824      	ldr	r4, [r4, #0]
 80027ea:	2c00      	cmp	r4, #0
 80027ec:	d1f7      	bne.n	80027de <_fwalk_reent+0xe>
 80027ee:	4638      	mov	r0, r7
 80027f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027f4:	89ab      	ldrh	r3, [r5, #12]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d907      	bls.n	800280a <_fwalk_reent+0x3a>
 80027fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80027fe:	3301      	adds	r3, #1
 8002800:	d003      	beq.n	800280a <_fwalk_reent+0x3a>
 8002802:	4629      	mov	r1, r5
 8002804:	4630      	mov	r0, r6
 8002806:	47c0      	blx	r8
 8002808:	4307      	orrs	r7, r0
 800280a:	3568      	adds	r5, #104	; 0x68
 800280c:	e7e9      	b.n	80027e2 <_fwalk_reent+0x12>

0800280e <__retarget_lock_init_recursive>:
 800280e:	4770      	bx	lr

08002810 <__retarget_lock_acquire_recursive>:
 8002810:	4770      	bx	lr

08002812 <__retarget_lock_release_recursive>:
 8002812:	4770      	bx	lr

08002814 <_malloc_r>:
 8002814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002816:	1ccd      	adds	r5, r1, #3
 8002818:	f025 0503 	bic.w	r5, r5, #3
 800281c:	3508      	adds	r5, #8
 800281e:	2d0c      	cmp	r5, #12
 8002820:	bf38      	it	cc
 8002822:	250c      	movcc	r5, #12
 8002824:	2d00      	cmp	r5, #0
 8002826:	4606      	mov	r6, r0
 8002828:	db01      	blt.n	800282e <_malloc_r+0x1a>
 800282a:	42a9      	cmp	r1, r5
 800282c:	d903      	bls.n	8002836 <_malloc_r+0x22>
 800282e:	230c      	movs	r3, #12
 8002830:	6033      	str	r3, [r6, #0]
 8002832:	2000      	movs	r0, #0
 8002834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002836:	f000 fdb1 	bl	800339c <__malloc_lock>
 800283a:	4921      	ldr	r1, [pc, #132]	; (80028c0 <_malloc_r+0xac>)
 800283c:	680a      	ldr	r2, [r1, #0]
 800283e:	4614      	mov	r4, r2
 8002840:	b99c      	cbnz	r4, 800286a <_malloc_r+0x56>
 8002842:	4f20      	ldr	r7, [pc, #128]	; (80028c4 <_malloc_r+0xb0>)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	b923      	cbnz	r3, 8002852 <_malloc_r+0x3e>
 8002848:	4621      	mov	r1, r4
 800284a:	4630      	mov	r0, r6
 800284c:	f000 fb2a 	bl	8002ea4 <_sbrk_r>
 8002850:	6038      	str	r0, [r7, #0]
 8002852:	4629      	mov	r1, r5
 8002854:	4630      	mov	r0, r6
 8002856:	f000 fb25 	bl	8002ea4 <_sbrk_r>
 800285a:	1c43      	adds	r3, r0, #1
 800285c:	d123      	bne.n	80028a6 <_malloc_r+0x92>
 800285e:	230c      	movs	r3, #12
 8002860:	4630      	mov	r0, r6
 8002862:	6033      	str	r3, [r6, #0]
 8002864:	f000 fda0 	bl	80033a8 <__malloc_unlock>
 8002868:	e7e3      	b.n	8002832 <_malloc_r+0x1e>
 800286a:	6823      	ldr	r3, [r4, #0]
 800286c:	1b5b      	subs	r3, r3, r5
 800286e:	d417      	bmi.n	80028a0 <_malloc_r+0x8c>
 8002870:	2b0b      	cmp	r3, #11
 8002872:	d903      	bls.n	800287c <_malloc_r+0x68>
 8002874:	6023      	str	r3, [r4, #0]
 8002876:	441c      	add	r4, r3
 8002878:	6025      	str	r5, [r4, #0]
 800287a:	e004      	b.n	8002886 <_malloc_r+0x72>
 800287c:	6863      	ldr	r3, [r4, #4]
 800287e:	42a2      	cmp	r2, r4
 8002880:	bf0c      	ite	eq
 8002882:	600b      	streq	r3, [r1, #0]
 8002884:	6053      	strne	r3, [r2, #4]
 8002886:	4630      	mov	r0, r6
 8002888:	f000 fd8e 	bl	80033a8 <__malloc_unlock>
 800288c:	f104 000b 	add.w	r0, r4, #11
 8002890:	1d23      	adds	r3, r4, #4
 8002892:	f020 0007 	bic.w	r0, r0, #7
 8002896:	1ac2      	subs	r2, r0, r3
 8002898:	d0cc      	beq.n	8002834 <_malloc_r+0x20>
 800289a:	1a1b      	subs	r3, r3, r0
 800289c:	50a3      	str	r3, [r4, r2]
 800289e:	e7c9      	b.n	8002834 <_malloc_r+0x20>
 80028a0:	4622      	mov	r2, r4
 80028a2:	6864      	ldr	r4, [r4, #4]
 80028a4:	e7cc      	b.n	8002840 <_malloc_r+0x2c>
 80028a6:	1cc4      	adds	r4, r0, #3
 80028a8:	f024 0403 	bic.w	r4, r4, #3
 80028ac:	42a0      	cmp	r0, r4
 80028ae:	d0e3      	beq.n	8002878 <_malloc_r+0x64>
 80028b0:	1a21      	subs	r1, r4, r0
 80028b2:	4630      	mov	r0, r6
 80028b4:	f000 faf6 	bl	8002ea4 <_sbrk_r>
 80028b8:	3001      	adds	r0, #1
 80028ba:	d1dd      	bne.n	8002878 <_malloc_r+0x64>
 80028bc:	e7cf      	b.n	800285e <_malloc_r+0x4a>
 80028be:	bf00      	nop
 80028c0:	20000098 	.word	0x20000098
 80028c4:	2000009c 	.word	0x2000009c

080028c8 <__sfputc_r>:
 80028c8:	6893      	ldr	r3, [r2, #8]
 80028ca:	b410      	push	{r4}
 80028cc:	3b01      	subs	r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	6093      	str	r3, [r2, #8]
 80028d2:	da07      	bge.n	80028e4 <__sfputc_r+0x1c>
 80028d4:	6994      	ldr	r4, [r2, #24]
 80028d6:	42a3      	cmp	r3, r4
 80028d8:	db01      	blt.n	80028de <__sfputc_r+0x16>
 80028da:	290a      	cmp	r1, #10
 80028dc:	d102      	bne.n	80028e4 <__sfputc_r+0x1c>
 80028de:	bc10      	pop	{r4}
 80028e0:	f000 bb34 	b.w	8002f4c <__swbuf_r>
 80028e4:	6813      	ldr	r3, [r2, #0]
 80028e6:	1c58      	adds	r0, r3, #1
 80028e8:	6010      	str	r0, [r2, #0]
 80028ea:	7019      	strb	r1, [r3, #0]
 80028ec:	4608      	mov	r0, r1
 80028ee:	bc10      	pop	{r4}
 80028f0:	4770      	bx	lr

080028f2 <__sfputs_r>:
 80028f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f4:	4606      	mov	r6, r0
 80028f6:	460f      	mov	r7, r1
 80028f8:	4614      	mov	r4, r2
 80028fa:	18d5      	adds	r5, r2, r3
 80028fc:	42ac      	cmp	r4, r5
 80028fe:	d101      	bne.n	8002904 <__sfputs_r+0x12>
 8002900:	2000      	movs	r0, #0
 8002902:	e007      	b.n	8002914 <__sfputs_r+0x22>
 8002904:	463a      	mov	r2, r7
 8002906:	4630      	mov	r0, r6
 8002908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800290c:	f7ff ffdc 	bl	80028c8 <__sfputc_r>
 8002910:	1c43      	adds	r3, r0, #1
 8002912:	d1f3      	bne.n	80028fc <__sfputs_r+0xa>
 8002914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002918 <_vfiprintf_r>:
 8002918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800291c:	460d      	mov	r5, r1
 800291e:	4614      	mov	r4, r2
 8002920:	4698      	mov	r8, r3
 8002922:	4606      	mov	r6, r0
 8002924:	b09d      	sub	sp, #116	; 0x74
 8002926:	b118      	cbz	r0, 8002930 <_vfiprintf_r+0x18>
 8002928:	6983      	ldr	r3, [r0, #24]
 800292a:	b90b      	cbnz	r3, 8002930 <_vfiprintf_r+0x18>
 800292c:	f7ff fed2 	bl	80026d4 <__sinit>
 8002930:	4b89      	ldr	r3, [pc, #548]	; (8002b58 <_vfiprintf_r+0x240>)
 8002932:	429d      	cmp	r5, r3
 8002934:	d11b      	bne.n	800296e <_vfiprintf_r+0x56>
 8002936:	6875      	ldr	r5, [r6, #4]
 8002938:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800293a:	07d9      	lsls	r1, r3, #31
 800293c:	d405      	bmi.n	800294a <_vfiprintf_r+0x32>
 800293e:	89ab      	ldrh	r3, [r5, #12]
 8002940:	059a      	lsls	r2, r3, #22
 8002942:	d402      	bmi.n	800294a <_vfiprintf_r+0x32>
 8002944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002946:	f7ff ff63 	bl	8002810 <__retarget_lock_acquire_recursive>
 800294a:	89ab      	ldrh	r3, [r5, #12]
 800294c:	071b      	lsls	r3, r3, #28
 800294e:	d501      	bpl.n	8002954 <_vfiprintf_r+0x3c>
 8002950:	692b      	ldr	r3, [r5, #16]
 8002952:	b9eb      	cbnz	r3, 8002990 <_vfiprintf_r+0x78>
 8002954:	4629      	mov	r1, r5
 8002956:	4630      	mov	r0, r6
 8002958:	f000 fb5c 	bl	8003014 <__swsetup_r>
 800295c:	b1c0      	cbz	r0, 8002990 <_vfiprintf_r+0x78>
 800295e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002960:	07dc      	lsls	r4, r3, #31
 8002962:	d50e      	bpl.n	8002982 <_vfiprintf_r+0x6a>
 8002964:	f04f 30ff 	mov.w	r0, #4294967295
 8002968:	b01d      	add	sp, #116	; 0x74
 800296a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800296e:	4b7b      	ldr	r3, [pc, #492]	; (8002b5c <_vfiprintf_r+0x244>)
 8002970:	429d      	cmp	r5, r3
 8002972:	d101      	bne.n	8002978 <_vfiprintf_r+0x60>
 8002974:	68b5      	ldr	r5, [r6, #8]
 8002976:	e7df      	b.n	8002938 <_vfiprintf_r+0x20>
 8002978:	4b79      	ldr	r3, [pc, #484]	; (8002b60 <_vfiprintf_r+0x248>)
 800297a:	429d      	cmp	r5, r3
 800297c:	bf08      	it	eq
 800297e:	68f5      	ldreq	r5, [r6, #12]
 8002980:	e7da      	b.n	8002938 <_vfiprintf_r+0x20>
 8002982:	89ab      	ldrh	r3, [r5, #12]
 8002984:	0598      	lsls	r0, r3, #22
 8002986:	d4ed      	bmi.n	8002964 <_vfiprintf_r+0x4c>
 8002988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800298a:	f7ff ff42 	bl	8002812 <__retarget_lock_release_recursive>
 800298e:	e7e9      	b.n	8002964 <_vfiprintf_r+0x4c>
 8002990:	2300      	movs	r3, #0
 8002992:	9309      	str	r3, [sp, #36]	; 0x24
 8002994:	2320      	movs	r3, #32
 8002996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800299a:	2330      	movs	r3, #48	; 0x30
 800299c:	f04f 0901 	mov.w	r9, #1
 80029a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80029a4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002b64 <_vfiprintf_r+0x24c>
 80029a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029ac:	4623      	mov	r3, r4
 80029ae:	469a      	mov	sl, r3
 80029b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029b4:	b10a      	cbz	r2, 80029ba <_vfiprintf_r+0xa2>
 80029b6:	2a25      	cmp	r2, #37	; 0x25
 80029b8:	d1f9      	bne.n	80029ae <_vfiprintf_r+0x96>
 80029ba:	ebba 0b04 	subs.w	fp, sl, r4
 80029be:	d00b      	beq.n	80029d8 <_vfiprintf_r+0xc0>
 80029c0:	465b      	mov	r3, fp
 80029c2:	4622      	mov	r2, r4
 80029c4:	4629      	mov	r1, r5
 80029c6:	4630      	mov	r0, r6
 80029c8:	f7ff ff93 	bl	80028f2 <__sfputs_r>
 80029cc:	3001      	adds	r0, #1
 80029ce:	f000 80aa 	beq.w	8002b26 <_vfiprintf_r+0x20e>
 80029d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029d4:	445a      	add	r2, fp
 80029d6:	9209      	str	r2, [sp, #36]	; 0x24
 80029d8:	f89a 3000 	ldrb.w	r3, [sl]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80a2 	beq.w	8002b26 <_vfiprintf_r+0x20e>
 80029e2:	2300      	movs	r3, #0
 80029e4:	f04f 32ff 	mov.w	r2, #4294967295
 80029e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029ec:	f10a 0a01 	add.w	sl, sl, #1
 80029f0:	9304      	str	r3, [sp, #16]
 80029f2:	9307      	str	r3, [sp, #28]
 80029f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80029f8:	931a      	str	r3, [sp, #104]	; 0x68
 80029fa:	4654      	mov	r4, sl
 80029fc:	2205      	movs	r2, #5
 80029fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a02:	4858      	ldr	r0, [pc, #352]	; (8002b64 <_vfiprintf_r+0x24c>)
 8002a04:	f000 fcbc 	bl	8003380 <memchr>
 8002a08:	9a04      	ldr	r2, [sp, #16]
 8002a0a:	b9d8      	cbnz	r0, 8002a44 <_vfiprintf_r+0x12c>
 8002a0c:	06d1      	lsls	r1, r2, #27
 8002a0e:	bf44      	itt	mi
 8002a10:	2320      	movmi	r3, #32
 8002a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a16:	0713      	lsls	r3, r2, #28
 8002a18:	bf44      	itt	mi
 8002a1a:	232b      	movmi	r3, #43	; 0x2b
 8002a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a20:	f89a 3000 	ldrb.w	r3, [sl]
 8002a24:	2b2a      	cmp	r3, #42	; 0x2a
 8002a26:	d015      	beq.n	8002a54 <_vfiprintf_r+0x13c>
 8002a28:	4654      	mov	r4, sl
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f04f 0c0a 	mov.w	ip, #10
 8002a30:	9a07      	ldr	r2, [sp, #28]
 8002a32:	4621      	mov	r1, r4
 8002a34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a38:	3b30      	subs	r3, #48	; 0x30
 8002a3a:	2b09      	cmp	r3, #9
 8002a3c:	d94e      	bls.n	8002adc <_vfiprintf_r+0x1c4>
 8002a3e:	b1b0      	cbz	r0, 8002a6e <_vfiprintf_r+0x156>
 8002a40:	9207      	str	r2, [sp, #28]
 8002a42:	e014      	b.n	8002a6e <_vfiprintf_r+0x156>
 8002a44:	eba0 0308 	sub.w	r3, r0, r8
 8002a48:	fa09 f303 	lsl.w	r3, r9, r3
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	46a2      	mov	sl, r4
 8002a50:	9304      	str	r3, [sp, #16]
 8002a52:	e7d2      	b.n	80029fa <_vfiprintf_r+0xe2>
 8002a54:	9b03      	ldr	r3, [sp, #12]
 8002a56:	1d19      	adds	r1, r3, #4
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	9103      	str	r1, [sp, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bfbb      	ittet	lt
 8002a60:	425b      	neglt	r3, r3
 8002a62:	f042 0202 	orrlt.w	r2, r2, #2
 8002a66:	9307      	strge	r3, [sp, #28]
 8002a68:	9307      	strlt	r3, [sp, #28]
 8002a6a:	bfb8      	it	lt
 8002a6c:	9204      	strlt	r2, [sp, #16]
 8002a6e:	7823      	ldrb	r3, [r4, #0]
 8002a70:	2b2e      	cmp	r3, #46	; 0x2e
 8002a72:	d10c      	bne.n	8002a8e <_vfiprintf_r+0x176>
 8002a74:	7863      	ldrb	r3, [r4, #1]
 8002a76:	2b2a      	cmp	r3, #42	; 0x2a
 8002a78:	d135      	bne.n	8002ae6 <_vfiprintf_r+0x1ce>
 8002a7a:	9b03      	ldr	r3, [sp, #12]
 8002a7c:	3402      	adds	r4, #2
 8002a7e:	1d1a      	adds	r2, r3, #4
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	9203      	str	r2, [sp, #12]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bfb8      	it	lt
 8002a88:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a8c:	9305      	str	r3, [sp, #20]
 8002a8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002b74 <_vfiprintf_r+0x25c>
 8002a92:	2203      	movs	r2, #3
 8002a94:	4650      	mov	r0, sl
 8002a96:	7821      	ldrb	r1, [r4, #0]
 8002a98:	f000 fc72 	bl	8003380 <memchr>
 8002a9c:	b140      	cbz	r0, 8002ab0 <_vfiprintf_r+0x198>
 8002a9e:	2340      	movs	r3, #64	; 0x40
 8002aa0:	eba0 000a 	sub.w	r0, r0, sl
 8002aa4:	fa03 f000 	lsl.w	r0, r3, r0
 8002aa8:	9b04      	ldr	r3, [sp, #16]
 8002aaa:	3401      	adds	r4, #1
 8002aac:	4303      	orrs	r3, r0
 8002aae:	9304      	str	r3, [sp, #16]
 8002ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ab4:	2206      	movs	r2, #6
 8002ab6:	482c      	ldr	r0, [pc, #176]	; (8002b68 <_vfiprintf_r+0x250>)
 8002ab8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002abc:	f000 fc60 	bl	8003380 <memchr>
 8002ac0:	2800      	cmp	r0, #0
 8002ac2:	d03f      	beq.n	8002b44 <_vfiprintf_r+0x22c>
 8002ac4:	4b29      	ldr	r3, [pc, #164]	; (8002b6c <_vfiprintf_r+0x254>)
 8002ac6:	bb1b      	cbnz	r3, 8002b10 <_vfiprintf_r+0x1f8>
 8002ac8:	9b03      	ldr	r3, [sp, #12]
 8002aca:	3307      	adds	r3, #7
 8002acc:	f023 0307 	bic.w	r3, r3, #7
 8002ad0:	3308      	adds	r3, #8
 8002ad2:	9303      	str	r3, [sp, #12]
 8002ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ad6:	443b      	add	r3, r7
 8002ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8002ada:	e767      	b.n	80029ac <_vfiprintf_r+0x94>
 8002adc:	460c      	mov	r4, r1
 8002ade:	2001      	movs	r0, #1
 8002ae0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ae4:	e7a5      	b.n	8002a32 <_vfiprintf_r+0x11a>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f04f 0c0a 	mov.w	ip, #10
 8002aec:	4619      	mov	r1, r3
 8002aee:	3401      	adds	r4, #1
 8002af0:	9305      	str	r3, [sp, #20]
 8002af2:	4620      	mov	r0, r4
 8002af4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002af8:	3a30      	subs	r2, #48	; 0x30
 8002afa:	2a09      	cmp	r2, #9
 8002afc:	d903      	bls.n	8002b06 <_vfiprintf_r+0x1ee>
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0c5      	beq.n	8002a8e <_vfiprintf_r+0x176>
 8002b02:	9105      	str	r1, [sp, #20]
 8002b04:	e7c3      	b.n	8002a8e <_vfiprintf_r+0x176>
 8002b06:	4604      	mov	r4, r0
 8002b08:	2301      	movs	r3, #1
 8002b0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b0e:	e7f0      	b.n	8002af2 <_vfiprintf_r+0x1da>
 8002b10:	ab03      	add	r3, sp, #12
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	462a      	mov	r2, r5
 8002b16:	4630      	mov	r0, r6
 8002b18:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <_vfiprintf_r+0x258>)
 8002b1a:	a904      	add	r1, sp, #16
 8002b1c:	f3af 8000 	nop.w
 8002b20:	4607      	mov	r7, r0
 8002b22:	1c78      	adds	r0, r7, #1
 8002b24:	d1d6      	bne.n	8002ad4 <_vfiprintf_r+0x1bc>
 8002b26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b28:	07d9      	lsls	r1, r3, #31
 8002b2a:	d405      	bmi.n	8002b38 <_vfiprintf_r+0x220>
 8002b2c:	89ab      	ldrh	r3, [r5, #12]
 8002b2e:	059a      	lsls	r2, r3, #22
 8002b30:	d402      	bmi.n	8002b38 <_vfiprintf_r+0x220>
 8002b32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b34:	f7ff fe6d 	bl	8002812 <__retarget_lock_release_recursive>
 8002b38:	89ab      	ldrh	r3, [r5, #12]
 8002b3a:	065b      	lsls	r3, r3, #25
 8002b3c:	f53f af12 	bmi.w	8002964 <_vfiprintf_r+0x4c>
 8002b40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b42:	e711      	b.n	8002968 <_vfiprintf_r+0x50>
 8002b44:	ab03      	add	r3, sp, #12
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	462a      	mov	r2, r5
 8002b4a:	4630      	mov	r0, r6
 8002b4c:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <_vfiprintf_r+0x258>)
 8002b4e:	a904      	add	r1, sp, #16
 8002b50:	f000 f882 	bl	8002c58 <_printf_i>
 8002b54:	e7e4      	b.n	8002b20 <_vfiprintf_r+0x208>
 8002b56:	bf00      	nop
 8002b58:	08003534 	.word	0x08003534
 8002b5c:	08003554 	.word	0x08003554
 8002b60:	08003514 	.word	0x08003514
 8002b64:	08003574 	.word	0x08003574
 8002b68:	0800357e 	.word	0x0800357e
 8002b6c:	00000000 	.word	0x00000000
 8002b70:	080028f3 	.word	0x080028f3
 8002b74:	0800357a 	.word	0x0800357a

08002b78 <_printf_common>:
 8002b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b7c:	4616      	mov	r6, r2
 8002b7e:	4699      	mov	r9, r3
 8002b80:	688a      	ldr	r2, [r1, #8]
 8002b82:	690b      	ldr	r3, [r1, #16]
 8002b84:	4607      	mov	r7, r0
 8002b86:	4293      	cmp	r3, r2
 8002b88:	bfb8      	it	lt
 8002b8a:	4613      	movlt	r3, r2
 8002b8c:	6033      	str	r3, [r6, #0]
 8002b8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b92:	460c      	mov	r4, r1
 8002b94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b98:	b10a      	cbz	r2, 8002b9e <_printf_common+0x26>
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	6033      	str	r3, [r6, #0]
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	0699      	lsls	r1, r3, #26
 8002ba2:	bf42      	ittt	mi
 8002ba4:	6833      	ldrmi	r3, [r6, #0]
 8002ba6:	3302      	addmi	r3, #2
 8002ba8:	6033      	strmi	r3, [r6, #0]
 8002baa:	6825      	ldr	r5, [r4, #0]
 8002bac:	f015 0506 	ands.w	r5, r5, #6
 8002bb0:	d106      	bne.n	8002bc0 <_printf_common+0x48>
 8002bb2:	f104 0a19 	add.w	sl, r4, #25
 8002bb6:	68e3      	ldr	r3, [r4, #12]
 8002bb8:	6832      	ldr	r2, [r6, #0]
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	42ab      	cmp	r3, r5
 8002bbe:	dc28      	bgt.n	8002c12 <_printf_common+0x9a>
 8002bc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002bc4:	1e13      	subs	r3, r2, #0
 8002bc6:	6822      	ldr	r2, [r4, #0]
 8002bc8:	bf18      	it	ne
 8002bca:	2301      	movne	r3, #1
 8002bcc:	0692      	lsls	r2, r2, #26
 8002bce:	d42d      	bmi.n	8002c2c <_printf_common+0xb4>
 8002bd0:	4649      	mov	r1, r9
 8002bd2:	4638      	mov	r0, r7
 8002bd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bd8:	47c0      	blx	r8
 8002bda:	3001      	adds	r0, #1
 8002bdc:	d020      	beq.n	8002c20 <_printf_common+0xa8>
 8002bde:	6823      	ldr	r3, [r4, #0]
 8002be0:	68e5      	ldr	r5, [r4, #12]
 8002be2:	f003 0306 	and.w	r3, r3, #6
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	bf18      	it	ne
 8002bea:	2500      	movne	r5, #0
 8002bec:	6832      	ldr	r2, [r6, #0]
 8002bee:	f04f 0600 	mov.w	r6, #0
 8002bf2:	68a3      	ldr	r3, [r4, #8]
 8002bf4:	bf08      	it	eq
 8002bf6:	1aad      	subeq	r5, r5, r2
 8002bf8:	6922      	ldr	r2, [r4, #16]
 8002bfa:	bf08      	it	eq
 8002bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c00:	4293      	cmp	r3, r2
 8002c02:	bfc4      	itt	gt
 8002c04:	1a9b      	subgt	r3, r3, r2
 8002c06:	18ed      	addgt	r5, r5, r3
 8002c08:	341a      	adds	r4, #26
 8002c0a:	42b5      	cmp	r5, r6
 8002c0c:	d11a      	bne.n	8002c44 <_printf_common+0xcc>
 8002c0e:	2000      	movs	r0, #0
 8002c10:	e008      	b.n	8002c24 <_printf_common+0xac>
 8002c12:	2301      	movs	r3, #1
 8002c14:	4652      	mov	r2, sl
 8002c16:	4649      	mov	r1, r9
 8002c18:	4638      	mov	r0, r7
 8002c1a:	47c0      	blx	r8
 8002c1c:	3001      	adds	r0, #1
 8002c1e:	d103      	bne.n	8002c28 <_printf_common+0xb0>
 8002c20:	f04f 30ff 	mov.w	r0, #4294967295
 8002c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c28:	3501      	adds	r5, #1
 8002c2a:	e7c4      	b.n	8002bb6 <_printf_common+0x3e>
 8002c2c:	2030      	movs	r0, #48	; 0x30
 8002c2e:	18e1      	adds	r1, r4, r3
 8002c30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c3a:	4422      	add	r2, r4
 8002c3c:	3302      	adds	r3, #2
 8002c3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c42:	e7c5      	b.n	8002bd0 <_printf_common+0x58>
 8002c44:	2301      	movs	r3, #1
 8002c46:	4622      	mov	r2, r4
 8002c48:	4649      	mov	r1, r9
 8002c4a:	4638      	mov	r0, r7
 8002c4c:	47c0      	blx	r8
 8002c4e:	3001      	adds	r0, #1
 8002c50:	d0e6      	beq.n	8002c20 <_printf_common+0xa8>
 8002c52:	3601      	adds	r6, #1
 8002c54:	e7d9      	b.n	8002c0a <_printf_common+0x92>
	...

08002c58 <_printf_i>:
 8002c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c5c:	460c      	mov	r4, r1
 8002c5e:	7e27      	ldrb	r7, [r4, #24]
 8002c60:	4691      	mov	r9, r2
 8002c62:	2f78      	cmp	r7, #120	; 0x78
 8002c64:	4680      	mov	r8, r0
 8002c66:	469a      	mov	sl, r3
 8002c68:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002c6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c6e:	d807      	bhi.n	8002c80 <_printf_i+0x28>
 8002c70:	2f62      	cmp	r7, #98	; 0x62
 8002c72:	d80a      	bhi.n	8002c8a <_printf_i+0x32>
 8002c74:	2f00      	cmp	r7, #0
 8002c76:	f000 80d9 	beq.w	8002e2c <_printf_i+0x1d4>
 8002c7a:	2f58      	cmp	r7, #88	; 0x58
 8002c7c:	f000 80a4 	beq.w	8002dc8 <_printf_i+0x170>
 8002c80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002c84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c88:	e03a      	b.n	8002d00 <_printf_i+0xa8>
 8002c8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c8e:	2b15      	cmp	r3, #21
 8002c90:	d8f6      	bhi.n	8002c80 <_printf_i+0x28>
 8002c92:	a001      	add	r0, pc, #4	; (adr r0, 8002c98 <_printf_i+0x40>)
 8002c94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002c98:	08002cf1 	.word	0x08002cf1
 8002c9c:	08002d05 	.word	0x08002d05
 8002ca0:	08002c81 	.word	0x08002c81
 8002ca4:	08002c81 	.word	0x08002c81
 8002ca8:	08002c81 	.word	0x08002c81
 8002cac:	08002c81 	.word	0x08002c81
 8002cb0:	08002d05 	.word	0x08002d05
 8002cb4:	08002c81 	.word	0x08002c81
 8002cb8:	08002c81 	.word	0x08002c81
 8002cbc:	08002c81 	.word	0x08002c81
 8002cc0:	08002c81 	.word	0x08002c81
 8002cc4:	08002e13 	.word	0x08002e13
 8002cc8:	08002d35 	.word	0x08002d35
 8002ccc:	08002df5 	.word	0x08002df5
 8002cd0:	08002c81 	.word	0x08002c81
 8002cd4:	08002c81 	.word	0x08002c81
 8002cd8:	08002e35 	.word	0x08002e35
 8002cdc:	08002c81 	.word	0x08002c81
 8002ce0:	08002d35 	.word	0x08002d35
 8002ce4:	08002c81 	.word	0x08002c81
 8002ce8:	08002c81 	.word	0x08002c81
 8002cec:	08002dfd 	.word	0x08002dfd
 8002cf0:	680b      	ldr	r3, [r1, #0]
 8002cf2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002cf6:	1d1a      	adds	r2, r3, #4
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	600a      	str	r2, [r1, #0]
 8002cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0a4      	b.n	8002e4e <_printf_i+0x1f6>
 8002d04:	6825      	ldr	r5, [r4, #0]
 8002d06:	6808      	ldr	r0, [r1, #0]
 8002d08:	062e      	lsls	r6, r5, #24
 8002d0a:	f100 0304 	add.w	r3, r0, #4
 8002d0e:	d50a      	bpl.n	8002d26 <_printf_i+0xce>
 8002d10:	6805      	ldr	r5, [r0, #0]
 8002d12:	600b      	str	r3, [r1, #0]
 8002d14:	2d00      	cmp	r5, #0
 8002d16:	da03      	bge.n	8002d20 <_printf_i+0xc8>
 8002d18:	232d      	movs	r3, #45	; 0x2d
 8002d1a:	426d      	negs	r5, r5
 8002d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d20:	230a      	movs	r3, #10
 8002d22:	485e      	ldr	r0, [pc, #376]	; (8002e9c <_printf_i+0x244>)
 8002d24:	e019      	b.n	8002d5a <_printf_i+0x102>
 8002d26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002d2a:	6805      	ldr	r5, [r0, #0]
 8002d2c:	600b      	str	r3, [r1, #0]
 8002d2e:	bf18      	it	ne
 8002d30:	b22d      	sxthne	r5, r5
 8002d32:	e7ef      	b.n	8002d14 <_printf_i+0xbc>
 8002d34:	680b      	ldr	r3, [r1, #0]
 8002d36:	6825      	ldr	r5, [r4, #0]
 8002d38:	1d18      	adds	r0, r3, #4
 8002d3a:	6008      	str	r0, [r1, #0]
 8002d3c:	0628      	lsls	r0, r5, #24
 8002d3e:	d501      	bpl.n	8002d44 <_printf_i+0xec>
 8002d40:	681d      	ldr	r5, [r3, #0]
 8002d42:	e002      	b.n	8002d4a <_printf_i+0xf2>
 8002d44:	0669      	lsls	r1, r5, #25
 8002d46:	d5fb      	bpl.n	8002d40 <_printf_i+0xe8>
 8002d48:	881d      	ldrh	r5, [r3, #0]
 8002d4a:	2f6f      	cmp	r7, #111	; 0x6f
 8002d4c:	bf0c      	ite	eq
 8002d4e:	2308      	moveq	r3, #8
 8002d50:	230a      	movne	r3, #10
 8002d52:	4852      	ldr	r0, [pc, #328]	; (8002e9c <_printf_i+0x244>)
 8002d54:	2100      	movs	r1, #0
 8002d56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d5a:	6866      	ldr	r6, [r4, #4]
 8002d5c:	2e00      	cmp	r6, #0
 8002d5e:	bfa8      	it	ge
 8002d60:	6821      	ldrge	r1, [r4, #0]
 8002d62:	60a6      	str	r6, [r4, #8]
 8002d64:	bfa4      	itt	ge
 8002d66:	f021 0104 	bicge.w	r1, r1, #4
 8002d6a:	6021      	strge	r1, [r4, #0]
 8002d6c:	b90d      	cbnz	r5, 8002d72 <_printf_i+0x11a>
 8002d6e:	2e00      	cmp	r6, #0
 8002d70:	d04d      	beq.n	8002e0e <_printf_i+0x1b6>
 8002d72:	4616      	mov	r6, r2
 8002d74:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d78:	fb03 5711 	mls	r7, r3, r1, r5
 8002d7c:	5dc7      	ldrb	r7, [r0, r7]
 8002d7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d82:	462f      	mov	r7, r5
 8002d84:	42bb      	cmp	r3, r7
 8002d86:	460d      	mov	r5, r1
 8002d88:	d9f4      	bls.n	8002d74 <_printf_i+0x11c>
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d10b      	bne.n	8002da6 <_printf_i+0x14e>
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	07df      	lsls	r7, r3, #31
 8002d92:	d508      	bpl.n	8002da6 <_printf_i+0x14e>
 8002d94:	6923      	ldr	r3, [r4, #16]
 8002d96:	6861      	ldr	r1, [r4, #4]
 8002d98:	4299      	cmp	r1, r3
 8002d9a:	bfde      	ittt	le
 8002d9c:	2330      	movle	r3, #48	; 0x30
 8002d9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002da2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002da6:	1b92      	subs	r2, r2, r6
 8002da8:	6122      	str	r2, [r4, #16]
 8002daa:	464b      	mov	r3, r9
 8002dac:	4621      	mov	r1, r4
 8002dae:	4640      	mov	r0, r8
 8002db0:	f8cd a000 	str.w	sl, [sp]
 8002db4:	aa03      	add	r2, sp, #12
 8002db6:	f7ff fedf 	bl	8002b78 <_printf_common>
 8002dba:	3001      	adds	r0, #1
 8002dbc:	d14c      	bne.n	8002e58 <_printf_i+0x200>
 8002dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc2:	b004      	add	sp, #16
 8002dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dc8:	4834      	ldr	r0, [pc, #208]	; (8002e9c <_printf_i+0x244>)
 8002dca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002dce:	680e      	ldr	r6, [r1, #0]
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	f856 5b04 	ldr.w	r5, [r6], #4
 8002dd6:	061f      	lsls	r7, r3, #24
 8002dd8:	600e      	str	r6, [r1, #0]
 8002dda:	d514      	bpl.n	8002e06 <_printf_i+0x1ae>
 8002ddc:	07d9      	lsls	r1, r3, #31
 8002dde:	bf44      	itt	mi
 8002de0:	f043 0320 	orrmi.w	r3, r3, #32
 8002de4:	6023      	strmi	r3, [r4, #0]
 8002de6:	b91d      	cbnz	r5, 8002df0 <_printf_i+0x198>
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	f023 0320 	bic.w	r3, r3, #32
 8002dee:	6023      	str	r3, [r4, #0]
 8002df0:	2310      	movs	r3, #16
 8002df2:	e7af      	b.n	8002d54 <_printf_i+0xfc>
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	f043 0320 	orr.w	r3, r3, #32
 8002dfa:	6023      	str	r3, [r4, #0]
 8002dfc:	2378      	movs	r3, #120	; 0x78
 8002dfe:	4828      	ldr	r0, [pc, #160]	; (8002ea0 <_printf_i+0x248>)
 8002e00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e04:	e7e3      	b.n	8002dce <_printf_i+0x176>
 8002e06:	065e      	lsls	r6, r3, #25
 8002e08:	bf48      	it	mi
 8002e0a:	b2ad      	uxthmi	r5, r5
 8002e0c:	e7e6      	b.n	8002ddc <_printf_i+0x184>
 8002e0e:	4616      	mov	r6, r2
 8002e10:	e7bb      	b.n	8002d8a <_printf_i+0x132>
 8002e12:	680b      	ldr	r3, [r1, #0]
 8002e14:	6826      	ldr	r6, [r4, #0]
 8002e16:	1d1d      	adds	r5, r3, #4
 8002e18:	6960      	ldr	r0, [r4, #20]
 8002e1a:	600d      	str	r5, [r1, #0]
 8002e1c:	0635      	lsls	r5, r6, #24
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	d501      	bpl.n	8002e26 <_printf_i+0x1ce>
 8002e22:	6018      	str	r0, [r3, #0]
 8002e24:	e002      	b.n	8002e2c <_printf_i+0x1d4>
 8002e26:	0671      	lsls	r1, r6, #25
 8002e28:	d5fb      	bpl.n	8002e22 <_printf_i+0x1ca>
 8002e2a:	8018      	strh	r0, [r3, #0]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	4616      	mov	r6, r2
 8002e30:	6123      	str	r3, [r4, #16]
 8002e32:	e7ba      	b.n	8002daa <_printf_i+0x152>
 8002e34:	680b      	ldr	r3, [r1, #0]
 8002e36:	1d1a      	adds	r2, r3, #4
 8002e38:	600a      	str	r2, [r1, #0]
 8002e3a:	681e      	ldr	r6, [r3, #0]
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4630      	mov	r0, r6
 8002e40:	6862      	ldr	r2, [r4, #4]
 8002e42:	f000 fa9d 	bl	8003380 <memchr>
 8002e46:	b108      	cbz	r0, 8002e4c <_printf_i+0x1f4>
 8002e48:	1b80      	subs	r0, r0, r6
 8002e4a:	6060      	str	r0, [r4, #4]
 8002e4c:	6863      	ldr	r3, [r4, #4]
 8002e4e:	6123      	str	r3, [r4, #16]
 8002e50:	2300      	movs	r3, #0
 8002e52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e56:	e7a8      	b.n	8002daa <_printf_i+0x152>
 8002e58:	4632      	mov	r2, r6
 8002e5a:	4649      	mov	r1, r9
 8002e5c:	4640      	mov	r0, r8
 8002e5e:	6923      	ldr	r3, [r4, #16]
 8002e60:	47d0      	blx	sl
 8002e62:	3001      	adds	r0, #1
 8002e64:	d0ab      	beq.n	8002dbe <_printf_i+0x166>
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	079b      	lsls	r3, r3, #30
 8002e6a:	d413      	bmi.n	8002e94 <_printf_i+0x23c>
 8002e6c:	68e0      	ldr	r0, [r4, #12]
 8002e6e:	9b03      	ldr	r3, [sp, #12]
 8002e70:	4298      	cmp	r0, r3
 8002e72:	bfb8      	it	lt
 8002e74:	4618      	movlt	r0, r3
 8002e76:	e7a4      	b.n	8002dc2 <_printf_i+0x16a>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	4632      	mov	r2, r6
 8002e7c:	4649      	mov	r1, r9
 8002e7e:	4640      	mov	r0, r8
 8002e80:	47d0      	blx	sl
 8002e82:	3001      	adds	r0, #1
 8002e84:	d09b      	beq.n	8002dbe <_printf_i+0x166>
 8002e86:	3501      	adds	r5, #1
 8002e88:	68e3      	ldr	r3, [r4, #12]
 8002e8a:	9903      	ldr	r1, [sp, #12]
 8002e8c:	1a5b      	subs	r3, r3, r1
 8002e8e:	42ab      	cmp	r3, r5
 8002e90:	dcf2      	bgt.n	8002e78 <_printf_i+0x220>
 8002e92:	e7eb      	b.n	8002e6c <_printf_i+0x214>
 8002e94:	2500      	movs	r5, #0
 8002e96:	f104 0619 	add.w	r6, r4, #25
 8002e9a:	e7f5      	b.n	8002e88 <_printf_i+0x230>
 8002e9c:	08003585 	.word	0x08003585
 8002ea0:	08003596 	.word	0x08003596

08002ea4 <_sbrk_r>:
 8002ea4:	b538      	push	{r3, r4, r5, lr}
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	4d05      	ldr	r5, [pc, #20]	; (8002ec0 <_sbrk_r+0x1c>)
 8002eaa:	4604      	mov	r4, r0
 8002eac:	4608      	mov	r0, r1
 8002eae:	602b      	str	r3, [r5, #0]
 8002eb0:	f7fd fd7a 	bl	80009a8 <_sbrk>
 8002eb4:	1c43      	adds	r3, r0, #1
 8002eb6:	d102      	bne.n	8002ebe <_sbrk_r+0x1a>
 8002eb8:	682b      	ldr	r3, [r5, #0]
 8002eba:	b103      	cbz	r3, 8002ebe <_sbrk_r+0x1a>
 8002ebc:	6023      	str	r3, [r4, #0]
 8002ebe:	bd38      	pop	{r3, r4, r5, pc}
 8002ec0:	20000328 	.word	0x20000328

08002ec4 <__sread>:
 8002ec4:	b510      	push	{r4, lr}
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ecc:	f000 fabe 	bl	800344c <_read_r>
 8002ed0:	2800      	cmp	r0, #0
 8002ed2:	bfab      	itete	ge
 8002ed4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002ed6:	89a3      	ldrhlt	r3, [r4, #12]
 8002ed8:	181b      	addge	r3, r3, r0
 8002eda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ede:	bfac      	ite	ge
 8002ee0:	6563      	strge	r3, [r4, #84]	; 0x54
 8002ee2:	81a3      	strhlt	r3, [r4, #12]
 8002ee4:	bd10      	pop	{r4, pc}

08002ee6 <__swrite>:
 8002ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eea:	461f      	mov	r7, r3
 8002eec:	898b      	ldrh	r3, [r1, #12]
 8002eee:	4605      	mov	r5, r0
 8002ef0:	05db      	lsls	r3, r3, #23
 8002ef2:	460c      	mov	r4, r1
 8002ef4:	4616      	mov	r6, r2
 8002ef6:	d505      	bpl.n	8002f04 <__swrite+0x1e>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	2200      	movs	r2, #0
 8002efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f00:	f000 f9c8 	bl	8003294 <_lseek_r>
 8002f04:	89a3      	ldrh	r3, [r4, #12]
 8002f06:	4632      	mov	r2, r6
 8002f08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f0c:	81a3      	strh	r3, [r4, #12]
 8002f0e:	4628      	mov	r0, r5
 8002f10:	463b      	mov	r3, r7
 8002f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f1a:	f000 b869 	b.w	8002ff0 <_write_r>

08002f1e <__sseek>:
 8002f1e:	b510      	push	{r4, lr}
 8002f20:	460c      	mov	r4, r1
 8002f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f26:	f000 f9b5 	bl	8003294 <_lseek_r>
 8002f2a:	1c43      	adds	r3, r0, #1
 8002f2c:	89a3      	ldrh	r3, [r4, #12]
 8002f2e:	bf15      	itete	ne
 8002f30:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f3a:	81a3      	strheq	r3, [r4, #12]
 8002f3c:	bf18      	it	ne
 8002f3e:	81a3      	strhne	r3, [r4, #12]
 8002f40:	bd10      	pop	{r4, pc}

08002f42 <__sclose>:
 8002f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f46:	f000 b8d3 	b.w	80030f0 <_close_r>
	...

08002f4c <__swbuf_r>:
 8002f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4e:	460e      	mov	r6, r1
 8002f50:	4614      	mov	r4, r2
 8002f52:	4605      	mov	r5, r0
 8002f54:	b118      	cbz	r0, 8002f5e <__swbuf_r+0x12>
 8002f56:	6983      	ldr	r3, [r0, #24]
 8002f58:	b90b      	cbnz	r3, 8002f5e <__swbuf_r+0x12>
 8002f5a:	f7ff fbbb 	bl	80026d4 <__sinit>
 8002f5e:	4b21      	ldr	r3, [pc, #132]	; (8002fe4 <__swbuf_r+0x98>)
 8002f60:	429c      	cmp	r4, r3
 8002f62:	d12b      	bne.n	8002fbc <__swbuf_r+0x70>
 8002f64:	686c      	ldr	r4, [r5, #4]
 8002f66:	69a3      	ldr	r3, [r4, #24]
 8002f68:	60a3      	str	r3, [r4, #8]
 8002f6a:	89a3      	ldrh	r3, [r4, #12]
 8002f6c:	071a      	lsls	r2, r3, #28
 8002f6e:	d52f      	bpl.n	8002fd0 <__swbuf_r+0x84>
 8002f70:	6923      	ldr	r3, [r4, #16]
 8002f72:	b36b      	cbz	r3, 8002fd0 <__swbuf_r+0x84>
 8002f74:	6923      	ldr	r3, [r4, #16]
 8002f76:	6820      	ldr	r0, [r4, #0]
 8002f78:	b2f6      	uxtb	r6, r6
 8002f7a:	1ac0      	subs	r0, r0, r3
 8002f7c:	6963      	ldr	r3, [r4, #20]
 8002f7e:	4637      	mov	r7, r6
 8002f80:	4283      	cmp	r3, r0
 8002f82:	dc04      	bgt.n	8002f8e <__swbuf_r+0x42>
 8002f84:	4621      	mov	r1, r4
 8002f86:	4628      	mov	r0, r5
 8002f88:	f000 f948 	bl	800321c <_fflush_r>
 8002f8c:	bb30      	cbnz	r0, 8002fdc <__swbuf_r+0x90>
 8002f8e:	68a3      	ldr	r3, [r4, #8]
 8002f90:	3001      	adds	r0, #1
 8002f92:	3b01      	subs	r3, #1
 8002f94:	60a3      	str	r3, [r4, #8]
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	6022      	str	r2, [r4, #0]
 8002f9c:	701e      	strb	r6, [r3, #0]
 8002f9e:	6963      	ldr	r3, [r4, #20]
 8002fa0:	4283      	cmp	r3, r0
 8002fa2:	d004      	beq.n	8002fae <__swbuf_r+0x62>
 8002fa4:	89a3      	ldrh	r3, [r4, #12]
 8002fa6:	07db      	lsls	r3, r3, #31
 8002fa8:	d506      	bpl.n	8002fb8 <__swbuf_r+0x6c>
 8002faa:	2e0a      	cmp	r6, #10
 8002fac:	d104      	bne.n	8002fb8 <__swbuf_r+0x6c>
 8002fae:	4621      	mov	r1, r4
 8002fb0:	4628      	mov	r0, r5
 8002fb2:	f000 f933 	bl	800321c <_fflush_r>
 8002fb6:	b988      	cbnz	r0, 8002fdc <__swbuf_r+0x90>
 8002fb8:	4638      	mov	r0, r7
 8002fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <__swbuf_r+0x9c>)
 8002fbe:	429c      	cmp	r4, r3
 8002fc0:	d101      	bne.n	8002fc6 <__swbuf_r+0x7a>
 8002fc2:	68ac      	ldr	r4, [r5, #8]
 8002fc4:	e7cf      	b.n	8002f66 <__swbuf_r+0x1a>
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <__swbuf_r+0xa0>)
 8002fc8:	429c      	cmp	r4, r3
 8002fca:	bf08      	it	eq
 8002fcc:	68ec      	ldreq	r4, [r5, #12]
 8002fce:	e7ca      	b.n	8002f66 <__swbuf_r+0x1a>
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	f000 f81e 	bl	8003014 <__swsetup_r>
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	d0cb      	beq.n	8002f74 <__swbuf_r+0x28>
 8002fdc:	f04f 37ff 	mov.w	r7, #4294967295
 8002fe0:	e7ea      	b.n	8002fb8 <__swbuf_r+0x6c>
 8002fe2:	bf00      	nop
 8002fe4:	08003534 	.word	0x08003534
 8002fe8:	08003554 	.word	0x08003554
 8002fec:	08003514 	.word	0x08003514

08002ff0 <_write_r>:
 8002ff0:	b538      	push	{r3, r4, r5, lr}
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	4d05      	ldr	r5, [pc, #20]	; (8003010 <_write_r+0x20>)
 8002ffc:	602a      	str	r2, [r5, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	f7fd fc85 	bl	800090e <_write>
 8003004:	1c43      	adds	r3, r0, #1
 8003006:	d102      	bne.n	800300e <_write_r+0x1e>
 8003008:	682b      	ldr	r3, [r5, #0]
 800300a:	b103      	cbz	r3, 800300e <_write_r+0x1e>
 800300c:	6023      	str	r3, [r4, #0]
 800300e:	bd38      	pop	{r3, r4, r5, pc}
 8003010:	20000328 	.word	0x20000328

08003014 <__swsetup_r>:
 8003014:	4b32      	ldr	r3, [pc, #200]	; (80030e0 <__swsetup_r+0xcc>)
 8003016:	b570      	push	{r4, r5, r6, lr}
 8003018:	681d      	ldr	r5, [r3, #0]
 800301a:	4606      	mov	r6, r0
 800301c:	460c      	mov	r4, r1
 800301e:	b125      	cbz	r5, 800302a <__swsetup_r+0x16>
 8003020:	69ab      	ldr	r3, [r5, #24]
 8003022:	b913      	cbnz	r3, 800302a <__swsetup_r+0x16>
 8003024:	4628      	mov	r0, r5
 8003026:	f7ff fb55 	bl	80026d4 <__sinit>
 800302a:	4b2e      	ldr	r3, [pc, #184]	; (80030e4 <__swsetup_r+0xd0>)
 800302c:	429c      	cmp	r4, r3
 800302e:	d10f      	bne.n	8003050 <__swsetup_r+0x3c>
 8003030:	686c      	ldr	r4, [r5, #4]
 8003032:	89a3      	ldrh	r3, [r4, #12]
 8003034:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003038:	0719      	lsls	r1, r3, #28
 800303a:	d42c      	bmi.n	8003096 <__swsetup_r+0x82>
 800303c:	06dd      	lsls	r5, r3, #27
 800303e:	d411      	bmi.n	8003064 <__swsetup_r+0x50>
 8003040:	2309      	movs	r3, #9
 8003042:	6033      	str	r3, [r6, #0]
 8003044:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003048:	f04f 30ff 	mov.w	r0, #4294967295
 800304c:	81a3      	strh	r3, [r4, #12]
 800304e:	e03e      	b.n	80030ce <__swsetup_r+0xba>
 8003050:	4b25      	ldr	r3, [pc, #148]	; (80030e8 <__swsetup_r+0xd4>)
 8003052:	429c      	cmp	r4, r3
 8003054:	d101      	bne.n	800305a <__swsetup_r+0x46>
 8003056:	68ac      	ldr	r4, [r5, #8]
 8003058:	e7eb      	b.n	8003032 <__swsetup_r+0x1e>
 800305a:	4b24      	ldr	r3, [pc, #144]	; (80030ec <__swsetup_r+0xd8>)
 800305c:	429c      	cmp	r4, r3
 800305e:	bf08      	it	eq
 8003060:	68ec      	ldreq	r4, [r5, #12]
 8003062:	e7e6      	b.n	8003032 <__swsetup_r+0x1e>
 8003064:	0758      	lsls	r0, r3, #29
 8003066:	d512      	bpl.n	800308e <__swsetup_r+0x7a>
 8003068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800306a:	b141      	cbz	r1, 800307e <__swsetup_r+0x6a>
 800306c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003070:	4299      	cmp	r1, r3
 8003072:	d002      	beq.n	800307a <__swsetup_r+0x66>
 8003074:	4630      	mov	r0, r6
 8003076:	f000 f99d 	bl	80033b4 <_free_r>
 800307a:	2300      	movs	r3, #0
 800307c:	6363      	str	r3, [r4, #52]	; 0x34
 800307e:	89a3      	ldrh	r3, [r4, #12]
 8003080:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003084:	81a3      	strh	r3, [r4, #12]
 8003086:	2300      	movs	r3, #0
 8003088:	6063      	str	r3, [r4, #4]
 800308a:	6923      	ldr	r3, [r4, #16]
 800308c:	6023      	str	r3, [r4, #0]
 800308e:	89a3      	ldrh	r3, [r4, #12]
 8003090:	f043 0308 	orr.w	r3, r3, #8
 8003094:	81a3      	strh	r3, [r4, #12]
 8003096:	6923      	ldr	r3, [r4, #16]
 8003098:	b94b      	cbnz	r3, 80030ae <__swsetup_r+0x9a>
 800309a:	89a3      	ldrh	r3, [r4, #12]
 800309c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80030a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a4:	d003      	beq.n	80030ae <__swsetup_r+0x9a>
 80030a6:	4621      	mov	r1, r4
 80030a8:	4630      	mov	r0, r6
 80030aa:	f000 f929 	bl	8003300 <__smakebuf_r>
 80030ae:	89a0      	ldrh	r0, [r4, #12]
 80030b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030b4:	f010 0301 	ands.w	r3, r0, #1
 80030b8:	d00a      	beq.n	80030d0 <__swsetup_r+0xbc>
 80030ba:	2300      	movs	r3, #0
 80030bc:	60a3      	str	r3, [r4, #8]
 80030be:	6963      	ldr	r3, [r4, #20]
 80030c0:	425b      	negs	r3, r3
 80030c2:	61a3      	str	r3, [r4, #24]
 80030c4:	6923      	ldr	r3, [r4, #16]
 80030c6:	b943      	cbnz	r3, 80030da <__swsetup_r+0xc6>
 80030c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80030cc:	d1ba      	bne.n	8003044 <__swsetup_r+0x30>
 80030ce:	bd70      	pop	{r4, r5, r6, pc}
 80030d0:	0781      	lsls	r1, r0, #30
 80030d2:	bf58      	it	pl
 80030d4:	6963      	ldrpl	r3, [r4, #20]
 80030d6:	60a3      	str	r3, [r4, #8]
 80030d8:	e7f4      	b.n	80030c4 <__swsetup_r+0xb0>
 80030da:	2000      	movs	r0, #0
 80030dc:	e7f7      	b.n	80030ce <__swsetup_r+0xba>
 80030de:	bf00      	nop
 80030e0:	2000000c 	.word	0x2000000c
 80030e4:	08003534 	.word	0x08003534
 80030e8:	08003554 	.word	0x08003554
 80030ec:	08003514 	.word	0x08003514

080030f0 <_close_r>:
 80030f0:	b538      	push	{r3, r4, r5, lr}
 80030f2:	2300      	movs	r3, #0
 80030f4:	4d05      	ldr	r5, [pc, #20]	; (800310c <_close_r+0x1c>)
 80030f6:	4604      	mov	r4, r0
 80030f8:	4608      	mov	r0, r1
 80030fa:	602b      	str	r3, [r5, #0]
 80030fc:	f7fd fc23 	bl	8000946 <_close>
 8003100:	1c43      	adds	r3, r0, #1
 8003102:	d102      	bne.n	800310a <_close_r+0x1a>
 8003104:	682b      	ldr	r3, [r5, #0]
 8003106:	b103      	cbz	r3, 800310a <_close_r+0x1a>
 8003108:	6023      	str	r3, [r4, #0]
 800310a:	bd38      	pop	{r3, r4, r5, pc}
 800310c:	20000328 	.word	0x20000328

08003110 <__sflush_r>:
 8003110:	898a      	ldrh	r2, [r1, #12]
 8003112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003116:	4605      	mov	r5, r0
 8003118:	0710      	lsls	r0, r2, #28
 800311a:	460c      	mov	r4, r1
 800311c:	d458      	bmi.n	80031d0 <__sflush_r+0xc0>
 800311e:	684b      	ldr	r3, [r1, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	dc05      	bgt.n	8003130 <__sflush_r+0x20>
 8003124:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	dc02      	bgt.n	8003130 <__sflush_r+0x20>
 800312a:	2000      	movs	r0, #0
 800312c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003130:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003132:	2e00      	cmp	r6, #0
 8003134:	d0f9      	beq.n	800312a <__sflush_r+0x1a>
 8003136:	2300      	movs	r3, #0
 8003138:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800313c:	682f      	ldr	r7, [r5, #0]
 800313e:	602b      	str	r3, [r5, #0]
 8003140:	d032      	beq.n	80031a8 <__sflush_r+0x98>
 8003142:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003144:	89a3      	ldrh	r3, [r4, #12]
 8003146:	075a      	lsls	r2, r3, #29
 8003148:	d505      	bpl.n	8003156 <__sflush_r+0x46>
 800314a:	6863      	ldr	r3, [r4, #4]
 800314c:	1ac0      	subs	r0, r0, r3
 800314e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003150:	b10b      	cbz	r3, 8003156 <__sflush_r+0x46>
 8003152:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003154:	1ac0      	subs	r0, r0, r3
 8003156:	2300      	movs	r3, #0
 8003158:	4602      	mov	r2, r0
 800315a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800315c:	4628      	mov	r0, r5
 800315e:	6a21      	ldr	r1, [r4, #32]
 8003160:	47b0      	blx	r6
 8003162:	1c43      	adds	r3, r0, #1
 8003164:	89a3      	ldrh	r3, [r4, #12]
 8003166:	d106      	bne.n	8003176 <__sflush_r+0x66>
 8003168:	6829      	ldr	r1, [r5, #0]
 800316a:	291d      	cmp	r1, #29
 800316c:	d82c      	bhi.n	80031c8 <__sflush_r+0xb8>
 800316e:	4a2a      	ldr	r2, [pc, #168]	; (8003218 <__sflush_r+0x108>)
 8003170:	40ca      	lsrs	r2, r1
 8003172:	07d6      	lsls	r6, r2, #31
 8003174:	d528      	bpl.n	80031c8 <__sflush_r+0xb8>
 8003176:	2200      	movs	r2, #0
 8003178:	6062      	str	r2, [r4, #4]
 800317a:	6922      	ldr	r2, [r4, #16]
 800317c:	04d9      	lsls	r1, r3, #19
 800317e:	6022      	str	r2, [r4, #0]
 8003180:	d504      	bpl.n	800318c <__sflush_r+0x7c>
 8003182:	1c42      	adds	r2, r0, #1
 8003184:	d101      	bne.n	800318a <__sflush_r+0x7a>
 8003186:	682b      	ldr	r3, [r5, #0]
 8003188:	b903      	cbnz	r3, 800318c <__sflush_r+0x7c>
 800318a:	6560      	str	r0, [r4, #84]	; 0x54
 800318c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800318e:	602f      	str	r7, [r5, #0]
 8003190:	2900      	cmp	r1, #0
 8003192:	d0ca      	beq.n	800312a <__sflush_r+0x1a>
 8003194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003198:	4299      	cmp	r1, r3
 800319a:	d002      	beq.n	80031a2 <__sflush_r+0x92>
 800319c:	4628      	mov	r0, r5
 800319e:	f000 f909 	bl	80033b4 <_free_r>
 80031a2:	2000      	movs	r0, #0
 80031a4:	6360      	str	r0, [r4, #52]	; 0x34
 80031a6:	e7c1      	b.n	800312c <__sflush_r+0x1c>
 80031a8:	6a21      	ldr	r1, [r4, #32]
 80031aa:	2301      	movs	r3, #1
 80031ac:	4628      	mov	r0, r5
 80031ae:	47b0      	blx	r6
 80031b0:	1c41      	adds	r1, r0, #1
 80031b2:	d1c7      	bne.n	8003144 <__sflush_r+0x34>
 80031b4:	682b      	ldr	r3, [r5, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0c4      	beq.n	8003144 <__sflush_r+0x34>
 80031ba:	2b1d      	cmp	r3, #29
 80031bc:	d001      	beq.n	80031c2 <__sflush_r+0xb2>
 80031be:	2b16      	cmp	r3, #22
 80031c0:	d101      	bne.n	80031c6 <__sflush_r+0xb6>
 80031c2:	602f      	str	r7, [r5, #0]
 80031c4:	e7b1      	b.n	800312a <__sflush_r+0x1a>
 80031c6:	89a3      	ldrh	r3, [r4, #12]
 80031c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031cc:	81a3      	strh	r3, [r4, #12]
 80031ce:	e7ad      	b.n	800312c <__sflush_r+0x1c>
 80031d0:	690f      	ldr	r7, [r1, #16]
 80031d2:	2f00      	cmp	r7, #0
 80031d4:	d0a9      	beq.n	800312a <__sflush_r+0x1a>
 80031d6:	0793      	lsls	r3, r2, #30
 80031d8:	bf18      	it	ne
 80031da:	2300      	movne	r3, #0
 80031dc:	680e      	ldr	r6, [r1, #0]
 80031de:	bf08      	it	eq
 80031e0:	694b      	ldreq	r3, [r1, #20]
 80031e2:	eba6 0807 	sub.w	r8, r6, r7
 80031e6:	600f      	str	r7, [r1, #0]
 80031e8:	608b      	str	r3, [r1, #8]
 80031ea:	f1b8 0f00 	cmp.w	r8, #0
 80031ee:	dd9c      	ble.n	800312a <__sflush_r+0x1a>
 80031f0:	4643      	mov	r3, r8
 80031f2:	463a      	mov	r2, r7
 80031f4:	4628      	mov	r0, r5
 80031f6:	6a21      	ldr	r1, [r4, #32]
 80031f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80031fa:	47b0      	blx	r6
 80031fc:	2800      	cmp	r0, #0
 80031fe:	dc06      	bgt.n	800320e <__sflush_r+0xfe>
 8003200:	89a3      	ldrh	r3, [r4, #12]
 8003202:	f04f 30ff 	mov.w	r0, #4294967295
 8003206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800320a:	81a3      	strh	r3, [r4, #12]
 800320c:	e78e      	b.n	800312c <__sflush_r+0x1c>
 800320e:	4407      	add	r7, r0
 8003210:	eba8 0800 	sub.w	r8, r8, r0
 8003214:	e7e9      	b.n	80031ea <__sflush_r+0xda>
 8003216:	bf00      	nop
 8003218:	20400001 	.word	0x20400001

0800321c <_fflush_r>:
 800321c:	b538      	push	{r3, r4, r5, lr}
 800321e:	690b      	ldr	r3, [r1, #16]
 8003220:	4605      	mov	r5, r0
 8003222:	460c      	mov	r4, r1
 8003224:	b913      	cbnz	r3, 800322c <_fflush_r+0x10>
 8003226:	2500      	movs	r5, #0
 8003228:	4628      	mov	r0, r5
 800322a:	bd38      	pop	{r3, r4, r5, pc}
 800322c:	b118      	cbz	r0, 8003236 <_fflush_r+0x1a>
 800322e:	6983      	ldr	r3, [r0, #24]
 8003230:	b90b      	cbnz	r3, 8003236 <_fflush_r+0x1a>
 8003232:	f7ff fa4f 	bl	80026d4 <__sinit>
 8003236:	4b14      	ldr	r3, [pc, #80]	; (8003288 <_fflush_r+0x6c>)
 8003238:	429c      	cmp	r4, r3
 800323a:	d11b      	bne.n	8003274 <_fflush_r+0x58>
 800323c:	686c      	ldr	r4, [r5, #4]
 800323e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0ef      	beq.n	8003226 <_fflush_r+0xa>
 8003246:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003248:	07d0      	lsls	r0, r2, #31
 800324a:	d404      	bmi.n	8003256 <_fflush_r+0x3a>
 800324c:	0599      	lsls	r1, r3, #22
 800324e:	d402      	bmi.n	8003256 <_fflush_r+0x3a>
 8003250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003252:	f7ff fadd 	bl	8002810 <__retarget_lock_acquire_recursive>
 8003256:	4628      	mov	r0, r5
 8003258:	4621      	mov	r1, r4
 800325a:	f7ff ff59 	bl	8003110 <__sflush_r>
 800325e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003260:	4605      	mov	r5, r0
 8003262:	07da      	lsls	r2, r3, #31
 8003264:	d4e0      	bmi.n	8003228 <_fflush_r+0xc>
 8003266:	89a3      	ldrh	r3, [r4, #12]
 8003268:	059b      	lsls	r3, r3, #22
 800326a:	d4dd      	bmi.n	8003228 <_fflush_r+0xc>
 800326c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800326e:	f7ff fad0 	bl	8002812 <__retarget_lock_release_recursive>
 8003272:	e7d9      	b.n	8003228 <_fflush_r+0xc>
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <_fflush_r+0x70>)
 8003276:	429c      	cmp	r4, r3
 8003278:	d101      	bne.n	800327e <_fflush_r+0x62>
 800327a:	68ac      	ldr	r4, [r5, #8]
 800327c:	e7df      	b.n	800323e <_fflush_r+0x22>
 800327e:	4b04      	ldr	r3, [pc, #16]	; (8003290 <_fflush_r+0x74>)
 8003280:	429c      	cmp	r4, r3
 8003282:	bf08      	it	eq
 8003284:	68ec      	ldreq	r4, [r5, #12]
 8003286:	e7da      	b.n	800323e <_fflush_r+0x22>
 8003288:	08003534 	.word	0x08003534
 800328c:	08003554 	.word	0x08003554
 8003290:	08003514 	.word	0x08003514

08003294 <_lseek_r>:
 8003294:	b538      	push	{r3, r4, r5, lr}
 8003296:	4604      	mov	r4, r0
 8003298:	4608      	mov	r0, r1
 800329a:	4611      	mov	r1, r2
 800329c:	2200      	movs	r2, #0
 800329e:	4d05      	ldr	r5, [pc, #20]	; (80032b4 <_lseek_r+0x20>)
 80032a0:	602a      	str	r2, [r5, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	f7fd fb73 	bl	800098e <_lseek>
 80032a8:	1c43      	adds	r3, r0, #1
 80032aa:	d102      	bne.n	80032b2 <_lseek_r+0x1e>
 80032ac:	682b      	ldr	r3, [r5, #0]
 80032ae:	b103      	cbz	r3, 80032b2 <_lseek_r+0x1e>
 80032b0:	6023      	str	r3, [r4, #0]
 80032b2:	bd38      	pop	{r3, r4, r5, pc}
 80032b4:	20000328 	.word	0x20000328

080032b8 <__swhatbuf_r>:
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	460e      	mov	r6, r1
 80032bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032c0:	4614      	mov	r4, r2
 80032c2:	2900      	cmp	r1, #0
 80032c4:	461d      	mov	r5, r3
 80032c6:	b096      	sub	sp, #88	; 0x58
 80032c8:	da07      	bge.n	80032da <__swhatbuf_r+0x22>
 80032ca:	2300      	movs	r3, #0
 80032cc:	602b      	str	r3, [r5, #0]
 80032ce:	89b3      	ldrh	r3, [r6, #12]
 80032d0:	061a      	lsls	r2, r3, #24
 80032d2:	d410      	bmi.n	80032f6 <__swhatbuf_r+0x3e>
 80032d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032d8:	e00e      	b.n	80032f8 <__swhatbuf_r+0x40>
 80032da:	466a      	mov	r2, sp
 80032dc:	f000 f8c8 	bl	8003470 <_fstat_r>
 80032e0:	2800      	cmp	r0, #0
 80032e2:	dbf2      	blt.n	80032ca <__swhatbuf_r+0x12>
 80032e4:	9a01      	ldr	r2, [sp, #4]
 80032e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80032ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80032ee:	425a      	negs	r2, r3
 80032f0:	415a      	adcs	r2, r3
 80032f2:	602a      	str	r2, [r5, #0]
 80032f4:	e7ee      	b.n	80032d4 <__swhatbuf_r+0x1c>
 80032f6:	2340      	movs	r3, #64	; 0x40
 80032f8:	2000      	movs	r0, #0
 80032fa:	6023      	str	r3, [r4, #0]
 80032fc:	b016      	add	sp, #88	; 0x58
 80032fe:	bd70      	pop	{r4, r5, r6, pc}

08003300 <__smakebuf_r>:
 8003300:	898b      	ldrh	r3, [r1, #12]
 8003302:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003304:	079d      	lsls	r5, r3, #30
 8003306:	4606      	mov	r6, r0
 8003308:	460c      	mov	r4, r1
 800330a:	d507      	bpl.n	800331c <__smakebuf_r+0x1c>
 800330c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003310:	6023      	str	r3, [r4, #0]
 8003312:	6123      	str	r3, [r4, #16]
 8003314:	2301      	movs	r3, #1
 8003316:	6163      	str	r3, [r4, #20]
 8003318:	b002      	add	sp, #8
 800331a:	bd70      	pop	{r4, r5, r6, pc}
 800331c:	466a      	mov	r2, sp
 800331e:	ab01      	add	r3, sp, #4
 8003320:	f7ff ffca 	bl	80032b8 <__swhatbuf_r>
 8003324:	9900      	ldr	r1, [sp, #0]
 8003326:	4605      	mov	r5, r0
 8003328:	4630      	mov	r0, r6
 800332a:	f7ff fa73 	bl	8002814 <_malloc_r>
 800332e:	b948      	cbnz	r0, 8003344 <__smakebuf_r+0x44>
 8003330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003334:	059a      	lsls	r2, r3, #22
 8003336:	d4ef      	bmi.n	8003318 <__smakebuf_r+0x18>
 8003338:	f023 0303 	bic.w	r3, r3, #3
 800333c:	f043 0302 	orr.w	r3, r3, #2
 8003340:	81a3      	strh	r3, [r4, #12]
 8003342:	e7e3      	b.n	800330c <__smakebuf_r+0xc>
 8003344:	4b0d      	ldr	r3, [pc, #52]	; (800337c <__smakebuf_r+0x7c>)
 8003346:	62b3      	str	r3, [r6, #40]	; 0x28
 8003348:	89a3      	ldrh	r3, [r4, #12]
 800334a:	6020      	str	r0, [r4, #0]
 800334c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003350:	81a3      	strh	r3, [r4, #12]
 8003352:	9b00      	ldr	r3, [sp, #0]
 8003354:	6120      	str	r0, [r4, #16]
 8003356:	6163      	str	r3, [r4, #20]
 8003358:	9b01      	ldr	r3, [sp, #4]
 800335a:	b15b      	cbz	r3, 8003374 <__smakebuf_r+0x74>
 800335c:	4630      	mov	r0, r6
 800335e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003362:	f000 f897 	bl	8003494 <_isatty_r>
 8003366:	b128      	cbz	r0, 8003374 <__smakebuf_r+0x74>
 8003368:	89a3      	ldrh	r3, [r4, #12]
 800336a:	f023 0303 	bic.w	r3, r3, #3
 800336e:	f043 0301 	orr.w	r3, r3, #1
 8003372:	81a3      	strh	r3, [r4, #12]
 8003374:	89a0      	ldrh	r0, [r4, #12]
 8003376:	4305      	orrs	r5, r0
 8003378:	81a5      	strh	r5, [r4, #12]
 800337a:	e7cd      	b.n	8003318 <__smakebuf_r+0x18>
 800337c:	0800266d 	.word	0x0800266d

08003380 <memchr>:
 8003380:	4603      	mov	r3, r0
 8003382:	b510      	push	{r4, lr}
 8003384:	b2c9      	uxtb	r1, r1
 8003386:	4402      	add	r2, r0
 8003388:	4293      	cmp	r3, r2
 800338a:	4618      	mov	r0, r3
 800338c:	d101      	bne.n	8003392 <memchr+0x12>
 800338e:	2000      	movs	r0, #0
 8003390:	e003      	b.n	800339a <memchr+0x1a>
 8003392:	7804      	ldrb	r4, [r0, #0]
 8003394:	3301      	adds	r3, #1
 8003396:	428c      	cmp	r4, r1
 8003398:	d1f6      	bne.n	8003388 <memchr+0x8>
 800339a:	bd10      	pop	{r4, pc}

0800339c <__malloc_lock>:
 800339c:	4801      	ldr	r0, [pc, #4]	; (80033a4 <__malloc_lock+0x8>)
 800339e:	f7ff ba37 	b.w	8002810 <__retarget_lock_acquire_recursive>
 80033a2:	bf00      	nop
 80033a4:	20000320 	.word	0x20000320

080033a8 <__malloc_unlock>:
 80033a8:	4801      	ldr	r0, [pc, #4]	; (80033b0 <__malloc_unlock+0x8>)
 80033aa:	f7ff ba32 	b.w	8002812 <__retarget_lock_release_recursive>
 80033ae:	bf00      	nop
 80033b0:	20000320 	.word	0x20000320

080033b4 <_free_r>:
 80033b4:	b538      	push	{r3, r4, r5, lr}
 80033b6:	4605      	mov	r5, r0
 80033b8:	2900      	cmp	r1, #0
 80033ba:	d043      	beq.n	8003444 <_free_r+0x90>
 80033bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033c0:	1f0c      	subs	r4, r1, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	bfb8      	it	lt
 80033c6:	18e4      	addlt	r4, r4, r3
 80033c8:	f7ff ffe8 	bl	800339c <__malloc_lock>
 80033cc:	4a1e      	ldr	r2, [pc, #120]	; (8003448 <_free_r+0x94>)
 80033ce:	6813      	ldr	r3, [r2, #0]
 80033d0:	4610      	mov	r0, r2
 80033d2:	b933      	cbnz	r3, 80033e2 <_free_r+0x2e>
 80033d4:	6063      	str	r3, [r4, #4]
 80033d6:	6014      	str	r4, [r2, #0]
 80033d8:	4628      	mov	r0, r5
 80033da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033de:	f7ff bfe3 	b.w	80033a8 <__malloc_unlock>
 80033e2:	42a3      	cmp	r3, r4
 80033e4:	d90a      	bls.n	80033fc <_free_r+0x48>
 80033e6:	6821      	ldr	r1, [r4, #0]
 80033e8:	1862      	adds	r2, r4, r1
 80033ea:	4293      	cmp	r3, r2
 80033ec:	bf01      	itttt	eq
 80033ee:	681a      	ldreq	r2, [r3, #0]
 80033f0:	685b      	ldreq	r3, [r3, #4]
 80033f2:	1852      	addeq	r2, r2, r1
 80033f4:	6022      	streq	r2, [r4, #0]
 80033f6:	6063      	str	r3, [r4, #4]
 80033f8:	6004      	str	r4, [r0, #0]
 80033fa:	e7ed      	b.n	80033d8 <_free_r+0x24>
 80033fc:	461a      	mov	r2, r3
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	b10b      	cbz	r3, 8003406 <_free_r+0x52>
 8003402:	42a3      	cmp	r3, r4
 8003404:	d9fa      	bls.n	80033fc <_free_r+0x48>
 8003406:	6811      	ldr	r1, [r2, #0]
 8003408:	1850      	adds	r0, r2, r1
 800340a:	42a0      	cmp	r0, r4
 800340c:	d10b      	bne.n	8003426 <_free_r+0x72>
 800340e:	6820      	ldr	r0, [r4, #0]
 8003410:	4401      	add	r1, r0
 8003412:	1850      	adds	r0, r2, r1
 8003414:	4283      	cmp	r3, r0
 8003416:	6011      	str	r1, [r2, #0]
 8003418:	d1de      	bne.n	80033d8 <_free_r+0x24>
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	4401      	add	r1, r0
 8003420:	6011      	str	r1, [r2, #0]
 8003422:	6053      	str	r3, [r2, #4]
 8003424:	e7d8      	b.n	80033d8 <_free_r+0x24>
 8003426:	d902      	bls.n	800342e <_free_r+0x7a>
 8003428:	230c      	movs	r3, #12
 800342a:	602b      	str	r3, [r5, #0]
 800342c:	e7d4      	b.n	80033d8 <_free_r+0x24>
 800342e:	6820      	ldr	r0, [r4, #0]
 8003430:	1821      	adds	r1, r4, r0
 8003432:	428b      	cmp	r3, r1
 8003434:	bf01      	itttt	eq
 8003436:	6819      	ldreq	r1, [r3, #0]
 8003438:	685b      	ldreq	r3, [r3, #4]
 800343a:	1809      	addeq	r1, r1, r0
 800343c:	6021      	streq	r1, [r4, #0]
 800343e:	6063      	str	r3, [r4, #4]
 8003440:	6054      	str	r4, [r2, #4]
 8003442:	e7c9      	b.n	80033d8 <_free_r+0x24>
 8003444:	bd38      	pop	{r3, r4, r5, pc}
 8003446:	bf00      	nop
 8003448:	20000098 	.word	0x20000098

0800344c <_read_r>:
 800344c:	b538      	push	{r3, r4, r5, lr}
 800344e:	4604      	mov	r4, r0
 8003450:	4608      	mov	r0, r1
 8003452:	4611      	mov	r1, r2
 8003454:	2200      	movs	r2, #0
 8003456:	4d05      	ldr	r5, [pc, #20]	; (800346c <_read_r+0x20>)
 8003458:	602a      	str	r2, [r5, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	f7fd fa3a 	bl	80008d4 <_read>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d102      	bne.n	800346a <_read_r+0x1e>
 8003464:	682b      	ldr	r3, [r5, #0]
 8003466:	b103      	cbz	r3, 800346a <_read_r+0x1e>
 8003468:	6023      	str	r3, [r4, #0]
 800346a:	bd38      	pop	{r3, r4, r5, pc}
 800346c:	20000328 	.word	0x20000328

08003470 <_fstat_r>:
 8003470:	b538      	push	{r3, r4, r5, lr}
 8003472:	2300      	movs	r3, #0
 8003474:	4d06      	ldr	r5, [pc, #24]	; (8003490 <_fstat_r+0x20>)
 8003476:	4604      	mov	r4, r0
 8003478:	4608      	mov	r0, r1
 800347a:	4611      	mov	r1, r2
 800347c:	602b      	str	r3, [r5, #0]
 800347e:	f7fd fa6d 	bl	800095c <_fstat>
 8003482:	1c43      	adds	r3, r0, #1
 8003484:	d102      	bne.n	800348c <_fstat_r+0x1c>
 8003486:	682b      	ldr	r3, [r5, #0]
 8003488:	b103      	cbz	r3, 800348c <_fstat_r+0x1c>
 800348a:	6023      	str	r3, [r4, #0]
 800348c:	bd38      	pop	{r3, r4, r5, pc}
 800348e:	bf00      	nop
 8003490:	20000328 	.word	0x20000328

08003494 <_isatty_r>:
 8003494:	b538      	push	{r3, r4, r5, lr}
 8003496:	2300      	movs	r3, #0
 8003498:	4d05      	ldr	r5, [pc, #20]	; (80034b0 <_isatty_r+0x1c>)
 800349a:	4604      	mov	r4, r0
 800349c:	4608      	mov	r0, r1
 800349e:	602b      	str	r3, [r5, #0]
 80034a0:	f7fd fa6b 	bl	800097a <_isatty>
 80034a4:	1c43      	adds	r3, r0, #1
 80034a6:	d102      	bne.n	80034ae <_isatty_r+0x1a>
 80034a8:	682b      	ldr	r3, [r5, #0]
 80034aa:	b103      	cbz	r3, 80034ae <_isatty_r+0x1a>
 80034ac:	6023      	str	r3, [r4, #0]
 80034ae:	bd38      	pop	{r3, r4, r5, pc}
 80034b0:	20000328 	.word	0x20000328

080034b4 <_init>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	bf00      	nop
 80034b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ba:	bc08      	pop	{r3}
 80034bc:	469e      	mov	lr, r3
 80034be:	4770      	bx	lr

080034c0 <_fini>:
 80034c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c2:	bf00      	nop
 80034c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c6:	bc08      	pop	{r3}
 80034c8:	469e      	mov	lr, r3
 80034ca:	4770      	bx	lr
